---
title: "gt cookbook - advanced"
description: "A cookbook of advanced examples with extending {gt}"
format:
  html:
    theme: litera
    toc: true
    toc-location: left
    anchor-sections: true
    code-copy: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(gt)
library(dplyr)
library(htmltools)
library(metathis)
```

<meta name="twitter:title" content="The GT cookbook - Advanced topics"/>
<meta name="twitter:description" content="Leverage the Grammar of Tables with custom HTML, CSS and do more!"/>
<meta name="twitter:url" content="https://themockup.blog/static/gt-cookbook-advanced.html"/>
<meta name="twitter:image" content="https://raw.githubusercontent.com/jthomasmock/radix_themockup/master/static/images/gt-cookbook.png"/>
<meta name="twitter:image:alt" content="Example table"/>
<meta name="twitter:card" content="summary"/>
<meta name="twitter:creator" content="@thomas_mock"/>
<meta name="twitter:site" content="@thomas_mock"/>
<meta property="og:title" content="The GT cookbook - Advanced topics"/>
<meta property="og:description" content="Leverage the Grammar of Tables with custom HTML, CSS and do more!"/>
<meta property="og:url" content="https://themockup.blog/static/gt-cookbook-advanced.html"/>
<meta property="og:image" content="https://raw.githubusercontent.com/jthomasmock/radix_themockup/master/static/images/gt-cookbook.png"/>
<meta property="og:image:alt" content="Example table"/>
<meta property="og:type" content="website"/>
<meta property="og:locale" content="en_US"/>
<meta property="article:author" content="Tom Mock"/>

```{r, echo = FALSE, eval = FALSE}
meta() %>%
  meta_social(
    title = "The GT cookbook - Advanced topics",
    description = "Leverage the Grammar of Tables with custom HTML, CSS and do more!",
    url = "https://themockup.blog/static/gt-cookbook-advanced.html",
    image = "https://raw.githubusercontent.com/jthomasmock/radix_themockup/master/static/images/gt-cookbook.png",
    image_alt = "Example table",
    og_type = "website",
    og_author = "Tom Mock",
    twitter_card_type = "summary",
    twitter_creator = "@thomas_mock"
  )
```


```{css toc, echo = FALSE}
#TOC {
  color: #484848;
}


.tocify-extend-page {
  height: 0px !important;
}


/*------------Table of Contents (TOC)----------- */

.tocify {
      border: none;   /*Removes border */
      border-radius: 0px; /* Gets rid of rounded corners on TOC */
      font-size: 14px;
    }

.tocify ul, .tocify li { /* Increases spacing between TOC headers*/
        line-height: 20px !important;
    }

.tocify ul {
  border-right: solid 1px #eee; /* Thin right border on TOC list */
}

/* Active TOC links*/

  .list-group-item.active,
  .list-group-item.active:hover{
    color: #787878;
    background-color: #ffffff;
    border-color: #ccc;
    border-right: medium #e8f4f8;
  }

/* Hovered TOC links*/

.list-group-item:hover {
  color: #787878;
  background-color: #e8f4f8;
  border: none;
}


```

## Introduction

This cookbook attempts to walk through many of the advanced applications for `gt`, and provide useful commentary around the use of the various `gt` functions. The full [`gt` documentation](https://gt.rstudio.com/index.html) has other more succinct examples and full function arguments.

For more introductory use cases, make sure to check out the [`{gt}` Cookbook](https://themockup.blog/static/gt-cookbook.html)

Many of these examples rely on some working knowledge of:  

* HTML  
* CSS  
* Functional Programming  
* `purrr` and or `apply`  

I am a big fan the Mozilla MDN Web Docs for learning more about how to code up the web with front-end developement. They have sections on [general reference material](https://developer.mozilla.org/en-US/docs/Web/Reference), [Tutorials](https://developer.mozilla.org/en-US/docs/Web/Tutorials), and [Developer Guides](https://developer.mozilla.org/en-US/docs/Web/Guide).

As far as functional programming and `purrr`, I suggest checking out [R4DS Functions Chapter](https://r4ds.had.co.nz/functions.html), [R4DS Iteration chapter](https://r4ds.had.co.nz/iteration.html), and [Advanced R's Function chapter](https://adv-r.hadley.nz/functions.html), and lastly the [Learn to `purrr` guide](http://www.rebeccabarter.com/blog/2019-08-19_purrr/) by Rebecca Barter.

## Custom CSS

For more control over styling, you can add custom class names to the table and
apply your own CSS. Note that this can require more effort than the built in `gt` functions, but also allows some things that aren't possible by the functions align (like hover highlighting!).

```{r}
 exibble %>%
  dplyr::select(num, currency) %>%
  gt(id = "one") %>% # need to name the table so that you can apply CSS
  fmt_currency(
    columns = vars(currency),
    currency = "HKD"
  ) %>%
  fmt_scientific(
    columns = vars(num)
  ) %>%
  opt_css(
    css = "
    #one .gt_table {
      background-color: lightgrey;
    }
    #one .gt_row {
      padding: 20px 30px;
    }
    #one tr:hover {
    background-color: #f5f8ff;
    }
    #one .gt_col_heading {
      text-align: center !important;
    }
    "
  )
```

The examples here embed CSS for demonstration, but it's often better to put CSS
in an external style sheet. You can learn more about adding custom CSS to R Markdown
documents [here](https://bookdown.org/yihui/rmarkdown/html-document.html#custom-css),
or to Shiny apps [here](https://shiny.rstudio.com/articles/css.html).


## Parse arbitrary HTML

Because `gt` supports HTML, you can also optionally "create" HTML strings prior to passing them into `gt` proper.

```{r}
color_span <- function(x){paste0("<span style='color: ", x, ";'>", x, "</span>")}

data.frame(
  count = c(1L, 2L, 3L, 4L, 5L),
  weight_g = c(150.65, 149.65, 171.28, 142.58, 139.04),
  color = c("green", "yellow", "yellow", "green", "yellow")
) %>% 
  mutate(color = color_span(color)) %>% 
  mutate(color = purrr::map(color, gt::html)) %>% 
  gt() 
```

### Embed URLs

You can also use things like `htmltools` or `glue` to arbitrarily build HTML content like hyperlinks.

```{r}
library(htmltools)
ex_sites <- data.frame(
  Address = c("https://google.com", "https://yahoo.com", "https://duckduckgo.com"),
  Site = c("Google", "Yahoo", "DuckDuckGo")
)
gt(ex_sites) %>% 
  text_transform(
    locations = cells_body(columns = vars(Address)),
    fn = function(x) {
    purrr::map(x,  ~htmltools::tags$a(href = .x, target = "_blank", .x))
      }
  ) %>% 
  text_transform(
    locations = cells_body(columns = vars(Site)),
    fn = function(x) {
    purrr::map2(
      .x = x, .y = ex_sites$Address, 
      .f = ~glue::glue('<a href="{.y}" target="_blank">{.x}</a>'))
      }
  )
```

### Embed data

While `gt` tables can be beautiful, it's often best to also include the raw data for download. You can see how to do this with Markdown or HTML thanks to [Bob Rudis' example](https://stackoverflow.com/questions/41196823/embed-csv-in-html-rmarkdown).

```{r}
write.csv2(mtcars, "./file.csv")

encoded <- readLines("./file.csv") %>% 
  paste0(collapse="\n") %>% 
  openssl::base64_encode() -> encoded
```

The raw markdown could be embedded in a Shiny app or RMarkdown document as seen below.

``[Download CSV](`r sprintf('data:text/csv;base64,%s', encoded)`)``

Or you can embed it as HTML using the `html_csv` object as seen above/below.

```{r}
html_encode <- sprintf('data:text/csv;base64,%s', encoded)
html_csv <- glue::glue(
  "<a download='mtcars.csv' href='{html_encode}'>CSV Download</a>"
  )

head(mtcars) %>% 
  gt() %>% 
  tab_source_note(html(html_csv))
```

<br>

You can make this process a bit easier with the `{downloadthis}` R package. It supports csv, Excel and even .rds files! It also takes care of the "download button", and supports Bootstrap button styles. H/t to Kyle Cuilla for the suggestion and Jonathan Regenstein for the ask of how to do this.

```{r, warning = FALSE, message = FALSE}
library(downloadthis)

head(mtcars) %>%
  gt() %>%
  tab_source_note(
    mtcars %>%
      download_this(
        output_name = "mtcars",
        output_extension = ".csv", # CSV output
        button_label = "Download csv",
        button_type = "default",
      )
  )
```

<br>

You can specify the file/output extension, and the button type to alter the appearance. Note that the code works inline as seen above, or defined in an external object as seen below.

```{r, warning=FALSE, message=FALSE}
attach_excel <- mtcars %>%
  download_this(
    output_name = "mtcars",
    output_extension = ".xlsx", # Excel file type
    button_label = "Download Excel",
    button_type = "primary", # change button type
  )

head(mtcars) %>%
  gt() %>%
  tab_source_note(attach_excel)
```

<br>

You can continue and go one step farther by adding custom styling CSS to the table to affect the button style.


```{r, warning=FALSE, message=FALSE}
attach_excel <- mtcars %>%
  download_this(
    output_name = "mtcars",
    output_extension = ".xlsx", # Excel file type
    button_label = "Download Excel",
    class = "buttonExcel"
  )

head(mtcars) %>%
  gt() %>%
  opt_css(
    css = "
    .buttonExcel{
    font-size: 12px;
    color: #fff;
    background-color: black;
    border-color: black;
    font-weight: bold;
    border-radius: 10px;
    padding: 4px;
    }
    
    .buttonExcel:hover,
    .buttonExcel:active,
    .buttonExcel:focus,
    .buttonExcel.active {
    background: grey;
    color: #ffffff;
    border-color: grey;
    }
    "
  ) %>% 
  tab_source_note(attach_excel)
```

### Combine and stack

Combine text into div containers and then "stack" the text on top of each other with alternating color.

```{r}
stack_function <- function(x){
  
  name <- sub(x = x, pattern = " .*$", replacement = "")
  model <- sub(x = x, pattern = ".*? ", replacement = "")

  
  glue::glue(
    "<div style='line-height:10px'>
    <span style='font-weight:bold;font-variant:small-caps;font-size:14px'>
    {name}</div>
    <div style='line-height:12px'>
    <span style ='font-weight:bold;color:grey;font-size:10px'>
    {model}</span></div>"
  )
    }

head(gtcars) %>% 
  dplyr::select(mfr, model, year, trim, hp) %>%
  gt() %>% 
  cols_merge(
    columns = vars(mfr, model)
  ) %>% 
  text_transform(
    locations = cells_body(
      columns = vars(mfr)
    ),
    fn = stack_function
  ) %>% 
  tab_options(
    data_row.padding = px(5),
  )
```

### Align symbol on first row only

We can align text on the first row only even with a suffix (ie symbol at the end). This can be done with just `gt`, but it's a bit verbose.

This example applies a percent label to the `hp_pct` column and properly maintains the decimal place alignment.

```{r}
head(gtcars) %>%
  mutate(hp_pct = (hp/max(hp) * 100)) %>% 
  dplyr::select(mfr, model, year, trim, hp, hp_pct) %>%
  gt() %>%
  # use a mono-spaced font
  tab_style(
    style = cell_text(font = google_font("Fira Mono")),
    locations = cells_body(columns = vars(hp_pct))
    ) %>% 
  # align the column of interst to right
  cols_align(align = "right", columns = vars(hp_pct)) %>% 
  # round and transform the first row to percent
  text_transform(
    locations = cells_body(vars(hp_pct), rows = 1),
    fn = function(x){ 
      fmt_val <- format(as.double(x), nsmall = 1, digits = 1)
      paste0(fmt_val, "%") %>% gt::html()}
  ) %>% 
  text_transform(
    locations = cells_body(vars(hp_pct), rows = 2:6),
    fn = function(x){ 
      # round remaining rows, add a non-breaking space
     fmt_val <- format(as.double(x), nsmall = 1, digits = 1)
     lapply(fmt_val, function(x) paste0(x, '&nbsp') %>% gt::html())
  })
```

We can do the same thing with a custom `gt` function that we'll call `fmt_symbol_first()`.

```{r}
fmt_symbol_first <- function(
  gt_data,
  column = NULL,        # column of interest to apply to
  symbol = NULL,        # symbol to add, optionally
  suffix = "",          # suffix to add, optionally
  decimals = NULL,      # number of decimal places to round to
  last_row_n,           # what's the last row in data?
  symbol_first = FALSE  # symbol before or after suffix?
) {
  
  # Test and error out if mandatory columns are missing
  stopifnot("`symbol_first` argument must be a logical" = is.logical(symbol_first))
  stopifnot("`last_row_n` argument must be specified and numeric" = is.numeric(last_row_n))
  stopifnot("Input must be a gt table" = class(gt_data)[[1]] == "gt_tbl")

  # needs to type convert to double to play nicely with decimals and rounding
  # as it's converted to character by gt::text_transform
  add_to_first <- function(x, suff = suffix, symb = symbol) {
    if (!is.null(decimals)) {
      x <- suppressWarnings(as.double(x))
      fmt_val <- format(x = x, nsmall = decimals, digits = decimals)
    } else {
      fmt_val <- x
    }

    # combine the value, passed suffix, symbol -> html
    if (isTRUE(symbol_first)) {
      paste0(fmt_val, symb, suff) %>% gt::html()
    } else {
      paste0(fmt_val, suff, symb) %>% gt::html()
    }
  }

  # repeat non-breaking space for combined length of suffix + symbol
  # logic is based on is a NULL passed or not
  if (!is.null(symbol) | !identical(as.character(symbol), character(0))) {
    suffix <- ifelse(identical(as.character(suffix), character(0)), "", suffix)
    length_nbsp <- c("&nbsp", rep("&nbsp", nchar(suffix))) %>%
      paste0(collapse = "")
  } else {
    suffix <- ifelse(identical(as.character(suffix), character(0)), "", suffix)
    length_nbsp <- rep("&nbsp", nchar(suffix)) %>%
      paste0(collapse = "")
  }

  # affect rows OTHER than the first row
  add_to_remainder <- function(x, length = length_nbsp) {
    if (!is.null(decimals)) {
      # if decimal not null, convert to double
      x <- suppressWarnings(as.double(x))
      # then round and format ALL to force specific decimals
      fmt_val <- format(x = x, nsmall = decimals, digits = decimals)
    } else {
      fmt_val <- x
    }
    paste0(fmt_val, length) %>% lapply(FUN = gt::html)
  }

  # pass gt object
  # align right to make sure the spacing is meaningful
  gt_data %>%
    cols_align(align = "right", columns = vars({{ column }})) %>%
    # convert to mono-font for column of interest
    tab_style(
      style = cell_text(font = google_font("Fira Mono")),
      locations = cells_body(columns = vars({{ column }}))
    ) %>%
    # transform first rows
    text_transform(
      locations = cells_body(vars({{ column }}), rows = 1),
      fn = add_to_first
    ) %>%
    # transform remaining rows
    text_transform(
      locations = cells_body(vars({{ column }}), rows = 2:last_row_n),
      fn = add_to_remainder
    )
}
```

#### Apply the custom function.

We can then use the function as a one-liner, and format just that column of interest.

```{r}
head(gtcars) %>%
  mutate(hp_pct = (hp/max(hp) * 100)) %>% 
  dplyr::select(mfr, model, year, trim, hp, hp_pct) %>%
  gt() %>% 
  opt_table_lines() %>% 
  fmt_symbol_first(column = hp_pct, decimals = 1, suffix = "%", last_row_n = 6)
```

### Sparkline plots

We can embed sparkline plots with some help from the `kableExtra` package.

```{r}
mtcars %>%
  group_by(cyl) %>%
  summarize(mpg_data = list(mpg), .groups = "drop") %>%
  gt() %>%
  text_transform(
    locations = cells_body(columns = vars(mpg_data)),
    fn = function(x) {
      data_in <- purrr::pluck(., "_data", "mpg_data")
      plot <- purrr::map(
        data_in, ~ kableExtra::spec_plot(
          .x, ylim = range(mtcars$mpg), 
          same_lim = TRUE, width = 300, height = 70
          )
        )
      
      plot <- purrr::map_chr(plot, "svg_text")
    }
  )
```

#### Create a function

We can alternatively write a function to do something similar.

```{r}
gt_plot <- function(table_data, plot_col, data_col, plot_fun, ...){
  # save the data extract ahead of time 
  # to be used in our anonymous function below
  data_in = purrr::pluck(table_data, "_data", data_col)

  text_transform(
    table_data,
    # note the use of {{}} here - this is tidy eval
    # that allows you to indicate specific columns
    locations = cells_body(columns = vars({{plot_col}})),
    fn = function(x){
      plot <- purrr::map(data_in, plot_fun, width = 300, height = 70, same_lim = FALSE, ...)
      plot_svg <- purrr::map(plot, "svg_text")
      purrr::map(plot_svg, gt::html)
    }
  )
}
```

And then we can use that function!

```{r}
mtcars %>% 
  group_by(cyl) %>% 
  summarize(mpg_data = list(mpg), .groups = "drop") %>% 
  gt() %>% 
  # note you can leave mpg_data unquoted for the tidyeval
  # but have to quote mpg_data for the pluck
  gt_plot(mpg_data, "mpg_data", plot_fun = kableExtra::spec_plot)
```

#### Interactive sparklines

We can use the `sparkline` package to embed interactive sparklines.

```{r}
gt_spark <- function(table_data, plot_col, data_col){
  # save the data extract ahead of time 
  # to be used in our anonymous function below
  data_in = purrr::pluck(table_data, "_data", data_col)
  
  text_transform(
    table_data,
    # note the use of {{}} here - this is tidy eval
    # that allows you to indicate specific columns
    locations = cells_body(columns = vars({{plot_col}})),
    fn = function(x){
      sparkline_plot <- purrr::map(
        data_in, 
        ~sparkline::spk_chr(values = .x, chartRangeMin = 0)
        )
      
      purrr::map(sparkline_plot, gt::html)
    }
  )
}

```

We can then apply the function to work very succinctly, referencing only the internal list-column data.

```{r}
mtcars %>% 
  group_by(cyl) %>% 
  summarize(mpg_data = list(mpg), .groups = "drop") %>% 
  gt() %>% 
  # note you can leave mpg_data unquoted for the tidyeval
  # but have to quote mpg_data for the pluck
  gt_spark(mpg_data, "mpg_data")
```

### Tooltips

Tooltips can be added with HTML tags.

```{r}
library(htmltools)

#    
# Add tooltip to column labels
with_tooltip <- function(value, tooltip) {
  tags$abbr(
    style = "text-decoration: underline;
    text-decoration-style: solid; color: blue",
    title = tooltip,
    value
  ) %>% 
    as.character()
}

mtcars %>% 
  head() %>% 
  tibble::rownames_to_column() %>% 
  select(rowname, mpg:hp) %>% 
  gt() %>% 
   cols_label(
    mpg = gt::html(with_tooltip("MPG", "Miles per Gallon")),
    cyl = gt::html(with_tooltip("CYL", "Number of Cylinders")),
    disp = gt::html(with_tooltip("DISP", "Displacement")),
    hp = gt::html(with_tooltip("HP", "Horsepower")),
  )

```

### Add icons

You can add arbitrary icons with the `fontawesome` R package.

```{r}
mtcars %>% 
  head() %>% 
  gt() %>% 
  text_transform(
    locations = cells_body(columns = vars(cyl), rows = cyl == 4),
    fn = function(x){gt::html(fontawesome::fa("truck-pickup", fill = "blue"))}
  ) %>% 
  text_transform(
    locations = cells_body(columns = vars(cyl), rows = cyl == 6),
    fn = function(x){gt::html(fontawesome::fa("truck", fill = "grey"))}
  ) %>% 
  text_transform(
    locations = cells_body(columns = vars(cyl), rows = cyl == 8),
    fn = function(x){gt::html(fontawesome::fa("truck-monster", fill = "red"))}
  )
```

### Add rating stars

You can take the icons example a step further, and assign rating stars. For this example, we're creating HTML content in the data itself, before passing it into `gt`. This example adapted from [`reactable`](https://glin.github.io/reactable/articles/cookbook/cookbook.html#rating-stars-1).

```{r}
# note you could use ANY font-awesome logo
# https://fontawesome.com/cheatsheet
rating_stars <- function(rating, max_rating = 5) {
  rounded_rating <- floor(rating + 0.5)  # always round up
  stars <- lapply(seq_len(max_rating), function(i) {
    if (i <= rounded_rating) fontawesome::fa("star", fill= "orange") else fontawesome::fa("star", fill= "grey")
  })
  label <- sprintf("%s out of %s", rating, max_rating)
  div_out <- htmltools::div(title = label, "aria-label" = label, role = "img", stars)
  
  as.character(div_out) %>% 
    gt::html()
}

mtcars %>% 
  slice(1:5) %>% 
  mutate(rating = purrr::map(sample(1:5, size = 5, TRUE), rating_stars)) %>% 
  gt()
```


### Tags and badges

Again we can create a custom function and use `purrr::map()` to generate the HTML code before passing it into `gt`. Example adapted from [`reactable` documentation](https://glin.github.io/reactable/articles/cookbook/cookbook.html#tags-and-badges).

```{r}
add_cyl_color <- function(cyl){
      add_color <- if (cyl == 4) {
        "background: hsl(116, 60%, 90%); color: hsl(116, 30%, 25%);"
      } else if (cyl == 6) {
        "background: hsl(230, 70%, 90%); color: hsl(230, 45%, 30%);"
      } else if (cyl == 8) {
        "background: hsl(350, 70%, 90%); color: hsl(350, 45%, 30%);"
      }
      div_out <- htmltools::div(
        style = paste(
          "display: inline-block; padding: 2px 12px; border-radius: 15px; font-weight: 600; font-size: 12px;",
          add_color
          ),
        paste(cyl, "Cylinders")
      )
      
      as.character(div_out) %>% 
        gt::html()
}

mtcars %>% 
  head() %>% 
  mutate(cylinder = purrr::map(cyl, add_cyl_color)) %>% 
  gt()
```

#### Badges

We can also use badges in a similar way.

```{r, echo=FALSE}
set.seed(20)
```

```{r tags}
add_badge <- function(x){
      add_color <- if (x == "Paid") {
        "background: hsl(116, 60%, 90%); color: hsl(116, 30%, 25%);"
      } else if (x == "Pending") {
        "background: hsl(230, 70%, 90%); color: hsl(230, 45%, 30%);"
      } else if (x == "Canceled") {
        "background: hsl(350, 70%, 90%); color: hsl(350, 45%, 30%);"
      }
      div_out <- htmltools::div(
        style = paste(
          "display: inline-block; padding: 2px 12px; border-radius: 15px; font-weight: 600; font-size: 12px;",
          add_color
          ),
        x
      )
      
      as.character(div_out) %>% 
        gt::html()
}


orders <- data.frame(
  Order = 2300:2304,
  Created = seq(as.Date("2019-04-01"), by = "day", length.out = 5),
  Customer = sample(rownames(MASS::painters), 5),
  Status = sample(c("Pending", "Paid", "Canceled"), 5, replace = TRUE)
) %>% 
  mutate(Status = purrr::map(Status, add_badge))

orders %>% 
  gt()
```

### Expandable sections

You can embed expandable sections with `<details>` HTML, and we can build up some contents of the details tag with the use of `htmltools`. 

```{r}
library(htmltools)

source_details <- paste0(
  "<details>", "<summary><strong>Table Key, click to expand</strong></summary>",
  div("cyl: Cylinders"), div("disp: Displacement"), div("hp: Horsepower"),
  "</details"
)

head(mtcars) %>% 
  gt() %>% 
  tab_source_note(source_note = html(source_details))
```


### Bar charts

There are different ways to create bar charts, but the example below is adapted from the [`reactable` documentation](https://glin.github.io/reactable/articles/cookbook/cookbook.html#bar-charts). The original source on  [CSS bars](https://css-tricks.com/making-charts-with-css/) using HTML and CSS.

```{r}
bar_chart <- function(label, height = "16px", fill = "#00bfc4", background = "white") {
  bar <- glue::glue(
    "<div style='background:{fill};width:{label}%;height:{height};'></div>"
    )
  chart <- glue::glue(
    "<div style='flex-grow:1;margin-left:8px;background:{background};'>{bar}</div>"
  )
  glue::glue(
    "<div style='display:flex;align-items:left';>{chart}</div>"
    ) %>%
  gt::html()
  
}

mtcars %>% 
  head() %>% 
  mutate(
    mpg_val = mpg/max(mpg) * 100,
    mpg_plot = purrr::map(mpg_val, ~bar_chart(label = .x)),
    mpg_plot2 = purrr::map(
      mpg_val, 
      ~bar_chart(label = .x, fill = "#fc5185", background = "#e1e1e1")
      ),
    ) %>% 
  select(cyl, hp, disp, mpg, mpg_plot, mpg_plot2) %>% 
  gt() %>% 
  cols_align(align = "left", columns = vars(mpg_plot)) 
```



### Embed images

The function provides a convenient way to generate an HTML fragment with an image URL. Because this function is currently HTML-based, it is only useful for HTML table output. To use this function inside of data cells, it is recommended that the text_transform() function is used. 

```{r}
r_png_url <- "https://www.r-project.org/logo/Rlogo.png"

dplyr::tibble(
    pixels = px(seq(10, 20, 5)),
    image = seq(10, 20, 5)
  ) %>%
  gt() %>%
  text_transform(
    locations = cells_body(vars(image)),
    fn = function(x) {
      web_image(
        url = r_png_url,
        height = as.numeric(x)
      )
    }
  )

```


### More images

You can include multiple images by parsing the url along with `purrr::map()` or `lapply()`

```{r}
tibble::tribble(
  ~team_abb, ~headshot_href,      ~short_name, ~qbr_total, ~qb_plays,
       "GB",    "8439.png",     "A. Rodgers",       84.4,       608,
       "KC", "3139477.png",     "P. Mahomes",       82.9,       710,
      "BUF", "3918298.png",       "J. Allen",       81.7,       729,
      "TEN",   "14876.png",   "R. Tannehill",       78.3,       594
  ) %>% 
  mutate(
    headshot_href = paste0(
      "https://a.espncdn.com/i/headshots/nfl/players/full/", headshot_href
      )
    ) %>% 
  gt() %>%
  text_transform(
    locations = cells_body(vars(headshot_href)),
    fn = function(x) {purrr::map(x,~ web_image(url = .x, height = 30))}
  )
```

## `gt` functions

This section assumes that you become familiar with the `{{ var }}` syntax, known as "embrace" or "curly curly". This allows the tidy-evaluation of bare names. A brief example below with a custom function.

```{r}
ex_function <- function(column){
  mtcars %>% 
    # provide the embrace around the variable name
    # and it can be parsed by tidy-eval
    group_by({{ column }}) %>% 
    summarize(mean = mean(mpg)) %>% 
    ungroup()
}

ex_function(cyl)
```

While that example shows the usage of `{{ var }}`, you can also read a bit more in the [`rlang` docs](https://rlang.r-lib.org/reference/nse-force.html).

### Basic functions

You can create repeatable functions with a specific purpose relatively easily with `gt`.

```{r}
car_table <- function(grouping){
  mtcars %>% 
    head() %>% 
    gt(groupname_col = grouping) %>% 
    opt_row_striping() %>% 
    tab_options(
      data_row.padding = px(4)
    ) %>% 
    tab_style(
      style = list(
        cell_fill(color = "black"),
        cell_text(color = "white", weight = "bold")
      ),
      locations = cells_row_groups()
    )
}

car_table("am")
```

<br>

These can be even useful with datasets that are similar in structure (ie same columns), but change week to week, for example reports.

```{r}
car_table <- function(data_in){
  # provide data_in as an argument, so that the table is similar
  # but the data itself can change
  data_in %>% 
    gt(groupname_col = "cyl") %>% 
    opt_row_striping() %>% 
    tab_options(
      data_row.padding = px(4)
    ) %>% 
    tab_style(
      style = list(
        cell_fill(color = "black"),
        cell_text(color = "white", weight = "bold")
      ),
      locations = cells_row_groups()
    )
}

mtcars %>% 
  slice_sample(n = 12) %>% 
  car_table()
```


## Create a theme

Creating a theme is similar to a normal function and can be done by passing in a `gt` object, and setting some parameters in various `gt` functions. Here we define a basic theme. 

```{r}
my_gt_theme <- function(data, ...) {
  data %>%
    tab_options(
      table.background.color = "black",
      column_labels.background.color = "grey",
      column_labels.font.size = px(16),
      table.font.size = px(12),
      data_row.padding = px(4),
      ...
    )
}
```

And we can then apply that theme. Note that the theme is intentionally relative garish but we can see that we turned some of the arguments into a one-liner.

```{r}
head(gtcars) %>% 
  gt() %>% 
  my_gt_theme(table.font.color.light = "lightgreen")
```

### Example Theme

A "prettier" theme based off an ESPN table style.

```{r}
gt_theme_espn <- function(data, ...){
  data %>% 
    opt_all_caps()  %>%
    opt_table_font(
      font = list(
        google_font("Lato"),
        default_fonts()
      )
    )  %>% 
    opt_row_striping() %>% 
    tab_options(
      row.striping.background_color = "#fafafa",
      table_body.hlines.color = "#f6f7f7",
      source_notes.font.size = 12,
      table.font.size = 16,
      table.width = px(700),
      heading.align = "left",
      heading.title.font.size = 24,
      table.border.top.color = "transparent",
      table.border.top.width = px(3),
      data_row.padding = px(7),
      ...
    ) 
}
```

```{r, eval = FALSE}
head(gtcars) %>% 
  dplyr::select(mfr:mpg_c) %>% 
  gt() %>% 
  gt_theme_espn()
```

```{r, echo = FALSE, results='asis'}
head(gtcars) %>% 
  dplyr::select(mfr:mpg_c) %>% 
  gt() %>% 
  gt_theme_espn() %>% 
  as_raw_html()
```

### FiveThirtyEight Theme

My favorite tables come from FiveThirtyEight, so here is an example theme that closely follows their style.

```{r}
gt_theme_538 <- function(data,...) {
  data %>%
  opt_all_caps()  %>%
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) %>%
    tab_style(
      style = cell_borders(
        sides = "bottom", color = "transparent", weight = px(2)
      ),
      locations = cells_body(
        columns = TRUE,
        # This is a relatively sneaky way of changing the bottom border
        # Regardless of data size
        rows = nrow(data$`_data`)
      )
    )  %>% 
  tab_options(
    column_labels.background.color = "white",
    table.border.top.width = px(3),
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    table.border.bottom.width = px(3),
    column_labels.border.top.width = px(3),
    column_labels.border.top.color = "transparent",
    column_labels.border.bottom.width = px(3),
    column_labels.border.bottom.color = "black",
    data_row.padding = px(3),
    source_notes.font.size = 12,
    table.font.size = 16,
    heading.align = "left",
    ...
  ) 
}
```

```{r,eval = FALSE}
head(gtcars) %>% 
  dplyr::select(mfr:mpg_c) %>% 
  gt() %>% 
  gt_theme_538() 
```

```{r,echo = FALSE, results='asis'}
head(gtcars) %>% 
  dplyr::select(mfr:mpg_c) %>% 
  gt() %>% 
  gt_theme_538() %>% 
  as_raw_html()
```

## Tidy eval

Now, I want to preface this by saying that the entire `tidyeval` framework used in `gt` is currently under active development to be more closely aligned with the `tidyverse`. You'll note the relatively legacy use of `vars()` inside `gt`.

Most of this is only required for creating your own functions, although there are some sharp edges around specifying columns in `vars()`.

For some nice reading about `tidyeval` beyond the scope of just `gt`, see:  

- [Advanced R - book](https://adv-r.hadley.nz/metaprogramming.html)  
- [Tidyeval - book](https://tidyeval.tidyverse.org/)  

To start off, let's revisit an example from the cookbook. First we'll prep the data.

```{r}
dimnames <- list(start(nottem)[1]:end(nottem)[1], month.abb)
temps <- matrix(nottem, ncol = 12, byrow = TRUE, dimnames = dimnames) %>% 
  data.frame() %>% 
  tibble::rownames_to_column() %>% 
  head(10)

temps %>% 
  tibble()
```

<br>
<br>

We'll also define our "Hulk palette" as a function.

```{r}
hulk_pal <- function(x){
  scales::col_numeric(
      colorspace::diverge_hcl(n = 9, palette = "Purple-Green") %>% rev(), 
      domain = range(nottem)
      )(x)
}
```

This function supplies a number or a vector of numbers to generate colors.

```{r}
# January is cold
temps$Jan %>% hulk_pal() %>%  scales::show_col()
```

```{r}
# June is warm
temps$Jun %>% hulk_pal() %>%  scales::show_col()
```


### Sequence of columns

You may typically use something like `Jan:Dec` to indicate the columns from Jan TO Dec, but this won't work in `vars()`. This throws an error `Error: Can't convert a call to a string`. However we can accomplish similar things through other techniques.

```{r,eval = FALSE}
temps %>% 
  gt() %>% 
  data_color(
    # note use of sequence
    columns = vars(Jan:Dec),
    colors = hulk_pal
  )

#> Error: Can't convert a call to a string
```

### Raw strings

You can pass raw strings into `vars()`. Since our names of the columns are month abbreviation, we can take advantage of the built in `month.abb` string.

```{r}
month.abb
```

We can compare the code for the below, note the use of `month.abb` first or manually naming ALL the column names second.

```{r}
temps %>% 
  gt() %>% 
  data_color(
    # note use of month.abb
    columns = vars(month.abb),
    colors = hulk_pal
  )
```

<br>
<br>

```{r}
temps %>% 
  gt() %>% 
  data_color(
    columns = vars(
      Jan, Feb, Mar, Apr, May, Jun, 
      Jul, Aug, Sep, Oct, Nov, Dec
      ),
    colors = hulk_pal
  )
```

### Numbered

Now you can skip using `vars()` and the named column and just supply the column number. This is a great usecase if you have a lot of columns that need to be used and want a low-effort way of indicating.

```{r}
temps %>% 
  gt() %>% 
  data_color(
    columns = 2:13,
    colors = hulk_pal
  )
```


### Names

You can subset the names of the column but without using `tidyeval` must assign it to an object to use it inside `vars()`.

```{r}
cols_affect <- names(temps)[2:13]

temps %>% 
  gt() %>% 
  data_color(
    columns = vars(cols_affect),
    colors = hulk_pal
  )
```

#### Names + `!!!`

If you use `tidyeval`'s bang-bang-bang operator (`!!!`), then you can parse the R code inside the `vars()` call.

```{r}
temps %>% 
  gt() %>% 
  data_color(
    columns = vars(!!!names(temps)[2:13]),
    colors = hulk_pal
  )
```

### Strings

You can pass raw strings to `vars()` and separate them by commas.

```{r}
temps %>% 
  gt() %>% 
  data_color(
    columns = vars("Jan", "Feb"),
    colors = hulk_pal
  )
```

#### Strings + `c()`

IF you use a `c()` you need to use the `!!!` operator. More details at [Advanced R](https://adv-r.hadley.nz/quasiquotation.html).

```{r}

temps %>% 
  gt() %>% 
  data_color(
    columns = vars(!!!c("Jan", "Feb")),
    colors = hulk_pal
  )
```

### Functions

Functions require some special subsets of `tidyeval`. There are multiple ways to approach this with the current implementation of `tidyeval`, although this will hopefully become even more robust over time as the `gt` team continues to develop the package.

### Pass the dots

For representing multiple columns at once, you can just "pass the dots" into the function. More details about the [dots](https://tidyeval.tidyverse.org/multiple.html#unquote-multiple-arguments).

```{r}
color_columns <- function(data_in, ..., palette = hulk_pal) {
  data_in %>%
    gt() %>%
    data_color(
      columns = vars(...),
      colors = palette
    )
}

color_columns(temps, Jan, Feb, Mar, Apr, May, Jun)
```

#### Wrapper

Similarly, this could just be a wrapper around `data_color` alone, rather than the full `gt` pipeline.

```{r}
data_color_cols <- function(gt_data, ..., palette = hulk_pal) {
  gt_data %>%
    data_color(
      columns = vars(...),
      colors = palette
    )
}

temps %>% 
  gt() %>% 
  data_color_cols(Jan, Feb, Mar, Apr, May, Jun)
```

### Function + Strings

If you'd like to avoid using `...` or would prefer strings, you can pass raw strings `vars()` and use `!!!` to parse the vector of strings.

```{r}
data_color_cols <- function(gt_data, columns, palette = hulk_pal) {

  gt_data %>%
    data_color(
      columns = vars(!!!columns),
      colors = palette
    )
}

temps %>% 
  gt() %>% 
  data_color_cols(columns = c("Jan", "Feb", "Mar"))
```

### Embrace

The embracing operator `{{ }}` can be used for single columns.

```{r}
color_column <- function(data_in, column, palette = hulk_pal) {

  data_in %>%
    gt() %>%
    data_color(
      columns = vars({{column}}),
      colors = palette
    )
}

color_columns(temps, Jun)
```

#### Wrapper

Similarly, this could just be a wrapper around `data_color` alone, rather than the full `gt` pipeline.

```{r}
data_color_col <- function(gt_data, column, palette = hulk_pal) {

  gt_data %>%
    data_color(
      columns = vars({{column}}),
      colors = palette
    )
}

temps %>% 
  gt() %>% 
  data_color_col(column = Jun)
```



```{r, echo = FALSE, eval = FALSE}

## THIS IS NOT WORKING BELOW

### Background bar charts

# Another way to create bar charts is to render them as background images.
# This example creates bar images using the
# [`linear-gradient()`](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient())
# CSS function, and was inspired by an example from https://rstudio.github.io/DT/010-style.html.

# Render a bar chart in the background of the cell
bar_style <- function(width = 1, fill = "#ddd", height = "75%", right = FALSE) {
  if (right) {
    position <- paste0(100 - width * 100, "%")
    image <- sprintf("linear-gradient(90deg, transparent %1$s, %2$s %1$s)", position, fill)
  } else {
    position <- paste0(width * 100, "%")
    image <- sprintf("linear-gradient(90deg, %1$s %2$s, transparent %2$s)", fill, position)
  }
  
  height_add <- paste('100%', height)
  
  glue::glue(
    "<div style='background-image:{image};background-size:{height_add}; background-repeat:no-repeat; background-position:center;'></div>"
  ) %>% as.character() %>% 
    gt::html()
    
}

bar_style(width = 1)

mtcars %>% 
  head() %>% 
  # tibble() %>% 
  mutate(mpg_val = (mpg/max(mpg)) %>% round(digits = 2)) %>% 
  mutate(
    mpg_plot = purrr::map(
      mpg_val, 
      ~bar_style(width = .x, fill = "#a5d6f3")
      )
    ) %>% 
  # mutate(
  #   mpg_plot = purrr::map(mpg_plot, gt::html)
  # ) %>% 
  select(cyl, hp, disp, mpg, mpg_plot) %>% 
  gt() %>% 
  cols_align(align = "left", columns = vars(mpg_plot)) 
#### TO INCLUDE?


## Custom Rendering
# You can customize how data is displayed using an R or JavaScript function
# that returns custom content. R render functions support
# [Shiny HTML tags](https://shiny.rstudio.com/articles/tag-glossary.html) (or
# [`htmltools`](https://mastering-shiny.org/advanced-ui.html#generating-html)) and
# [`htmlwidgets`](https://www.htmlwidgets.org/),
# while JavaScript render functions allow for more dynamic behavior.
# 
# You can also render content as HTML using `colDef(html = TRUE)`. Note that all
# raw HTML is escaped by default.
# 
# See [Custom Rendering](custom-rendering.html) for details on how to
# use render functions, and the [Demo Cookbook](cookbook/cookbook.html)
# for even more examples of custom rendering.
```
