---
title: "reactable - An Interactive Tables Guide"
description: |
  Part 2: How to draw the rest of the owl.
author: Thomas Mock
date: 05-15-2020
categories:
  - NFL
  - tidyverse
  - tables
image: distill-preview.png
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

![A charcoal drawing of an owl with two steps](owl.png)
[It is a beautiful owl/table though isn't it?]{.aside}

<br>

Part 2 of this guide will go through how to in fact draw the rest of the owl, as the previous post barely covered the how and instead focused on a clean final product.

## `reactable` - interactive data tables

`reactable` is an R wrapper for the `react table` javascript library. Greg Lin at RStudio recently made this package and you can install it from CRAN with `install.packages("reactable")`. I adapted this table from some examples at the [`reactable` package site](https://glin.github.io/reactable/articles/womens-world-cup/womens-world-cup.html).

If you want to go much deeper than this basic guide, check out the [`reactable` site](https://glin.github.io/reactable/articles/examples.html), which has lots of examples!

Raw data comes from: [Pro Football Reference](https://www.pro-football-reference.com/play-index/pgl_finder.cgi?request=1&match=game&year_min=2014&year_max=2019&season_start=1&season_end=-1&pos%5B%5D=QB&is_starter=E&game_type=P&career_game_num_min=1&career_game_num_max=400&qb_start_num_min=1&qb_start_num_max=400&game_num_min=0&game_num_max=99&week_num_min=0&week_num_max=99&qb_started=Y&c5val=1.0&order_by=pass_td) & [Over the Cap](https://overthecap.com/position/quarterback/)

## Read in the Data

I've gone through collecting the data and have put into a non-tidy wide format for Salary Rank, playoff week and appearances, Total appearances, and finally salary from 2014-2019.

```{r load libraries and read data}
library(reactable) # for interactive tables
library(tidyverse) # all the things
library(htmltools) # for building div/links
library(paletteer) # for all the palettes

playoff_salary <- read_csv("https://raw.githubusercontent.com/jthomasmock/radix_themockup/master/_posts/2020-05-13-qb-salaries-vs-playoff-appearances/playoff_salary.csv")

glimpse(playoff_salary)
```

## Basics of reactable

A very basic `reactable` table can be created as so:

```{r basic reactable}
playoff_salary %>%
  reactable()
```

Immediately we have reactive table split into 4x pages with 10 observations per page. 

The core parts we want to change are:  
- Conditional color formatting for Total Appearances and Salary  
- All on one page  
- Change the font  

# Conditional Colors

Like most things in R there are **MANY** ways to generate indeterminate length color palettes. For more info about using color to represent data values check out [Claus Wilke's book section](https://clauswilke.com/dataviz/color-basics.html#color-to-represent-data-values). Importantly - we want a sequential/continuous color scale. 

Per Claus:

> Such a scale contains a sequence of colors that clearly indicate (i) which values are larger or smaller than which other ones and (ii) how distant two specific values are from each other. The second point implies that the color scale needs to be perceived to vary uniformly across its entire range.
> 
> Sequential scales can be based on a single hue (e.g., from dark blue to light blue) or on multiple hues (e.g., from dark red to light yellow) (Figure 4.3). Multi-hue scales tend to follow color gradients that can be seen in the natural world, such as dark red, green, or blue to light yellow, or dark purple to light green. The reverse, e.g. dark yellow to light blue, looks unnatural and doesnâ€™t make a useful sequential scale.

![Figure 4.3](https://clauswilke.com/dataviz/color_basics_files/figure-html/sequential-scales-1.png)

Now there are plenty of palettes to choose from, such as `viridis`, `RColorBrewer`, `ggthemes`, as well as a nice meta collection via `paletteer`!

Now it's often hard to keep track of these palettes and what they actually look like.

To display ANY palette or vector of colors in R you can use `scales::show_col()` - `scales` comes along with `ggplot2` & the `tidyverse`, so you probably don't need to install it (just load it)! Reference: [StackOverflow](https://stackoverflow.com/questions/51867716/plot-colors-with-hex-values-in-r) and [`scales`](https://scales.r-lib.org/reference/colour_ramp.html).

```{r load scales and show_col}
library(scales)

scales::show_col(c("red", "black", "blue", "purple"))
```

`scales::show_col()` also works with palettes/vectors.

<aside>
```{r show_col viridis 1}

viridis::viridis(n = 16) %>% 
  scales::show_col()
```
</aside>

`scales::show_col()` also works with `paletteer` or really any other palette package to display palettes/vectors. You just need to supply > 1 color as a character vector and you're good to go!

<aside>
```{r show_col red}
"ggsci::red_material" %>% 
  paletteer::paletteer_d(., n = 9) %>% 
  scales::show_col()
```
</aside>

Now that we understand how to show colors, I'll explain a bit more about our coloring function.

## Color Function

I borrowed my function to generate colors scales through `grDevices::colorRamp()` from Greg Lin's examples. This makes use of `colorRamp` to generate a sequence of colors and then pull them according to a sliding scale normalized to 0-1.

```{r basic palette}
# greg's palette
scales::show_col(c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"))
```

Back to our color scale, we can display an example step-by-step.

```{r color ramp}

# Function by Greg Lin
# Notice bias here = a positive number. 
# Higher values give more widely spaced colors at the high end

make_color_pal <- function(colors, bias = 1) {
  get_color <- colorRamp(colors, bias = bias)
  function(x) rgb(get_color(x), maxColorValue = 255)
}

good_color <- make_color_pal(c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"), bias = 2)

# Generate a vector of example numbers between 0 and 1
seq(0.1, 0.9, length.out = 12)

# create matching colors
good_color(seq(0.1, 0.9, length.out = 12))

# display the colors
seq(0.1, 0.9, length.out = 12) %>% 
  good_color() %>% 
  scales::show_col()
```

<aside>
The palette that Greg and FiveThirtyEight used for this plot is roughly similar to the lower half of `viridis` - a commonly used continuous color scale that is mostly color-blind friendly.

```{r viridis show_col, echo = FALSE}
viridis::viridis(12, 
                 begin = 0.5,
                 direction = -1) %>% 
  scales::show_col()
```
</aside>

# Format by value

`reactable` has a [section on conditional styling](https://glin.github.io/reactable/articles/conditional-styling.html) - either logical or based on a continuous scale. You can use R or JavaScript functions to change the style of cells.

The core table is seen below with comments added to highlight some emphasized changes.

```{r core table}
playoff_salary %>% 
  mutate(salary = round(salary, 1)) %>% 
    
    ##########################
    ### This section changed
    ##########################
  reactable(
    # ALL one page option (no scrolling or page swapping)
    pagination = TRUE,
    # compact for an overall smaller table width wise
    compact = TRUE,
    # borderless - TRUE or FALSE
    borderless = FALSE,
    # Stripes - TRUE or FALSE
    striped = FALSE,
    # fullWidth - either fit to width or not
    fullWidth = FALSE,
    # apply defaults
    # 100 px and align to center of column
    defaultColDef = colDef(
      align = "center",
      minWidth = 100
    ))
```

To actually change the color according to our color scale, we can use the below code. We are defining an anonymous (unsaved) function and using our `good_color()` function to generate values along our scale.

```{r add scale}
playoff_salary %>% 
  mutate(salary = round(salary, 1)) %>% 
  reactable(
    # ALL one page (no scrolling or page swapping)
    pagination = TRUE,
    # compact for an overall smaller table width wise
    compact = TRUE,
    # borderless - TRUE or FALSE
    borderless = FALSE,
    # Stripes - TRUE or FALSE
    striped = FALSE,
    # fullWidth - either fit to width or not
    fullWidth = FALSE,
    # apply defaults
    # 100 px and align to center of column
    defaultColDef = colDef(
      align = "center",
      minWidth = 100
    ),
    
      ##########################
      ### This section changed
      ##########################
    
    # This part allows us to apply specific things to each column
    columns = list(
      salary = colDef(
        name = "Salary",
        style = function(value) {
          value
          normalized <- (value - min(playoff_salary$salary)) / (max(playoff_salary$salary) - min(playoff_salary$salary))
          color <- good_color(normalized)
          list(background = color)
        }
      )
      )
    )
```

Woo! We now have a color scale ranging from about 4 million to 130 million, but let's indicate Millions with an M so that people don't get confused. There is a bit of JavaScript code here - please note, I don't know JavaScript BUT JavaScript can be a functional programming language, so I bet the code below looks readable to you! In this case, `cellInfo.value` is like `dataframe$value`, so it will parse through and apply the function to each cell in our table.

I adapted this code from [StackOverflow](https://stackoverflow.com/questions/46656851/format-number-into-kthousand-mmillion-in-shiny-datatables).

```{r js fake, eval = FALSE}
"function(cellInfo) { return '$' + cellInfo.value + ' M'}"
```

Formatting numbers all together now, with both the color function and the JS function to add dollar + M to our cells.

```{r format M}
playoff_salary %>% 
  mutate(salary = round(salary, 1)) %>% 
  reactable(
    # ALL one page (no scrolling or page swapping)
    pagination = TRUE,
    # compact for an overall smaller table width wise
    compact = TRUE,
    # borderless - TRUE or FALSE
    borderless = FALSE,
    # Stripes - TRUE or FALSE
    striped = FALSE,
    # fullWidth - either fit to width or not
    fullWidth = FALSE,
    # apply defaults
    # 100 px and align to center of column
    defaultColDef = colDef(
      align = "center",
      minWidth = 100
    ),
    
      ##########################
      ### This section changed
      ##########################
    
    # This part allows us to apply specific things to each column
    columns = list(
      salary = colDef(
        # note I can re-define the name of salary to Salary
        name = "Salary",
        style = function(value) {
          value
          # normalize each value relative to min/max (scale between 0 and 1)
          normalized <- (value - min(playoff_salary$salary)) / (max(playoff_salary$salary) - min(playoff_salary$salary))
          # assign a color base on the normalized value
          color <- good_color(normalized)
          # return a list object of the color
          list(background = color)
        },
        # This is javascript to take the cell's value and add an M to the value
        # Note that because this is done at the JS level
        # the columns still sort properly (they're still numbers!)
        # There are built in format currency options, but not one
        # for compressing to Millions AND to dollars for example
        cell = JS("function(cellInfo) { return '$' + cellInfo.value + ' M'}")
      )
      )
  )
```
## Format Total Column

Now we can use a similar approach to add color to our Total playoff appearances column. 

```{r all together}
tbl <- playoff_salary %>% 
  mutate(salary = round(salary, 1)) %>% 
  reactable(
    pagination = FALSE,
    compact = TRUE,
    borderless = FALSE,
    striped = FALSE,
    fullWidth = FALSE,
    defaultColDef = colDef(
      align = "center",
      minWidth = 100
    ),
    # Add theme for the top border
    theme = reactableTheme(
      headerStyle = list(
        "&:hover[aria-sort]" = list(background = "hsl(0, 0%, 96%)"),
        "&[aria-sort='ascending'], &[aria-sort='descending']" = list(background = "hsl(0, 0%, 96%)"),
        borderColor = "#555"
      )
    ),
    columns = list(
      salary = colDef(
        name = "Salary",
        style = function(value) {
          value
          normalized <- (value - min(playoff_salary$salary)) / (max(playoff_salary$salary) - min(playoff_salary$salary))
          color <- good_color(normalized)
          list(background = color)
        },
        cell = JS("function(cellInfo) {return '$' + cellInfo.value + 'M'}")
      ),
      
      ##########################
      ### This section changed
      ##########################
      # We can now do a similar function for Total to color according to a
      # normalized scale
      Total = colDef(
        style = function(value) {
          value
          normalized <- (value - min(playoff_salary$Total)) / (max(playoff_salary$Total) - min(playoff_salary$Total))
          color <- good_color(normalized)
          list(background = color)
        },
        # we'll also add a border to the left of this column
        class = "border-left"
      ),
      # and change the width/alignment of the player column
      player = colDef(
        # Change player to Name
        name = "Name",
        # Widen it so that player names don't get wrapped as much
        minWidth = 140,
        # Align left as it is a wide column
        # this overrides the default above
        align = "left"
      )
    )
  )

tbl
```

# CSS & Fonts

Note that the above table is essentially `done`. It has all the core changes we wanted (conditional color and interactivity). Everything below is `extra`^[Extra can be good! It's just sometimes hard... see [RMarkdown Book](https://bookdown.org/yihui/rmarkdown/language-engines.html#javascript-and-css) for more] stuff that I am also adapting from Greg's example with the Women's World Cup table.

## Build structure

By building up our plot inside div containers and assiging a class we can use CSS to further style or add to our table. The main things I'm interested in is changing the base font to one I love (`Fira Mono`)! However, Greg included some niceties for some additional table formatting that I copied over as well.

My mental model of `div` building is that it's like nesting dolls. Main div which is the whole table, header and footer, and then additional nested `div` for other classes that we can call against.
:::{.column-page}

```{r build div, eval = TRUE}
div(
  # this class can be called with CSS now via .salary
  class = "salary",
  div(
    # this can be called with CSS now via .title
    class = "title",
    h2("2014-2019 Salary and Playoff Appearances"),
    # This is kind of like a sub-title, but really it's just raw text
    "QBs limited to playoff games where they threw a pass"
  ),
  # The actual table
  tbl,
  # I use a span here so I can assigna  color to this text
  tags$span(style = "color:#C8C8C8", "TABLE: @THOMAS_MOCK | DATA: PRO-FOOTBALL-REFERENCE.COM & OVERTHECAP.COM")
)
```

:::

### Import Google Font

I want to use a Google font (Karla + Fira Mono).

You can see all the [Google Fonts here](https://fonts.google.com/). At [fonts.google.com](https://fonts.google.com) you'll:  
- Search for specific fonts  
- Select the Style you want (+ button)  
- [Open the sidebar](https://fonts.google.com/specimen/Karla?selection.family=Fira+Mono:wght@500|Karla:ital@1&query=karla&sidebar.open) to extract the API call for embedding  

Example image below

![Steps to select, get and copy embed for Google Fonts](ss_gfonts.png)

You then paste the text inside the `<link >` into a `tags$link()` call from `htmltools` package. 

For example: 

```
<link href="https://fonts.googleapis.com/css?family=Karla:400,700|Fira+Mono&display=fallback" rel="stylesheet">
```

turns into the below:

```{r gfonts in}
tags$link(href = "https://fonts.googleapis.com/css?family=Karla:400,700|Fira+Mono&display=fallback", rel = "stylesheet")
```

## Add CSS

This is a CSS chunk and the CSS is applied to objects matching their name, ie `.salary` matches the `div` we built earlier, `.number` applies to all `class = number` from our table, `.title` applies to the `class = title` in our table.

Note that if I work locally not all of this will show up, but once the complete RMarkdown is knit together it will work.

```{css}
.salary {
  font-family: Karla, "Helvetica Neue", Helvetica, Arial, sans-serif;
  font-size: 14px;
}

.number {
  font-family: "Fira Mono", Consolas, Monaco, monospace;
  font-size: 16px;
  line-height: 30px;
  white-space: pre;
}

.title {
  margin: 18px 0;
  font-size: 16px;
}

.title h2 {
  font-size: 20px;
  font-weight: 600;
}

.header:hover,
.header[aria-sort="ascending"],
.header[aria-sort="descending"] {
  background-color: #eee;
}

.salary-table {
  margin-bottom: 20px;
}

/* Align header text to the bottom */
.header,
.group-header {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
}

.header {
  border-bottom-color: #555;
  font-size: 13px;
  font-weight: 400;
  text-transform: uppercase;
}

/* Highlight headers when sorting */
.header:hover,
.header[aria-sort="ascending"],
.header[aria-sort="descending"] {
  background-color: #eee;
}

.border-left {
  border-left: 2px solid #555;
}

/* Use box-shadow to create row borders that appear behind vertical borders */
.cell {
  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.15);
}
```

# Full Code

Below is the raw code to generate the table altogether now. This is all adapted from the [`reactable` cookbook](https://glin.github.io/reactable/articles/womens-world-cup/womens-world-cup.html).

The CSS and HTML helpers do some light-lifting for custom text and borders.

```{r code print, eval = FALSE}
make_color_pal <- function(colors, bias = 1) {
  get_color <- colorRamp(colors, bias = bias)
  function(x) rgb(get_color(x), maxColorValue = 255)
}

good_color <- make_color_pal(c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"), bias = 2)

tbl <- playoff_salary %>%
  arrange(desc(salary)) %>%
  mutate(
    `Salary Rank` = rank(desc(salary)),
    salary = round(salary, 1)
  ) %>%
  select(`Salary Rank`, player:Superbowl, everything()) %>%
  reactable(
    pagination = FALSE,
    compact = TRUE,
    borderless = FALSE,
    striped = FALSE,
    fullWidth = FALSE,
    theme = reactableTheme(
      headerStyle = list(
        "&:hover[aria-sort]" = list(background = "hsl(0, 0%, 96%)"),
        "&[aria-sort='ascending'], &[aria-sort='descending']" = list(background = "hsl(0, 0%, 96%)"),
        borderColor = "#555"
      )
    ),
    defaultColDef = colDef(
      align = "center",
      minWidth = 100
    ),
    columns = list(
      salary = colDef(
        name = "Salary",
        style = function(value) {
          value
          normalized <- (value - min(playoff_salary$salary)) / (max(playoff_salary$salary) - min(playoff_salary$salary))
          color <- good_color(normalized)
          list(background = color)
        },
        cell = JS("function(cellInfo) {
                          return cellInfo.value + 'M'}")
      ),
      Total = colDef(
        style = function(value) {
          value
          normalized <- (value - min(playoff_salary$Total)) / (max(playoff_salary$Total) - min(playoff_salary$Total))
          color <- good_color(normalized)
          list(background = color)
        },
        class = "border-left"
      ),
      player = colDef(
        name = "Name",
        minWidth = 140,
        align = "left"
      )
    )
  )





div(
  class = "salary",
  div(
    class = "title",
    h2("2014-2019 Salary and Playoff Appearances"),
    "QBs limited to playoff games where they threw a pass"
  ),
  tbl,
  tags$span(style = "color:#C8C8C8", "TABLE: @THOMAS_MOCK | DATA: PRO-FOOTBALL-REFERENCE.COM & OVERTHECAP.COM")
)

```

```{r change font fake, eval = FALSE}
tags$link(href = "https://fonts.googleapis.com/css?family=Karla:400,700|Fira+Mono&display=fallback", rel = "stylesheet")
```


```{css fake, eval = FALSE}
.salary {
  font-family: Karla, "Helvetica Neue", Helvetica, Arial, sans-serif;
  font-size: 14px;
}

.number {
  font-family: "Fira Mono", Consolas, Monaco, monospace;
  font-size: 16px;
  line-height: 30px;
  white-space: pre;
}

.title {
  margin: 18px 0;
  font-size: 16px;
}

.title h2 {
  font-size: 20px;
  font-weight: 600;
}


.header:hover,
.header[aria-sort="ascending"],
.header[aria-sort="descending"] {
  background-color: #eee;
}

.salary-table {
  margin-bottom: 20px;
}

/* Align header text to the bottom */
.header,
.group-header {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
}

.header {
  border-bottom-color: #555;
  font-size: 13px;
  font-weight: 400;
  text-transform: uppercase;
}

/* Highlight headers when sorting */
.header:hover,
.header[aria-sort="ascending"],
.header[aria-sort="descending"] {
  background-color: #eee;
}

.border-left {
  border-left: 2px solid #555;
}

/* Use box-shadow to create row borders that appear behind vertical borders */
.cell {
  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.15);
}
```

:::{.callout-tip collapse="true"}
## Expand for Session Info
```{r, echo = FALSE}
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

:::

