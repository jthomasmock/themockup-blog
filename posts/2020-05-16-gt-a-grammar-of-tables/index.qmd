---
title: "gt - a (G)rammar of (T)ables"
description: |
  Not to be confused with a Game of Thrones
author: Thomas Mock
date: 05-18-2020
categories:
  - NFL
  - tidyverse
  - tables
preview: "https://raw.githubusercontent.com/jthomasmock/themockup-blog/master/posts/2020-05-16-gt-a-grammar-of-tables/preview.png"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
```

![Preview of the table to come](preview.png)

[A preview of the table to come!]{.aside}

## `gt` package - a (g)rammar of (t)ables

`gt` is an R package for generating formatted tables from dataframes in R with a Grammar of Tables.

If you want to go deeper than this basic guide, check out the [`gt` site](https://gt.rstudio.com/), which has lots of examples!

Raw data comes from: [Pro Football Reference](https://www.pro-football-reference.com/play-index/pgl_finder.cgi?request=1&match=game&year_min=2014&year_max=2019&season_start=1&season_end=-1&pos%5B%5D=QB&is_starter=E&game_type=P&career_game_num_min=1&career_game_num_max=400&qb_start_num_min=1&qb_start_num_max=400&game_num_min=0&game_num_max=99&week_num_min=0&week_num_max=99&qb_started=Y&c5val=1.0&order_by=pass_td) & [Over the Cap](https://overthecap.com/position/quarterback/)

![Component parts of a `gt` table](https://gt.rstudio.com/reference/figures/gt_parts_of_a_table.svg)

Per the package website, `gt` has the following component parts:

> The parts (roughly from top to bottom) are:
> 
> * the Table Header (optional; with a title and possibly a subtitle)
* the Stub and the Stub Head (optional; contains row labels, optionally within row groups having row group labels and possibly summary labels when a summary is present)
* the Column Labels (contains column labels, optionally under spanner column labels)
* the Table Body (contains columns and rows of cells)
* the Table Footer (optional; possibly with footnotes and source notes)

As you can see it is fleshing out the idea of formatting or adding various parts of the table in a robust way.

<br>

## Read in the Data

I've gone through collecting the data and have put into a non-tidy wide format for Salary Rank, playoff week and appearances, Total appearances, and finally salary from 2014-2019. The raw CSV is available on [GitHub](https://raw.githubusercontent.com/jthomasmock/themockup-blog/master/posts/2020-05-13-reactable-tables-the-rest-of-the-owl/playoff_salary.csv)

```{r load libraries and read data}
library(gt) # for static tables
library(tidyverse) # all the things
library(paletteer) # for all the palettes

playoff_salary <- read_csv("playoff_salary.csv")

glimpse(playoff_salary)
```

## Basics of gt

A very basic `gt` table can be created as so:

```{r basic reactable}
playoff_salary %>%
  head() %>%
  gt()
```

Immediately we have a basic table with minimal formatting. 

The core parts we want to change are:  
- Conditional color formatting for Total Appearances and Salary  
- Change the fonts  
- Add borders

# Conditional Colors

We covered conditional colors in the previous [post](https://themockup.blog/posts/2020-05-13-reactable-tables-the-rest-of-the-owl/) - check it out if you have further questions about building or using palettes.

A MAJOR value add that `gt` provides is rather than having to write our own palette parser it has a built in one via `gt::data_color()`! Just to refresh us on our palette, we're using an adaptation of the `viridis` palette.

```{r scales show_col}
scales::show_col(c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"))
```

For today's example, we'll use one from `paletteer` as well! Notice that printing `paletteer::d()` directly attaches the colors in the console, and to use it as a plain old character vector, we'll need to wrap it in `as.character()` OR pipe it forward like `palette %>% as.character()`.


<aside>
As a reminder, `paletteer` is a meta-package of MOST of the palettes available through packages in R.
</aside>


```{r paletter example}
paletteer::paletteer_d("ggsci::red_material", n = 6) %>%
  as.character() %>%
  scales::show_col()
```

I'd also like to introduce a function to generate colors from the `scales` package. `scales::col_numeric()` can generate continuous color scales based off a vector of colors. Notice that it operates differently than our other color function that is normalized between 0 and 1. This one takes ANY number and should be used with a `vector` of numbers. Notice the behavior with single colors generates the same color every time (nothing to scale against since we used `domain = NULL`).

```{r}
red_color_generator <- scales::col_numeric(c("red", "white"), domain = NULL)

red_color_generator(50) %>% scales::show_col()
```

However, if you pass a vector to this, you get the expected behavior!

```{r}
red_color_generator(seq(10, 60, by = 10)) %>% scales::show_col()
```

Alternatively, you could define `domain` to be part of the range of your values. This is expanded with example code below

```{r}
# Define a specific range color generator
red_color_generator_ranged <- scales::col_numeric(c("red", "white"), domain = c(0, 100))

# define a few points along the range
closer_to_red <- red_color_generator_ranged(25)
between_red_white <- red_color_generator_ranged(50)
closer_to_white <- red_color_generator_ranged(75)

# combine and show colors
c(closer_to_red, between_red_white, closer_to_white) %>% scales::show_col()
```

You could imagine doing something like below for the domain setting. However, again note that we don't really need to define domain for our example here. `gt` will pass the data column through to the `data_color()` function into `scales::col_numeric()` directly as a vector.

```{r domain setting, eval = FALSE}
# Base version
my_domain <- c(min(df$col_of_interest), max(df$col_of_interest))

# OR

# tidyverse version if you wanted to try it that way
my_domain <- c(
  summarize(df, min = min(col_of_interest)) %>% pull(min),
  summarize(df, max = max(col_of_interest)) %>% pull(max)
)

red_color_generator_ranged <- scales::col_numeric(c("red", "white"),
  domain = my_domain
)
```


# Format by value

`gt` has a built in function to color data cells - based on either logical or based on a continuous scale. You can use R functions or additional packages to generate indeterminate length palettes.

The core table is seen below with comments added to highlight some emphasized changes.

```{r show data_color}
playoff_salary %>%
  head() %>%
  gt() %>%
  data_color(
    columns = vars(salary),
    colors = scales::col_numeric(
      # Using a function from paletteer to generate a vector of colors
      # Note that you need to wrap paletteer_d outputs in as.character()
      palette = as.character(paletteer::paletteer_d("ggsci::red_material", n = 5)),
      # Domain is from scales::col_numeric
      # Domain = The possible values that can be mapped
      # We don't HAVE to set a range for this since
      # we're using it inside data_color()
      domain = NULL
    )
  ) %>%
  data_color(
    columns = vars(Total),
    colors = scales::col_numeric(
      # custom defined values - notice that order matters!
      palette = c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"),
      domain = NULL
    )
  )
```

Now, to stick to our previous examples, I won't be using red, but rather using our basic palette.

```{r add scale}
playoff_salary %>%
  head() %>%
  gt() %>%
  data_color(
    columns = vars(salary),
    colors = scales::col_numeric(
      # custom defined values - notice that order matters!
      palette = c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"),
      domain = NULL
    )
  ) %>%
  data_color(
    columns = vars(Total),
    colors = scales::col_numeric(
      # custom defined values - notice that order matters!
      palette = c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"),
      domain = NULL
    )
  )
```

Woo! We now have a color scale ranging for both of our columns of interest, but let's indicate Millions with an M and format it as a currency so that people don't get confused. `gt` has built in functions to do this for us!

## Format Currency

Formatting numbers all together now, with both the color function and `gt::fmt_currency()` to add dollar + M to our cells. Notice that `gt` takes `glue` style string parsing, so you can use the `pattern` argument to add trailing or leading text input as you like.

For example `pattern = "{x} MIL"` would convert 125.1 to $125.1 MIL. We'll use `"{x} M"` to indicate we want to add a space + M to each value in the salary column. We also indicate `decimals = 1` to provide built in rounding!

```{r format M}
playoff_salary %>%
  head() %>%
  gt() %>%
  data_color(
    columns = vars(salary),
    colors = scales::col_numeric(
      palette = c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"),
      domain = NULL
    )
  ) %>%
  data_color(
    columns = vars(Total),
    colors = scales::col_numeric(
      palette = c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"),
      domain = NULL
    )
  ) %>%
  ##########################
  ### This section changed
  ##########################
  fmt_currency(
    # Define the columns to change
    columns = vars(salary),
    # How many decimals to round to
    decimals = 1,
    # glue style pattern match & string conversion
    pattern = "{x} M"
  ) %>%
  # Align the now character column to be right-aligned
  cols_align(
    align = "right",
    columns = vars(salary)
  )
```

## Add Borders

Now we can add our border to the left of the Total column. We'll use `tab_style()` to accomplish this, and `gt` has a `cell_borders()` function to control formatting of:  
- Location & Side  
- Color & Weight  

So we tell `gt` to style the cell borders to black, attach to the left side of the cell, make it "heavier" at 3 pixels (`px(3)`), with the location in the cell body of the Total column. See below for the code that accomplishes this. We do a separate call to add a black border below the column labels.

```{r add borders}

playoff_salary %>%
  head() %>%
  gt() %>%
  data_color(
    columns = vars(salary),
    colors = scales::col_numeric(
      palette = c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"),
      domain = NULL
    )
  ) %>%
  data_color(
    columns = vars(Total),
    colors = scales::col_numeric(
      palette = c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"),
      domain = NULL
    )
  ) %>%
  fmt_currency(
    columns = vars(salary),
    decimals = 1,
    pattern = "{x} M"
  ) %>%
  cols_align(
    align = "right",
    columns = vars(salary)
  ) %>% 
  ##########################
  ### This section changed
  ##########################
  # We use tab_style() to change style of cells
  # cell_borders() provides the formatting
  # locations tells it where
  # add a border to left of the Total column
  tab_style(
    style = list(
      cell_borders(
        sides = "left",
        color = "black",
        weight = px(3)
      )
    ),
    locations = list(
      cells_body(
        columns = vars(Total)
      )
    )
  ) %>%
  # We use tab_style() to change style of cells
  # cell_borders() provides the formatting
  # locations tells it where
  # Add black borders to the bottom of all the column labels
  tab_style(
    style = list(
      cell_borders(
        sides = "bottom",
        color = "black",
        weight = px(3)
      )
    ),
    locations = list(
      cells_column_labels(
        columns = gt::everything()
      )
    )
  )
```

## Add titles

We can now finalize the table by correcting some column labels, adding a source note to honor the data sources, and adding a header w/ title and subtitle.

`gt::cols_label()` allows us to change the title of specific columns ad hoc, similar to `dplyr::rename()`, while `tab_source_note()` adds a source note at the bottom of the table, and `tab_header()` adds an optional title and subtitle. Notice that we can use `md()` to parse markdown syntax within these text strings. I can make things bold with this markdown syntax like:  `md("**text**")`.

Note that at this point, I'm essentially done with the table so I have removed the `head()` call to show the full table. Our `data_color()` formatting expands to match the new colors, and all of our formatting thus far is good to go!

```{r}
complete_table <- playoff_salary %>%
  # REMOVED head() %>%
  gt() %>%
  data_color(
    columns = vars(salary),
    colors = scales::col_numeric(
      palette = c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"),
      domain = NULL
    )
  ) %>%
  data_color(
    columns = vars(Total),
    colors = scales::col_numeric(
      palette = c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"),
      domain = NULL
    )
  ) %>%
  fmt_currency(
    columns = vars(salary),
    decimals = 1,
    pattern = "{x} M"
  ) %>%
  cols_align(
    align = "right",
    columns = vars(salary)
  ) %>% 
  tab_style(
    style = list(
      cell_borders(
        sides = "left",
        color = "black",
        weight = px(3)
      )
    ),
    locations = list(
      cells_body(
        columns = vars(Total)
      )
    )
  ) %>%
  tab_style(
    style = list(
      cell_borders(
        sides = "bottom",
        color = "black",
        weight = px(3)
      )
    ),
    locations = list(
      cells_column_labels(
        columns = gt::everything()
      )
    )
  ) %>%
  ##########################
  ### This section changed
  ##########################
  cols_label(
    player = "Player",
    salary = "Salary"
  ) %>%
  tab_source_note("TABLE: @THOMAS_MOCK | DATA: PRO FOOTBALL REFERENCE & OVER THE CAP") %>%
  tab_header(
    title = md("**2014 - 2019 Salary and Playoff Appearances**"),
    subtitle = "QBS limited to playoff games where they threw a pass"
  )
complete_table
```


# Extra Customization & Fonts

Note that the above table is essentially `done` - it's 90% of the way to a fully custom table. It has all the core changes we wanted (conditional color, titles, and borders). Everything below is `extra`^[Extra can be good! It's just sometimes harder or a lot more code] and you can see that just like customizing a `ggplot` it's straight-forward but there is quite a bit of code to add to get the last 10% towards your truly custom end product.

However, note that since this is a static table - you don't need to use HTML, CSS or JS to do customizations and everything is done in R and mostly through built in to `gt` function calls!

## Import Google Font

I want to use a Google font (Karla + Fira Mono).

You can see all the [Google Fonts here](https://fonts.google.com/). At [fonts.google.com](https://fonts.google.com) you'll:  
- Search for specific fonts  
- Select the Style you want (+ button)  
- [Open the sidebar](https://fonts.google.com/specimen/Karla?selection.family=Fira+Mono:wght@500|Karla:ital@1&query=karla&sidebar.open) to download the fonts locally  
- Import the fonts into your system (varies by Mac, Windows, Linux) -- I use `extrafont` for this, but there are numerous ways, packages like `gfonts` allow you to use Google fonts in RMD or Shiny for example

I'm on a Mac, so I import the fonts to my Font Book ([guide here](https://support.apple.com/guide/font-book/install-and-validate-fonts-fntbk1000/mac)) and then use `extrafont::font_import(pattern = "Karla")` to import them to R and register them for things like `ggplot2` or `gt`. Hopefully in the future the `systemfonts` package will take care of this but for now that's my workflow.

```{r add fonts, eval = FALSE}
# not run (I already have them locally)
extrafont::font_import(pattern = "Karla")
extrafont::font_import(pattern = "Fira Mono")
```


```{r extra fonts}
extra_tab <- complete_table %>%
  # Adjust numeric font
  tab_style(
    style = list(
      cell_text(
        font = "Fira Mono",
        align = "center"
      )
    ),
    locations = list(
      cells_body(columns = vars(Wildcard, Division, Conference, Superbowl, Total, salary))
    )
  ) %>%
  # Style header font
  gt::tab_style(
    style = list(
      cell_text(font = "Karla", weight = "bold")
    ),
    locations = list(
      cells_column_labels(gt::everything())
    )
  ) %>%
  # Adjust font of Player Column
  tab_style(
    style = list(
      cell_text(font = "Karla")
    ),
    location = list(
      cells_body(columns = vars(player))
    )
  ) %>%
  # Adjust title font
  tab_style(
    style = list(
      cell_text(
        font = "Fira Mono",
        align = "left"
      )
    ),
    locations = list(
      cells_title(groups = "title")
    )
  ) %>%
  # Adjust sub-title font
  tab_style(
    style = list(
      cell_text(
        font = "Fira Mono",
        align = "left"
      )
    ),
    locations = list(
      cells_title(groups = "subtitle")
    )
  )

extra_tab

# Save it as png
# gtsave(extra_tab, "extra_tab.png")
```

# TLDR Full Code

If you just want to see the full code, here it is!

```{r full code tldr, eval = FALSE}
library(gt) # for static tables
library(tidyverse) # all the things
library(paletteer) # for all the palettes

playoff_salary <- read_csv("https://raw.githubusercontent.com/jthomasmock/radix_themockup/master/_posts/2020-05-13-qb-salaries-vs-playoff-appearances/playoff_salary.csv")

playoff_salary %>%
  gt() %>%
  data_color(
    columns = vars(salary),
    colors = scales::col_numeric(
      palette = c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"),
      domain = NULL
    )
  ) %>%
  data_color(
    columns = vars(Total),
    colors = scales::col_numeric(
      palette = c("#ffffff", "#f2fbd2", "#c9ecb4", "#93d3ab", "#35b0ab"),
      domain = NULL
    )
  ) %>%
  fmt_currency(
    columns = vars(salary),
    decimals = 1,
    pattern = "{x} M"
  ) %>%
  cols_align(
    align = "right",
    columns = vars(salary)
  ) %>% 
  tab_style(
    style = list(
      cell_borders(
        sides = "left",
        color = "black",
        weight = px(3)
      )
    ),
    locations = list(
      cells_body(
        columns = vars(Total)
      )
    )
  ) %>%
  tab_style(
    style = list(
      cell_borders(
        sides = "bottom",
        color = "black",
        weight = px(3)
      )
    ),
    locations = list(
      cells_column_labels(
        columns = gt::everything()
      )
    )
  ) %>%
  cols_label(
    player = "Player",
    salary = "Salary"
  ) %>%
  tab_source_note("TABLE: @THOMAS_MOCK | DATA: PRO FOOTBALL REFERENCE & OVER THE CAP") %>%
  tab_header(
    title = md("**2014 - 2019 Salary and Playoff Appearances**"),
    subtitle = "QBS limited to playoff games where they threw a pass"
  ) %>%
  # Adjust numeric font
  tab_style(
    style = list(
      cell_text(
        font = "Fira Mono",
        align = "center"
      )
    ),
    locations = list(
      cells_body(columns = vars(Wildcard, Division, Conference, Superbowl, Total, salary))
    )
  ) %>%
  # Style header font
  gt::tab_style(
    style = list(
      cell_text(font = "Karla", weight = "bold")
    ),
    locations = list(
      cells_column_labels(gt::everything())
    )
  ) %>%
  # Adjust font of Player Column
  tab_style(
    style = list(
      cell_text(font = "Karla")
    ),
    location = list(
      cells_body(columns = vars(player))
    )
  ) %>%
  # Adjust title font
  tab_style(
    style = list(
      cell_text(
        font = "Fira Mono",
        align = "left"
      )
    ),
    locations = list(
      cells_title(groups = "title")
    )
  ) %>%
  # Adjust sub-title font
  tab_style(
    style = list(
      cell_text(
        font = "Fira Mono",
        align = "left"
      )
    ),
    locations = list(
      cells_title(groups = "subtitle")
    )
  )
```

:::{.callout-tip collapse="true"}
## Expand for Session Info
```{r, echo = FALSE}
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

:::

