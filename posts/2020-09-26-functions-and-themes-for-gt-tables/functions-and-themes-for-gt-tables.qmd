---
title: "Functions and Themes for gt tables"
description: |
  Save time and effort in making beautiful tables
author: Thomas Mock
date: 09-28-2020
categories:
  - tables
  - tidyverse
  - gt
  - NFL
image: pff-themed-gt.png
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(espnscrapeR)
library(gt)

team_df <- espnscrapeR::get_nfl_teams() %>% select(team = team_abb, logo)
```

```{r gt_theme_pff, echo = FALSE}
gt_theme_pff <- function(data, ...) {
  data %>%
    # Add team logos w/ web_image
    text_transform(
      locations = cells_body(
        vars(logo)
      ),
      fn = function(x) {
        web_image(
          url = x,
          height = 25
        )
      }
    ) %>%
    # add spanner for PFF Grade
    tab_spanner(
      label = "PFF GRADE",
      columns = vars(def, rdef, prush, cov)
    ) %>%
    # add spanner for SNAPS
    tab_spanner(
      label = "SNAPS",
      columns = contains("snaps")
    ) %>%
    # Add a "blank" spanner to add white space
    tab_spanner(
      label = "BLANK",
      columns = 1:5
    ) %>%
    # Relabel columns
    cols_label(
      def_snaps = "DEF",
      rdef_snaps = "RDEF",
      prush_snaps = "PRUSH",
      cov_snaps = "COV",
      number = "#",
      logo = ""
    ) %>%
    # if missing, replace NA w/ ---
    fmt_missing(
      columns = everything(),
      missing_text = "---"
    ) %>%
    # add exact color from PFF table to spanners
    tab_style(
      style = list(
        cell_fill(color = "#e4e8ed"),
        cell_text(color = "#878e94"),
        cell_borders(sides = "left", color = "white", weight = px(3))
      ),
      locations = list(
        cells_column_spanners(
          spanners = c("PFF GRADE", "SNAPS")
        )
      )
    ) %>%
    # hide spanner with transparent color
    tab_style(
      style = list(
        cell_fill(color = "transparent"),
        cell_text(color = "transparent")
      ),
      locations = list(
        cells_column_spanners(
          spanners = c("BLANK")
        )
      )
    ) %>%
    # Change font color and weight for numeric col
    tab_style(
      style = list(
        cell_text(color = "#3a3d42", weight = "bold")
      ),
      locations = cells_body(
        columns = 5:9
      )
    ) %>%
    # Add pound sign in front of numbers
    text_transform(
      locations = cells_body(
        columns = vars(number)
      ),
      fn = function(x) {
        paste0("#", x)
      }
    ) %>%
    # Make column labels and spanners all caps
    opt_all_caps() %>%
    # add row striping
    opt_row_striping() %>%
    # change overall table styling for borders and striping
    tab_options(
      column_labels.background.color = "#585d63",
      table_body.hlines.color = "transparent",
      table.border.top.width = px(3),
      table.border.top.color = "transparent",
      table.border.bottom.color = "transparent",
      table.border.bottom.width = px(3),
      column_labels.border.top.width = px(3),
      column_labels.border.top.color = "transparent",
      column_labels.border.bottom.width = px(3),
      column_labels.border.bottom.color = "transparent",
      row.striping.background_color = "#f9f9fb",
      data_row.padding = px(3),
      ...
    ) %>%
    cols_width(
      1 ~ px(75),
      2 ~ px(125),
      3 ~ px(30),
      4 ~ px(40),
      everything() ~ px(60)
    ) %>% 
    # change color of border separating the text from the sourcenote
    tab_style(
      style = cell_borders(
        sides = "bottom", color = "#585d63", weight = px(2)
      ),
      locations = cells_body(
        columns = TRUE,
        rows = nrow(data$`_data`)
      )
    ) %>%
    # change font to Lato throughout (note no need to have Lato locally!)
    opt_table_font(
      font = c(
        google_font(name = "Lato"),
        default_fonts()
      )
    ) %>%
    # add source note
    tab_source_note(
      source_note = md("**Data:** _FAKE DATA_ Pro Football Focus<br>**Table:** @thomas_mock")
    )
}

```

## `gt` tables

I'm continuing my series on `gt` tables with an exploration of `gt` functions and themes. Technically, they could be treated as the same thing but slightly different use cases.

For a function - I would think of the `gt` table as the final output, whereas a theme is applied to an existing `gt` table.

```{r, eval = FALSE}
library(tidyverse)
library(gt)
library(espnscrapeR)
```

If you've never written a function, I'd recommend reading the [functions chapter](https://r4ds.had.co.nz/functions.html) from the R4DS book.

For an example, here's a quick function with `gt`:

```{r mtcars_function}
mtcars_table <- function(cyl_match = 6){
  mtcars %>% 
    filter(cyl == cyl_match) %>% 
    head() %>% 
    gt() %>% 
    tab_header(
      title = glue::glue("Table for cars with {cyl_match} cylinders")
    )
}

mtcars_table(4)
```

In this case, we're just using the table to generate our output of interest. Now something cool about `gt` since it's pipe-oriented, is that you can continue working with the table. So let's make some changes from our `gt` function.

```{r mtcars_extended}
mtcars_table(6) %>% 
  opt_all_caps() %>% 
  opt_align_table_header("left")
```

So our function can generate a `gt` table, and we can then apply any other changes we need to the existing table.

Since this is a toy example, it's not very exciting, so let's continue on!

### Better Example

Let's grab a quick example from my [`espnscrapeR` package](https://jthomasmock.github.io/espnscrapeR/reference/get_nfl_qbr.html). Each week, QBs are given a QBR (Quarterback Rating) score from ESPN.

```{r}
library(espnscrapeR)

get_nfl_qbr(season = 2020, week = 1)
```

Let's use a function to generate a relatively clean table quickly. Our goal here is to take the process of collecting and cleaning data then generating a `gt` table into a simple function for the year + week of interest.

::: {.panel-tabset}

## Table

```{r qbr_table_ex, eval = FALSE}
qbr_table(2020, 1)
```

```{r qbr_table_ex_out, echo = FALSE}
qbr_table <- function(season_in, week_in){
  raw_df <- get_nfl_qbr(season = season_in, week = week_in)
  
  raw_df %>% 
    slice(1:10) %>% 
    select(
      rk = rank, team, name = name_short, qbr = qbr_total, 
      plays = qb_plays, pass, run, sack
      ) %>% 
    gt() %>% 
    opt_all_caps() %>% 
    tab_options(
      table.width = px(600),
      heading.title.font.weight = "bold",
      heading.align = "left"
    ) %>% 
    tab_header(
      title = glue::glue("Top 10 QBs for week {week_in} of {season_in}")
    )
}

qbr_table(2020, 1)
```

## 2020 Week 3

```{r}
qbr_table(2020, 3)
```

## Code

```{r qbr_table_ex_out, eval = FALSE, echo = TRUE}
```

:::

Boom! Ready to share an update on the top 10 QBs by QBR for week 1, or week 2 or week 3, or week 16 from 2015, or ANY other week/season combo! Putting this all into a function lets us simply focus on which data to input and generate a nice table.

Note you could still do a lot to this table to get it publication ready or specific to your "brand", which gets us into the next part - themes!

## `gt` Themes

We're going to explore 3 different formats for elegant tables with examples from ESPN, ProFootball Focus, and FiveThirtyEight. Of the three, I personally think that FiveThirtyEight has some of the best minimalist tables on the web right now, but for the sake of different tastes we'll go through each!

Before diving *right* into the themes - I'd first like to show a quick example of a theme and walk through the code. Hopefully this gives you enough to make your own themes down the line!

You can think of `gt` themes in a similar fashion to `ggplot2` themes. Just as `theme_bw()` just changes the appearance (eg theme) of the plot, a custom-defined `gt` theme will affect the overall appearance of a `gt` table (although as a function you could make it do even more!).

```{r}
mtcars %>% 
  ggplot(aes(x = disp, y = mpg)) +
  geom_point() +
  # Here is a built in theme for ggplot2
  theme_bw()
```

### Basic Theme

The core idea of a theme is that it's a function that passes `data` and `...`, where the `data` is actually a `gt` object, and the `...` are a placeholder for user-defined expressions. The `...` can also be called "dot-dot-dot", "the dots" or "ellipsis", and you can read more about them in the [Tidy evaluation book](https://tidyeval.tidyverse.org/multiple.html#the-...-argument). A quick quote about them from that book chapter:

> The dot-dot-dot argument is one of the nicest aspects of the R language. A function that takes `...` accepts any number of arguments, named or unnamed.

What this really means is that we are leaving any argument on the table for `tab_options()` which has the widest range of possible arguments in `gt` (\> 100 possible arguments). You can see all the possible options in the [`gt` reference](https://gt.rstudio.com/reference/tab_options.html).

Our basic example passes data as the first argument into `tab_options()` and leaves a `...` inside `tab_options()`.

```{r}
basic_theme <- function(data, ...){
  data %>% 
    tab_options(
      table.background.color = "purple",
      ...
    )
}
```

If we use this theme, it will just change the table background color.

```{r}
mtcars %>% 
  head() %>% 
  gt() %>% 
  basic_theme()
```

However, since we left the `...` inside our theme, we can pass additional arguments into the `basic_theme()`. Let's change the column label background to red.

```{r}
mtcars %>% 
  head() %>% 
  gt() %>% 
  basic_theme(
    column_labels.background.color = "red"
  )
```

As a final note, you can keep piping the results into further `gt` arguments!

```{r}
mtcars %>% 
  head() %>% 
  gt() %>% 
  basic_theme(
    column_labels.background.color = "red",
    table.font.size = px(12),
    column_labels.font.size = px(20),
    row.striping.background_color = "#9678b6",
    heading.align = "left",
    heading.title.font.size = px(30)
  ) %>% 
  opt_row_striping() %>% 
  tab_header(title = "Important table with theme")
```

NOTE: While I've passed multiple arguments to our theme function as a show of possibility, the goal here is to push as much as the default theme elements you want to change into our theme function ahead of time to save repetitive typing!

Enough of fun but toy examples - let's dive into the *real* themes!

------------------------------------------------------------------------

### ESPN

Our ESPN table is again using the original [QBR data](https://www.espn.com/nfl/qbr), and they are clean and simple. All caps on the column labels, row striping, but also add the player's team as smaller gray text after the player's name. Note that they also use hyperlinks to the player page (I'll just focus on showing an example of blue text). Lastly, ESPN also uses interactive tables so there is a highlighted column for sorting. I'll cover `reactable` themes on a later date so for now we'll focus on static HTML with `gt`.

```{r espn-theme-code, echo = FALSE}
gt_theme_espn <- function(data, ...){
  data %>% 
    opt_all_caps()  %>%
    opt_table_font(
      font = list(
        google_font("Lato"),
        default_fonts()
      )
    )  %>% 
    opt_row_striping() %>% 
    tab_options(
      row.striping.background_color = "#fafafa",
      table_body.hlines.color = "#f6f7f7",
      source_notes.font.size = 12,
      table.font.size = 16,
      table.width = px(700),
      heading.align = "left",
      heading.title.font.size = 24,
      table.border.top.color = "transparent",
      table.border.top.width = px(3),
      data_row.padding = px(7),
      ...
    ) 
}
```

::: {.panel-tabset}
## ESPN Table

```{r espn-tab, echo = FALSE}
knitr::include_graphics("espn-themed-gt.png")
```

## Original

```{r espn-img, echo = FALSE, out.width="100%"}
knitr::include_graphics("espn-tab.png")
```

## Table Code

```{r espn-tab-code, echo = TRUE, eval = FALSE}
espn_qbr <- espnscrapeR::get_nfl_qbr(2020) %>% 
  select(
    rk = rank, team, name, qbr = qbr_total, paa = points_added, plays = qb_plays,
    epa = total_epa, pass, run, sack, pen = penalty, raw = raw_qbr
    )

espn_qbr %>% 
  mutate(name = paste0(
    "<span style='font-size:16px; color:royalblue;'>",
    name,
    "</span>",
    " <span style='font-size:12px; color:grey;'>",
    word(team, start = -1), "</span>"),
    name = map(name, ~gt::html(as.character(.x)))
  ) %>%
  select(-team) %>% 
  slice(1:15) %>% 
  gt() %>% 
  tab_header(title = md("**NFL Total QBR - 2020 Season Leaders**")) %>% 
  gt_theme_espn() %>% 
  cols_align("left", columns = vars(name)) %>% 
  tab_source_note(md("**Data:** ESPN<br>**Table:** @thomas_mock"))
```

## Theme Code

```{r espn-theme-code, eval = FALSE}
```

:::

------------------------------------------------------------------------

### PFF

The data for this example is **FAKE** example data for some edge defenders. Quick example `gt` of this data below.

::: {.panel-tabset}

## Table

```{r fake-data-code, echo=FALSE}

# Get the team logos
team_df <- espnscrapeR::get_nfl_teams() %>% 
  select(team = team_abb, logo)

n_play <- 15

# set seed for reproducibility
set.seed(2020)

# generate fake data
fake_df <- tibble(
  rank = c(1:n_play),
  name = paste0("F.Name ", 1:n_play),
  team = c(
    "PIT", "KC", "CLE", "HOU", "BAL", "JAX", "LV", "NO", 
    "LAR", "DET", "MIN", "NYJ", "DAL", "CAR", "DEN"),
  number = sample(50:99, size = n_play),
  def = runif(n_play, min = 50.0, 94.0),
  rdef = runif(n_play, min = 50.0, 94.0),
  prush = runif(n_play, min = 50.0, 94.0),
  cov = runif(n_play, min = 50.0, 94.0),
  def_snaps = sample(85:130, size = n_play),
  rdef_snaps = sample(12:40, size = n_play),
  prush_snaps = NA,
  cov_snaps = sample(0:10, size = n_play, replace = TRUE)
  ) %>% 
  mutate(
    prush_snaps = def_snaps - rdef_snaps - cov_snaps
  ) %>%
  left_join(team_df) %>%
  select(rank:name, logo, everything()) %>% 
  arrange(desc(def)) %>% 
  mutate(rank = row_number())

fake_df %>% 
  select(1:8, -logo) %>% 
  head() %>% 
  gt() %>%
  fmt_number(
    columns = 5:7,
    decimals = 1
  )

```

## Code

```{r fake-data-code, echo = TRUE, eval = FALSE, column="column-page-inset"}
```

Now, that's an ok table, but we can do a lot better with a theme, especially one to relatively match the theme PFF uses! Example from their [Position Grade data](https://www.pff.com/nfl/grades/position/ed).

There's a few things of interest we want to do to:\
- Row striping without horizontal lines\
- Dark gray column labels background (but light gray for spanners) and all caps labels\
- Team logos\
- Bold text for PFF grade, but normal weights for snap counts
:::

::: {.panel-tabset}

## [PFF-themed Table

```{r pff_themed, echo = FALSE, column="column-page-inset"}
# Table
pff_tab <- fake_df %>% 
  gt() %>% 
  fmt_number(
    columns = 6:9,
    decimals = 1
    ) %>% 
  gt_theme_pff()

# gtsave(pff_tab, "pff_themed_gt.png")
knitr::include_graphics("pff-themed-gt.png")
```

## PFF Example

```{r pff_img_load, echo = FALSE, EVAL = TRUE, column="column-page-inset"}
knitr::include_graphics("pff-example.png")
```

## Table Code

```{r, eval = FALSE}
fake_df %>% 
  gt() %>% 
  fmt_number(
    columns = 6:9,
    decimals = 1
    ) %>% 
  gt_theme_pff()
```

## Theme Code

```{r gt_theme_pff, echo = TRUE, eval = FALSE, column="column-page-inset"}
```
:::

While this theme is great, it's very tailored to this specific data, so it's closer to a function to generate PFF defensive grade tables. This is fine, as it would greatly speed up the ability to generate these for sharing somewhere, but it's not a very `generic` function that could be used for novel data structures. This is mainly as we are doing some sneaky things to get the grey boxes around `PFF GRADE` and `SNAPS` that involve transparent backgrounds at specific locations. You could adapt big chunks of this code to use elsewhere though, and note that it would still work for CBs, LBs, Edge, DL, and Safeties. That's pretty useful!

------------------------------------------------------------------------

### FiveThirtyEight

Now, since FiveThirtyEight tables are more minimal, the theme we'll use for those tables can be essentially be extended to almost any table! The original data and table come from a [FiveThirtyEight article](https://fivethirtyeight.com/features/sorry-running-backs-even-your-receiving-value-can-be-easily-replaced/) from 2018.

::: {.panel-tabset}

## FiveThirtyEight Table

```{r gt-theme-538, echo = FALSE}
gt_theme_538 <- function(data,...) {
  data %>%
  opt_all_caps()  %>%
  opt_table_font(
    font = list(
      google_font("Chivo"),
      default_fonts()
    )
  ) %>%
    tab_style(
      style = cell_borders(
        sides = "bottom", color = "transparent", weight = px(2)
      ),
      locations = cells_body(
        columns = TRUE,
        # This is a relatively sneaky way of changing the bottom border
        # Regardless of data size
        rows = nrow(data$`_data`)
      )
    )  %>% 
  tab_options(
    column_labels.background.color = "white",
    table.border.top.width = px(3),
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    table.border.bottom.width = px(3),
    column_labels.border.top.width = px(3),
    column_labels.border.top.color = "transparent",
    column_labels.border.bottom.width = px(3),
    column_labels.border.bottom.color = "black",
    data_row.padding = px(3),
    source_notes.font.size = 12,
    table.font.size = 16,
    heading.align = "left",
    ...
  ) 
}
```

```{r gt_538_table, echo = FALSE}
knitr::include_graphics("538-themed-gt.png")
```

## Original

```{r, echo = FALSE, out.width="75%"}
knitr::include_graphics("538-table.png")
```

## Table Code

```{r 538_table_scrape, echo = TRUE, eval = FALSE}
library(rvest)

url <- "https://fivethirtyeight.com/features/sorry-running-backs-even-your-receiving-value-can-be-easily-replaced/"

rb_receiving <- url %>% 
  xml2::read_html() %>% 
  rvest::html_table() %>% 
  purrr::chuck(1) %>% 
  purrr::set_names(nm = c("team", "attempts", "successful", "success_rate")) %>% 
  dplyr::as_tibble() %>% 
  filter(team != "team") %>% 
  mutate(success_rate = stringr::str_remove(success_rate, "%")) %>% 
  mutate(across(c(attempts:success_rate), as.double))
```

```{r, eval = FALSE}
tab_538 <- rb_receiving %>%
  gt() %>%
  tab_spanner(
    label = "PASSES TO RBS",
    columns = vars(attempts, successful)
  ) %>% 
  data_color(
    columns = vars(success_rate),
    colors = scales::col_numeric(
      palette = c("white", "#3fc1c9"),
      domain = NULL
    )
  ) %>% 
  cols_label(
    success_rate = "SUCCESS RATE (%)"
  ) %>% 
  tab_source_note(
    source_note = md("SOURCE: ESPN STATS & INFORMATION GROUP<br>TABLE: @THOMAS_MOCK")
  ) %>% 
  gt_theme_538(table.width = px(550))
```

## Theme Code

Here's the theme code for the FiveThirtyEight theme.

```{r gt-theme-538, eval = FALSE, echo = TRUE}
```

:::

Now, since that data is public via `nflfastR`, we could try and recreate that table for 2018 or 2019 (or really any year between 1999 and 2020). There's a small amount of difference between what FiveThirtyEight reported and what we calculated with `nflfastR` data, but perhaps they excluded some other plays (or excluded FBs). Feel free to dive in a bit deeper if you're interested in recreating (all the code is included below).

::: {.panel-tabset}

## 2018 Table

```{r 2018-pass, echo = FALSE, out.width="500px"}
knitr::include_graphics("rb-pass-2018.png")
```

## 2019 Table

```{r 2019-pass, echo = FALSE, out.width="500px"}
knitr::include_graphics("rb-pass-2019.png")
```

## Table Code

```{r gt-other-years, eval = FALSE}
# 2018 recreation
season_stats %>% 
  filter(season == 2018) %>% 
  select(-season) %>% 
  gt() %>%
  tab_spanner(
    label = "PASSES TO RBS",
    columns = vars(Attempts, Successful)
  ) %>% 
  tab_header(
    title = md("**The Chiefs got the most out of the running back pass**"),
    subtitle = md("NFL teams by success rate of passes to running backs, as measured by positive<br>expected points added, for the 2018 regular season")
    ) %>% 
  data_color(
    columns = vars(success_rate),
    colors = scales::col_numeric(
      palette = c("white", "#3fc1c9"),
      domain = NULL
    )
  ) %>% 
  cols_label(
    success_rate = "SUCCESS RATE (%)"
  ) %>% 
  tab_source_note(
    source_note = md("SOURCE: NFLFASTR<br>TABLE: @THOMAS_MOCK")
  ) %>% 
  gt_theme_538(table.width = px(550))

# 2019 table
season_stats %>% 
  filter(season == 2019) %>% 
  select(-season) %>% 
  gt() %>%
  tab_header(
    title = md("**The Panthers got the most out of the running back pass**"),
    subtitle = md("NFL teams by success rate of passes to running backs, as measured by positive<br>expected points added, for the 2019 regular season")
    ) %>% 
  tab_spanner(
    label = "PASSES TO RBS",
    columns = vars(Attempts, Successful)
  ) %>% 
  data_color(
    columns = vars(success_rate),
    colors = scales::col_numeric(
      palette = c("white", "#3fc1c9"),
      domain = NULL
    )
  ) %>% 
  cols_label(
    success_rate = "SUCCESS RATE (%)"
  ) %>% 
  tab_source_note(
    source_note = md("SOURCE: NFLFASTR<br>TABLE: @THOMAS_MOCK")
  ) %>% 
  gt_theme_538(table.width = px(550))
```

## Data Code

```{r nflfastR-code-rbs, eval = FALSE}
rosters <- read_csv("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/roster-data/roster.csv") %>%
  filter(teamPlayers.position %in% c("QB", "WR", "RB", "FB", "TE"), team.season %in% c(2018, 2019)) %>% 
  select(
    position = teamPlayers.position, receiver_jersey_number = teamPlayers.jerseyNumber, 
    posteam = team.abbr, season = team.season
    )

seasons <- 2018:2019

pbp <- purrr::map_df(seasons, function(x) {
  readr::read_csv(
    glue::glue("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_{x}.csv.gz")
  )
})

data_clean <- pbp %>%
  filter(pass == 1 & sack == 0 & qb_scramble == 0, !is.na(receiver_jersey_number)) %>%
  filter(week <= 17) %>% 
  select(
    season, name, pass, desc, posteam, epa, defteam, complete_pass, incomplete_pass,
    air_yards, receiver_player_name, receiver_jersey_number, down, success, complete_pass
  ) %>%
  left_join(rosters, by = c("receiver_jersey_number", "posteam", "season")) %>% 
  filter(!is.na(position)) %>% 
  mutate(position = if_else(position == "FB", "RB", position))

pos <- data_clean %>%
  filter(position == "RB")

season_stats <- pos %>% 
  filter(!is.na(success)) %>% 
  select(posteam, success, season) %>% 
  group_by(season) %>% 
  add_count(posteam) %>% 
  count(posteam, success) %>% 
  mutate(success = if_else(success == 0, "Attempts", "Successful")) %>% 
  pivot_wider(names_from = success, values_from = n) %>% 
  mutate(
    Attempts = Successful + Attempts,
    success_rate = Successful/Attempts,
    success_rate = round(success_rate, digits = 3) * 100
    ) %>% 
  arrange(desc(success_rate)) %>% 
  ungroup()
```

:::

Last example - remember that our ESPN or FiveThirtyEight themes can be applied to novel data structures, while the PFF theme made additional changes for `gt` that were specific to at least the same columns we expect.

```{r 538-new, eval = FALSE}
mtcars %>% 
  slice(1:10) %>% 
  gt() %>% 
  gt_theme_538() %>% 
  tab_header(title = md("**FiveThirtyEight Style**"))
```

```{r 538-img, echo = FALSE, out.width="500px"}
knitr::include_graphics("538-style.png")
```

```{r espn-new, eval = FALSE}
mtcars %>% 
  slice(1:10) %>% 
  gt() %>% 
  gt_theme_espn() %>% 
  tab_header(title = md("**ESPN Style**"))
```

```{r espn-img-new, echo = FALSE, out.width="700px"}
knitr::include_graphics("espn-style.png")
```


:::{.callout-tip collapse="true"}
## Expand for Session Info
```{r, echo = FALSE}
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

:::
