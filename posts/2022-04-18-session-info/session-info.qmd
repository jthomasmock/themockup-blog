---
title: "Adding session info to blog posts"
description: |
  A snapshot of your code state
author: Thomas Mock
date: 04-18-2022
categories:
  - meta
  - quarto
image: preview.png
image-alt: "A polaroid camera sitting lens up in a pile of fallen brown leaves"
---

## Adding session info

Session info in R has lots of useful information on the state of your working environment at the moment you were coding. While tools such as [`renv`](https://rstudio.github.io/renv/articles/renv.html) or `packrat` can help you create project-specific libraries, `sessionInfo()` at least lets you capture the basic environment details. [Put another way, `{renv}` can be useful for someone (including yourself) to revert back to the specific package environment, whereas the session info simply _returns_ the basic environment info. For a blogpost, I don't imagine others trying to match to exact package environments, but rather confirm that their package environment is "similar enough".]{.aside}

We can create and capture the session details like so:

```{r}
base_sesh <- sessionInfo()

base_sesh
```

Since `sessionInfo()` generates a list, we can explore it like a list or even inject new objects into it.

```{r}
base_sesh |> 
  str(max.level = 1)
```

For example, I can inject my current version of the `quarto` CLI into the session info.

```{r}
base_sesh$quarto <- system("quarto -V", intern = TRUE)

base_sesh |>
  str(max.level = 1)
```

We've now captured a lot of useful session info and even injected a new item, so that we can remember what version of the Quarto CLI I was using.

## `sessioninfo` package

An alternative to using `utils::sessionInfo()` would be to use the `sessioninfo` package. Per the [package docs](https://r-lib.github.io/sessioninfo/):

> Query and print information about the current R session. It is similar to `utils::sessionInfo()`, but includes more information about packages, and where they were installed from.
>
> ### Differences from `utils::sessionInfo()`
>
> -   Additional platform details: time zone, pandoc version, RStudio version, etc.
> -   Information about package sources, e.g. GitHub repo and hash for packages installed from GitHub.
> -   Highlight package installation problems, e.g. if the loaded and on-disk versions are different, if the MD5 checksum of the package DLL is wrong, etc.
> -   Highlight packages from unusual sources.
> -   Information about external software via `external_info()`.
> -   Information about the Python configuration is the reticulate package is loaded and configured.
> -   Information about package libraries.
> -   Compare two session info outputs with the `session_diff()` function.
> -   Option to show loaded (default), attached or installed packages, or the recursive dependencies of the specified packages.

:::{.callout-note}

Note that I'm really only interested in the session info and which packages were attached (ie via `library(pkgname)`), so I'll use the `pkgs = "attached"` argument. This flexibility is nice!

:::

```{r}
library(sessioninfo)
session_info(pkgs = "attached")
```

Now while information such as this is very useful for attaching to things like a `reprex`, it can also be useful to include for testing purposes or for "posterity" when rendering a document or writing a blogpost.

### Adding to `sessioninfo`

Let's also note one more thing - again I'd like to record the Quarto version, since I'm relying on `quarto` for rendering my blog. We can "inject" the `quarto` version and path to the `sessioninfo` list object. [I did go ahead and submit a [feature request](https://github.com/r-lib/sessioninfo/issues/75) on the `sessioninfo` repo - maybe `quarto` info will be incorporated into `sessioninfo` in the near future!]{.aside}

```{r}
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

That's looking good!

## Include in docs

Now to add it to the end of our document, we can use a quick HTML `<details>` tag. This creates a small expandable section. We can also change the title of with the use of a `<summary>` tag. We can add this to all of our documents/blogposts and capture

````code
<details><summary>Session Info</summary>

```{{r, echo = FALSE}}
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

</details>

````

Which generates something like the below (again note that you need to expand this `<details>` tag by clicking on it):

---

<details><summary>Session Info</summary>

<div style='font-size:12px;'>

```{r, echo=FALSE}
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

</div>

</details>

### Quarto-native callouts

Quarto itself adds the ability to create [boostrap-style callouts](https://quarto.org/docs/authoring/callouts.html) and collapsible callouts, so we can simplify our code a bit:

````code
:::{.callout-tip collapse="true"}
## Expand for Session Info
```{{r, echo = FALSE}}
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

:::

````

Which will return a colored callout like below:

:::{.callout-tip collapse="true"}
## Expand for Session Info
```{r, echo = FALSE}
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

:::
