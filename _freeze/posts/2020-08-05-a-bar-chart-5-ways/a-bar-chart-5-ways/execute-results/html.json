{
  "hash": "db280654f9ccaf9b8f2351d20575a8e1",
  "result": {
    "markdown": "---\ntitle: \"A bar chart 5 ways in ggplot2\"\ndescription: |\n  Andy, Tom, and ggplot2 walk into a bar...\nauthor: Thomas Mock\ndate: 08-01-2020\ncategories:\n  - data visualization\n  - ggplot2\n  - tidyverse\n  - web scraping\nimage: preview.png\n---\n\n\n\n## Credit\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Awesome work Thomas!</p>&mdash; Andy Kirk (@visualisingdata) <a href=\"https://twitter.com/visualisingdata/status/1151498640910888961?ref_src=twsrc%5Etfw\">July 17, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<br>\n\n[Andy Kirk](https://twitter.com/visualisingdata/status/1151443335049023489?s=20) put together [Five Ways to present bar charts](https://www.visualisingdata.com/2019/07/five-ways-to-present-bar-charts/) as part of his `Five ways to...`  series back in 2019. The plots below are *his* original ideas, just recreated in `ggplot2`.\n\nI originally recreated his plots in `ggplot2` and published them as a [gist](https://gist.github.com/jthomasmock/2db9db2c534a48af9e2330758be90b8b) and on [Twitter](https://twitter.com/thomas_mock/status/1151492858215567362?s=20) in July 2019, stumbled upon it again recently, and thought why not capture it as a proper blog-post! \n\nAdditionally, when I originally made these remakes, `ggplot2` required `coord_flip()` whereas the most recent version of `ggplot2` allows you to natively create horizontal bar charts! I've thus changed a little bit of the code from the original gist to reflect the new options in `ggplot2`.\n\nAgain thank you to Andy Kirk for the prompt! Make sure to check out his [blog](https://www.visualisingdata.com/) in general for all sorts of great data viz tips.\n\n## Source Data\n\nThe data comes from [Wikipedia](https://en.wikipedia.org/wiki/List_of_most-streamed_songs_on_Spotify), specifically a list of the most streamed songs on Spotify. We can scrape the table into R w/ `rvest`.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(tidyverse)\n```\n:::\n\nNow that we have the libraries loaded, let's read in the data, pull in the top 100, and add some new columns to use across our charts.\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://en.wikipedia.org/wiki/List_of_most-streamed_songs_on_Spotify\"\n\ndf <- url %>% \n  read_html() %>% \n  html_table(fill = TRUE) %>% \n  .[[1]] %>% \n  select(Rank:`Date published`) %>% \n  set_names(nm = c(\"rank\", \"song_name\", \"streams\", \"artist\", \"date_published\")) %>% \n  slice(1:100) %>% \n  mutate(num_rank = parse_number(rank),\n         streams_comma = streams,\n         streams = parse_number(streams)/1000,\n         streams_text = if_else(\n           num_rank == 1,\n           paste(round(streams, digits = 2), \"billion streams\"),\n           as.character(round(streams, digits = 2))\n           ),\n         lab_text = glue::glue(\"{rank}. {song_name} by {artist}\"),\n  ) %>% \n  as_tibble()\n\ndf %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 100\nColumns: 9\n$ rank           <chr> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"…\n$ song_name      <chr> \"\\\"Shape of  You\\\"\", \"\\\"Blinding Lights\\\"\", \"\\\"Dance Mo…\n$ streams        <dbl> 3.108, 2.915, 2.541, 2.402, 2.326, 2.288, 2.266, 2.262,…\n$ artist         <chr> \"Ed Sheeran\", \"The Weeknd\", \"Tones and I\", \"Post Malone…\n$ date_published <chr> \"28 March 2017\", \"29 November 2019\", \"10 May 2019\", \"15…\n$ num_rank       <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …\n$ streams_comma  <chr> \"3,108\", \"2,915\", \"2,541\", \"2,402\", \"2,326\", \"2,288\", \"…\n$ streams_text   <chr> \"3.11 billion streams\", \"2.92\", \"2.54\", \"2.4\", \"2.33\", …\n$ lab_text       <glue> \"1. \\\"Shape of  You\\\" by Ed Sheeran\", \"2. \\\"Blinding L…\n```\n:::\n:::\n\n:::{.aside}\nNote that there is `\\` in front of the song name and in the lab_text as there we have to escape the `\"` in each of those strings.\n:::\n\nData is ready to go!\n\n\n# Chart 1: Font-height bars\n\n::: {.cell}\n\n```{.r .cell-code}\nfont_height_bars <- df %>% \n    filter(num_rank <=10) %>% \n    ggplot(aes(y = fct_reorder(lab_text, streams), x = streams)) +\n    geom_col(fill = \"#7dc8c4\", width = 0.3) +\n    theme(text = element_text(family = \"Nunito Bold\", face = \"bold\", size = 14),\n          axis.text = element_text(face = \"bold\"),\n          axis.ticks = element_blank(),\n          panel.grid.minor = element_blank(),\n          panel.grid.major.y = element_blank(),\n          panel.grid.major.x = element_line(color = \"lightgrey\")) +\n    labs(x = \"\\nNumber of streams in billions\",\n         y = \"\") +\n    scale_x_continuous(limits = c(0,2.700), expand = c(0, 0),\n                       breaks = scales::breaks_pretty(n = 10)\n                       )\n\nggsave(\"font_height_bars.png\", font_height_bars, dpi = 300,\n       height = 6, width = 14, units = \"in\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (position_stack).\n```\n:::\n:::\n\n::: {.cell .column-screen-inset-shaded}\n::: {.cell-output-display}\n![](font_height_bars.png){width=2100}\n:::\n:::\n\n# Chart 2: Bars with invisible gridlines\n\n::: {.cell}\n\n```{.r .cell-code}\ninvis_gridline <- df %>% \n    filter(num_rank <=10) %>% \n    ggplot(aes(x = streams, y = fct_reorder(lab_text, streams))) +\n    geom_col(fill = \"#3686d3\", width = .9) +\n    geom_vline(data = data.frame(x = seq(0, 2.6, .2)),\n               aes(xintercept = x), color = \"white\", size = 0.5) +\n    theme_minimal() +\n    theme(text = element_text(family = \"Nunito Bold\", face = \"bold\", size = 14),\n          axis.text = element_text(face = \"bold\"),\n          axis.ticks = element_blank(),\n          panel.grid = element_blank()) +\n    labs(x = \"\\nNumber of streams in billions\",\n         y = \"\") +\n    scale_x_continuous(limits = c(0,2.7), expand = c(0, 0),\n                       breaks = scales::breaks_pretty(n = 10))\n\nggsave(\"invis_gridline.png\", invis_gridline, dpi = 300,\n       height = 6, width = 14, units = \"in\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (position_stack).\n```\n:::\n:::\n\n::: {.cell .column-screen-inset-shaded}\n::: {.cell-output-display}\n![](invis_gridline.png){width=2100}\n:::\n:::\n\n\n\n# Chart 3: Direct labels\n\n::: {.cell .column-screen-inset-shaded}\n\n```{.r .cell-code}\ndirect_label <- df %>% \n    filter(num_rank <=10) %>% \n    ggplot(aes(x = streams, y = fct_reorder(lab_text, streams))) +\n    geom_col(fill = \"#303844\", width = .9) +\n    geom_text(aes(y = fct_reorder(lab_text, streams), x = streams, label = streams_text),\n              color = \"white\", hjust = 1, fontface = \"bold\", position = position_nudge(x = -.020)) +\n    theme_minimal() +\n    theme(text = element_text(family = \"Nunito Bold\", face = \"bold\", size = 16),\n          axis.text = element_text(face = \"bold\"),\n          axis.text.x = element_blank(),\n          axis.ticks = element_blank(),\n          panel.grid = element_blank()) +\n    labs(y = \"\",\n         x = \"\") +\n    scale_x_continuous(limits = c(0,2.7), expand = c(0, 0),\n                       breaks = scales::breaks_pretty(n = 10))\n\nggsave(\"direct_label.png\", direct_label, dpi = 300,\n       height = 6, width = 14, units = \"in\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (position_stack).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (geom_text).\n```\n:::\n:::\n\n::: {.cell .column-screen-inset-shaded}\n::: {.cell-output-display}\n![](direct_label.png){width=2100}\n:::\n:::\n\n# Chart 4: Labels above\n\n::: {.cell}\n\n```{.r .cell-code}\nlabel_above <- df %>% \n    filter(num_rank <=10) %>% \n    ggplot(aes(x = streams, y = fct_reorder(lab_text, streams))) +\n    geom_col(fill = \"#c2545b\", width = .2) +\n    geom_text(aes(x = 0, y = fct_reorder(lab_text, streams),  label = lab_text),\n              color = \"black\", hjust = 0, position = position_nudge(y = 0.3),\n              fontface = \"bold\", family = \"Nunito Bold\", size = 4) +\n    geom_text(aes(x = streams, y = fct_reorder(lab_text, streams), label = streams_text),\n              color = \"#cf7a7f\", hjust = 1, position = position_nudge(x = -.02, y = 0.3),\n              fontface = \"bold\", family = \"Nunito Bold\", size = 4) +\n    theme_minimal() +\n    theme(text = element_text(family = \"Nunito Bold\", face = \"bold\", size = 14),\n          axis.text = element_blank(),\n          axis.text.x = element_blank(),\n          axis.ticks = element_blank(),\n          panel.grid = element_blank()) +\n    labs(y = \"\",\n         x = \"\") +\n    scale_x_continuous(limits = c(0,2.7), expand = c(0, 0),\n                       breaks = scales::breaks_pretty(n = 10))\n\nggsave(\"label_above.png\", label_above, dpi = 300,\n       height = 6, width = 14, units = \"in\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (position_stack).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (geom_text).\n```\n:::\n:::\n\n::: {.cell .column-screen-inset-shaded}\n::: {.cell-output-display}\n![](label_above.png){width=2100}\n:::\n:::\n\n# Chart 5: Lollipop\n\n::: {.cell}\n\n```{.r .cell-code}\nlollipop_bar <- df %>% \n    filter(num_rank <=10) %>% \n    ggplot(aes(x = streams, y = fct_reorder(lab_text, streams))) +\n    geom_col(fill = \"grey\", width = .8) +\n    geom_point(shape = 21, fill = \"orange\", color = \"black\", size = 20, stroke = 1) +\n    geom_text(aes(x = streams, y = fct_reorder(lab_text, streams), label = streams),\n              color = \"black\", hjust = 0.5, \n              fontface = \"bold\") +\n    theme_minimal() +\n    theme(text = element_text(family = \"Nunito Bold\", face = \"bold\", size = 14),\n          axis.text = element_text(face = \"bold\"),\n          axis.text.x = element_blank(),\n          axis.ticks = element_blank(),\n          panel.grid = element_blank(),\n          axis.title.x = element_text(hjust = 0)) +\n    labs(y = \"\",\n         x = \"Number of streams in billions\") +\n    scale_x_continuous(limits = c(0,2.7), expand = c(0, 0),\n                       breaks = scales::breaks_pretty(n = 10)) +\n    NULL\n\nggsave(\"lollipop_bar.png\", lollipop_bar, dpi = 300,\n       height = 8, width = 16, units = \"in\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (position_stack).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (geom_text).\n```\n:::\n:::\n\n::: {.cell .column-screen-inset-shaded}\n::: {.cell-output-display}\n![](lollipop_bar.png){width=2400}\n:::\n:::\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.1.1 (2021-08-10)\n os       macOS Monterey 12.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-04-25\n pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n quarto   0.9.294 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n dplyr       * 1.0.8   2022-02-08 [1] CRAN (R 4.1.1)\n forcats     * 0.5.1   2021-01-27 [1] CRAN (R 4.1.1)\n ggplot2     * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)\n purrr       * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)\n readr       * 2.0.2   2021-09-27 [1] CRAN (R 4.1.1)\n rvest       * 1.0.2   2021-10-16 [1] CRAN (R 4.1.1)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.1.1)\n stringr     * 1.4.0   2019-02-10 [1] CRAN (R 4.1.1)\n tibble      * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)\n tidyr       * 1.2.0   2022-02-01 [1] CRAN (R 4.1.1)\n tidyverse   * 1.3.1   2021-04-15 [1] CRAN (R 4.1.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}