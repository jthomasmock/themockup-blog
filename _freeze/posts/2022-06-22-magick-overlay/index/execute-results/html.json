{
  "hash": "b782a23648419a85c2e03f49fa8f5b53",
  "result": {
    "markdown": "---\ntitle: \"Add a semi-transparent overlay to an image with {magick}\"\ndescription: |\n  Because who has time for CSS and gradients?\nauthor: Thomas Mock\ndate: 2022-06-22\ncategories:\n  - magick\nimage: \"/posts/2022-06-22-magick-overlay/preview.jpeg\"\ntwitter-card:\n  image:  \"/posts/2022-06-22-magick-overlay/preview.jpeg\"\n  card-style: summary\n---\n\n\nI often find myself needing to apply a semi-transparent overlay in slides or reports to provide a better backdrop for text on top of a hero/splash image.\n\nYou can apply an overlay with CSS + background-image + gradients, but let's do it natively in R with `{magick}` as that gives us more flexibility outside of a HTML environment.\n\n## Get an image\n\nI'll load `{magick}` and read in an example image of my ~~coworker~~ dog Howard.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magick)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to ImageMagick 6.9.12.3\nEnabled features: cairo, fontconfig, freetype, heic, lcms, pango, raw, rsvg, webp\nDisabled features: fftw, ghostscript, x11\n```\n:::\n\n```{.r .cell-code}\nlibrary(scales)\n\nraw_img <- image_read(\"https://pbs.twimg.com/media/EabpU96WsAIJjG0?format=jpg&name=large\")\nraw_img\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=768}\n:::\n:::\n\n\n## Define overlay function\n\nThe basic idea is to draw a rectangle the exact size of the image OVER the image with some transparency.\n\nThe `create_overlay()` function takes a raw image url/path or `magick-image` and then applies your chosen color to it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_overlay <- function(img, overlay_color = \"#00000060\", out_file = NULL){\n  if(!(\"magick-image\" %in% class(img))){\n    raw_img <- image_read(img)\n  } else if (\"magick-image\" %in% class(img)){\n    raw_img <- img\n  }\n  \n  # get image dimensions\n  img_info <- image_info(raw_img)\n  \n  # draw the raw image\n  img_overlay <- image_draw(raw_img)\n  # draw a rectangle of equal proportion to the raw image\n  rect(0, 0, img_info$width, img_info$height, col = overlay_color)\n  # save the results\n  dev.off()\n  \n  # return it or return + save out\n  if(!is.null(out_file)){\n    image_write(img_overlay)\n    message(paste(\"Image saved as\", out_file))\n    return(img_overlay)\n  } else {\n    return(img_overlay)\n  }\n}\n```\n:::\n\n\nWe can then use the function to apply some colors. Hex codes are typically 6 digits, but you can add transparency by varying the values at the end of string. So `#000000` is black but `#00000050` is black with 50% transparency.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscales::show_col(c(\"#000000\", paste0(\"#000000\", seq(90, 10, length.out = 5))))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nAlternatively, you could use `scales::alpha()` to convert named colors like `\"red\"` to their alpha ranges.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscales::alpha(\"red\", seq(1, 0.1, length.out = 6)) |> \n  scales::show_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Compare the image\n\nNow we can use our function to generate the overlay image but it's rather large... and I'd like to see it side-by-side with the original for easier comparison. We can use `magick::image_append()` + `magick::image_resize()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfaded_img <- create_overlay(raw_img, overlay_color = scales::alpha(\"black\", 0.4))\nimage_info(faded_img)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  format width height colorspace matte filesize density\n1   JPEG  1536   2048       sRGB  TRUE        0   72x72\n```\n:::\n\n```{.r .cell-code}\nimage_append(\n  image_resize(c(raw_img, faded_img), 350)\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=350}\n:::\n:::\n\n\nNow, let's roll that into another function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompare_img <- function(faded_img, img, px = 350){\n  image_append(\n    image_resize(c(img, faded_img), px)\n  )\n}\n\nfaded_compare <- compare_img(faded_img, raw_img)\nfaded_compare\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=350}\n:::\n:::\n\n\nWe can also play around with other colors!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompare_img(create_overlay(raw_img, scales::alpha(\"red\", 0.15)), raw_img)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=350}\n:::\n\n```{.r .cell-code}\ncompare_img(create_overlay(raw_img, scales::alpha(\"yellow\", 0.15)), raw_img)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-2.png){width=350}\n:::\n\n```{.r .cell-code}\ncompare_img(create_overlay(raw_img, scales::alpha(\"blue\", 0.15)), raw_img)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-3.png){width=350}\n:::\n:::\n\n\nLooks great, but we should see how our text looks as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_text  <- function(img, text = \"Hello there!\", font_size = 50, color = \"white\",\n                      loc = c(\"+175+100\", \"+50+305\")){\n  img |> \n  image_annotate(text, size = font_size, color = color,\n                 location = loc[1], gravity = \"center\") |> \n  image_annotate(text, size = font_size, color = color,\n                 location = loc[2])\n}\n\nfaded_compare |> \n  add_text()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=350}\n:::\n:::\n\n\nIn my opinion, it's quite a bit easier to read the text with the faded overlay!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# save it out for use in another article\ncreate_overlay(raw_img, scales::alpha(\"black\", 0.4)) |> \n  image_resize(500) |> \n  image_annotate(\"Goodbye Howard!\", \"center\", size = 60, color = \"white\", \n                 location = \"+0+130\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=250}\n:::\n:::\n\n\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS Monterey 12.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-06-23\n pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n quarto   0.9.600 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n magick      * 2.7.3   2021-08-18 [1] CRAN (R 4.2.0)\n scales      * 1.2.0   2022-04-13 [1] CRAN (R 4.2.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}