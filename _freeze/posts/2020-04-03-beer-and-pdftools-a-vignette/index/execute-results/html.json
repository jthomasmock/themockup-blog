{
  "hash": "88961bcb67e3eb0f805c62b3e1c16c33",
  "result": {
    "markdown": "---\ntitle: \"Beer and pdftools - a vignette\"\ndescription: |\n  A guide to extracting tables from many PDFs using the pdftools package\nauthor: Thomas Mock\ndate: 04-04-2020\nimage: https://raw.githubusercontent.com/jthomasmock/pdftools-guide/master/beer-kegs.jpeg\ncategories:\n  - purrr\n  - pdftools\n  - tidyverse\n---\n\n\n\n\n![](beer-kegs.jpeg)\n\n# Scraping Complex Tables from PDFs with PDF Tools\n\nThe goal of this is to provide a guide to extracting irregularly formatted tables from PDFs.\n\n## Load Libraries\n\nWe'll use ROpenSci's `pdftools` package along with several `tidyverse` packages:\n- `stringr` - text manipulation\n- `dplyr` - general data manipulation\n- `tidyr` - data cleaning\n- `purrr` - repeated application of a function\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ ggplot2 3.3.5     ✔ purrr   0.3.4\n✔ tibble  3.1.6     ✔ dplyr   1.0.8\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(pdftools)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nUsing poppler version 22.04.0\n```\n:::\n:::\n\n# PDFs\n\nThe PDFs for this guide come from [Alcohol and Tobacco Tax and Trade Bureau](https://www.ttb.gov/beer/statistics). We'll use the 2011-2014 data for this example (84 total PDFs). For the purpose of today the files have already been downloaded, but I used the following script.\n\n::: {.cell}\n\n```{.r .cell-code}\n# General function for download\ndownload_monthly_stats_pdf <- function(year){\n  \n  message(paste0(\"Downloading \", year))\n  \n  # The general format is yearmonth like 201101 for Jan 2011.\n  month_in <- c(\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\")\n  \n  year_vec <- rep(year, 12)\n  \n  url_build <- function(year_vec, month_in){\n      glue::glue(\"https://www.ttb.gov/images/pdfs/statistics/{year}/{year}{month_in}beer.pdf\")\n  }\n  \n  # output to the pdfs folder\n  download_monthly_pdf <- function(year, month, url_in){\n    download.file(\n      url = url_in,\n      destfile = glue::glue(\"pdfs/ttb_monthly_stats_{year}-{month}.pdf\")\n      )\n  }\n  \n  # build all the input urls and attach to an input dataframe\n  full_df <- tibble(year = year_vec, month = month_in) %>% \n    mutate(url_in = pmap_chr(.l = list(year_vec, month_in), .f = url_build)) \n  \n  # The pwalk here takes all 3 inputs and applies them to download_monthly_pdf function\n  pwalk(full_df, .f = download_monthly_pdf)\n  \n}\n```\n:::\n\nWe could apply that function to all the years of interest with another `purrr::walk()` call. This will run `download_monthly_stats_pdf()` for 2011, 2012, 2013, and 2014.\n\n::: {.cell}\n\n```{.r .cell-code}\nwalk(c(2011:2014), download_monthly_stats_pdf)\n```\n:::\n\n## List File Names\n\n::: {.cell}\n\n```{.r .cell-code}\n# list all the files we have downloaded so far\nall_files <- list.files(\"pdfs\")\nlength(all_files)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 48\n```\n:::\n:::\n\nWe have 48 PDFs, as expected - 12 months x 4 years = 48! \n\nNow let's take a peek inside one of the PDFs.\n\n![](PDF-table.png)\n\n# Raw PDFs\n\nWhen we run `pdftools::pdf_text()` we can see a decently formatted table. The main issue to consider is that there is a lot erroneous header descriptions, and there are unequal spacing between \"columns\" in the table. Importantly, each line of the PDF is separated by a newline `\\n`. This is key to our strategy for pulling out individual lines.\n\n::: {.cell}\n\n```{.r .cell-code}\npdftools::pdf_text(\"pdfs/ttb_monthly_stats_2011-01.pdf\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"                                                                                                                          Report Date:\\n                                           DEPARTMENT OF THE TREASURY                                                     30-MAR-2011\\n                                 ALCOHOL AND TOBACCO TAX AND TRADE BUREAU\\n                                                                                                                          Report Symbol:\\n                                                  STATISTICAL REPORT - BEER                                               TTB S 5130-01-2011\\n\\n                                                      Reporting Period: January 2011                                      Page: 1 of 1\\n\\n\\n                                                                                                       Current Year             Prior Year\\n                                                                                   Prior Year           Cumulative             Cumulative\\nMANUFACTURE OF BEER                                     Current Month            Current Month         Year to Date            Year to Date\\n\\nProduction                                                    14,981,472              15,012,331          14,981,472               15,012,331\\nRemovals\\nTaxable ($7.00/$18.00 per barrel)\\n  In bottles and cans                                         11,571,819              11,908,922          11,571,819               11,908,922\\n  In barrels and kegs                                          1,245,125                   1,245,143       1,245,125                1,245,143\\n  Tax Determined, Premises Use                                      5,989                     5,267            5,989                     5,267\\n    Sub Total Taxable                                         12,822,933              13,159,332          12,822,933               13,159,332\\nTax-free\\n  For export                                                     264,669                    224,066          264,669                  224,066\\n  For vessels and aircraft                                               0                        0                   0                       0\\n  Consumed on brewery premises                                        886                       913              886                       913\\n     Sub Total Tax-Free                                          265,555                    224,979          265,555                  224,979\\n  Total Removals                                              13,088,488              13,384,311          13,088,488               13,384,311\\nStocks On Hand end-of-month:                                   9,896,961                   9,993,268       9,896,961                9,993,268\\n\\n\\nMATERIALS USED AT BREWERIES\\n\\n  Malt and malt products                                    322,480,722              330,304,432         322,480,722              330,304,432\\n  Corn and corn products                                      58,632,672              56,705,162          58,632,672               56,705,162\\n  Rice and rice products                                    108,112,318               59,701,345         108,112,318               59,701,345\\n  Barley and barley products                                   4,705,175                   3,668,374       4,705,175                3,668,374\\n  Wheat and wheat products                                     1,210,137                   1,409,685       1,210,137                1,409,685\\n    Total Grain products                                    495,141,024              451,788,998         495,141,024              451,788,998\\n\\n  Sugar and syrups                                            73,793,509              47,308,358          73,793,509               47,308,358\\n  Hops (dry)                                                   6,059,066                   4,765,924       6,059,066                4,765,924\\n  Hops (used as extracts)                                        296,605                    271,405          296,605                  271,405\\n  Other                                                        7,972,930              10,537,742           7,972,930               10,537,742\\n     Total Non-Grain products                                 88,122,110              62,883,429          88,122,110               62,883,429\\nTotal Used                                                  583,263,134              514,672,427         583,263,134              514,672,427\\n\\n\\n        296,605 Pounds of hops is equivalent to          212,541     pounds of extract JAN 2011\\n        271,405 Pounds of hops is equivalent to          101,087     pounds of extract JAN 2010\\n\\n\\n\\n\\nNOTE: Changes in figures from prior reports could be due to amended reports being filed.\\n     This data is not final and may need to be amended.\\n\\n\\n\\nhttp://www.ttb.gov\\n\"\n```\n:::\n:::\n\n## Split by row\n\nWe can use `stringr::str_split()` to separate the text at each of the `\\n` newlines. This generates a list of character strings, we call `unlist()` to extract to a vector. We now have a nicely separated vector of character strings, where each row is a new string.\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_text <- pdftools::pdf_text(\"pdfs/ttb_monthly_stats_2011-01.pdf\") %>% \n  str_split(\"\\n\") %>% \n  unlist()\nraw_text\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"                                                                                                                          Report Date:\"         \n [2] \"                                           DEPARTMENT OF THE TREASURY                                                     30-MAR-2011\"          \n [3] \"                                 ALCOHOL AND TOBACCO TAX AND TRADE BUREAU\"                                                                      \n [4] \"                                                                                                                          Report Symbol:\"       \n [5] \"                                                  STATISTICAL REPORT - BEER                                               TTB S 5130-01-2011\"   \n [6] \"\"                                                                                                                                               \n [7] \"                                                      Reporting Period: January 2011                                      Page: 1 of 1\"         \n [8] \"\"                                                                                                                                               \n [9] \"\"                                                                                                                                               \n[10] \"                                                                                                       Current Year             Prior Year\"     \n[11] \"                                                                                   Prior Year           Cumulative             Cumulative\"      \n[12] \"MANUFACTURE OF BEER                                     Current Month            Current Month         Year to Date            Year to Date\"    \n[13] \"\"                                                                                                                                               \n[14] \"Production                                                    14,981,472              15,012,331          14,981,472               15,012,331\"  \n[15] \"Removals\"                                                                                                                                       \n[16] \"Taxable ($7.00/$18.00 per barrel)\"                                                                                                              \n[17] \"  In bottles and cans                                         11,571,819              11,908,922          11,571,819               11,908,922\"  \n[18] \"  In barrels and kegs                                          1,245,125                   1,245,143       1,245,125                1,245,143\"  \n[19] \"  Tax Determined, Premises Use                                      5,989                     5,267            5,989                     5,267\" \n[20] \"    Sub Total Taxable                                         12,822,933              13,159,332          12,822,933               13,159,332\"  \n[21] \"Tax-free\"                                                                                                                                       \n[22] \"  For export                                                     264,669                    224,066          264,669                  224,066\"  \n[23] \"  For vessels and aircraft                                               0                        0                   0                       0\"\n[24] \"  Consumed on brewery premises                                        886                       913              886                       913\" \n[25] \"     Sub Total Tax-Free                                          265,555                    224,979          265,555                  224,979\"  \n[26] \"  Total Removals                                              13,088,488              13,384,311          13,088,488               13,384,311\"  \n[27] \"Stocks On Hand end-of-month:                                   9,896,961                   9,993,268       9,896,961                9,993,268\"  \n[28] \"\"                                                                                                                                               \n[29] \"\"                                                                                                                                               \n[30] \"MATERIALS USED AT BREWERIES\"                                                                                                                    \n[31] \"\"                                                                                                                                               \n[32] \"  Malt and malt products                                    322,480,722              330,304,432         322,480,722              330,304,432\"  \n[33] \"  Corn and corn products                                      58,632,672              56,705,162          58,632,672               56,705,162\"  \n[34] \"  Rice and rice products                                    108,112,318               59,701,345         108,112,318               59,701,345\"  \n[35] \"  Barley and barley products                                   4,705,175                   3,668,374       4,705,175                3,668,374\"  \n[36] \"  Wheat and wheat products                                     1,210,137                   1,409,685       1,210,137                1,409,685\"  \n[37] \"    Total Grain products                                    495,141,024              451,788,998         495,141,024              451,788,998\"  \n[38] \"\"                                                                                                                                               \n[39] \"  Sugar and syrups                                            73,793,509              47,308,358          73,793,509               47,308,358\"  \n[40] \"  Hops (dry)                                                   6,059,066                   4,765,924       6,059,066                4,765,924\"  \n[41] \"  Hops (used as extracts)                                        296,605                    271,405          296,605                  271,405\"  \n[42] \"  Other                                                        7,972,930              10,537,742           7,972,930               10,537,742\"  \n[43] \"     Total Non-Grain products                                 88,122,110              62,883,429          88,122,110               62,883,429\"  \n[44] \"Total Used                                                  583,263,134              514,672,427         583,263,134              514,672,427\"  \n[45] \"\"                                                                                                                                               \n[46] \"\"                                                                                                                                               \n[47] \"        296,605 Pounds of hops is equivalent to          212,541     pounds of extract JAN 2011\"                                                \n[48] \"        271,405 Pounds of hops is equivalent to          101,087     pounds of extract JAN 2010\"                                                \n[49] \"\"                                                                                                                                               \n[50] \"\"                                                                                                                                               \n[51] \"\"                                                                                                                                               \n[52] \"\"                                                                                                                                               \n[53] \"NOTE: Changes in figures from prior reports could be due to amended reports being filed.\"                                                       \n[54] \"     This data is not final and may need to be amended.\"                                                                                        \n[55] \"\"                                                                                                                                               \n[56] \"\"                                                                                                                                               \n[57] \"\"                                                                                                                                               \n[58] \"http://www.ttb.gov\"                                                                                                                             \n[59] \"\"                                                                                                                                               \n```\n:::\n:::\n\n## Build Table\n\nNow that we have the data split into a vector we can start finding \"rows\" to drop. We can see that the 9th string is actually the column titles, and the table ends at the 36th string. However, this could change according to which PDF we are looking at, so rather than going by position we can use `stringr::str_which()` to match a logical with matched text.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Start of table - column names\nraw_text[9]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"\"\n```\n:::\n\n```{.r .cell-code}\n# End of table - last value\nraw_text[36]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"  Wheat and wheat products                                     1,210,137                   1,409,685       1,210,137                1,409,685\"\n```\n:::\n:::\n\nWe get the same \"rows\" with our matching `str_which()`.\n\n::: {.cell}\n\n```{.r .cell-code}\n# find start of table\nstringr::str_which(raw_text, \"MANUFACTURE OF BEER\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n# find end of table\nstringr::str_which(raw_text, \"Total Used\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 44\n```\n:::\n:::\n\nLet's actually assign this now, rather than just printing. We can also remove leading/trailing whitespace with `stringr::str_trim()`. When we look at table_trimmed we can \"see\" a group of text strings that much closer resemble a table!\n\n::: {.cell}\n\n```{.r .cell-code}\ntable_start <- stringr::str_which(raw_text, \"MANUFACTURE OF BEER\")\n  \n# End of table (drop all the asterisks and the other descriptors)\ntable_end <- stringr::str_which(raw_text, \"Total Used\")\n  \n# Trim the table to the start/end and drop whitespace at each line\ntable_trimmed <- raw_text[table_start:table_end] %>% \n  str_trim()\ntable_trimmed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"MANUFACTURE OF BEER                                     Current Month            Current Month         Year to Date            Year to Date\"  \n [2] \"\"                                                                                                                                             \n [3] \"Production                                                    14,981,472              15,012,331          14,981,472               15,012,331\"\n [4] \"Removals\"                                                                                                                                     \n [5] \"Taxable ($7.00/$18.00 per barrel)\"                                                                                                            \n [6] \"In bottles and cans                                         11,571,819              11,908,922          11,571,819               11,908,922\"  \n [7] \"In barrels and kegs                                          1,245,125                   1,245,143       1,245,125                1,245,143\"  \n [8] \"Tax Determined, Premises Use                                      5,989                     5,267            5,989                     5,267\" \n [9] \"Sub Total Taxable                                         12,822,933              13,159,332          12,822,933               13,159,332\"    \n[10] \"Tax-free\"                                                                                                                                     \n[11] \"For export                                                     264,669                    224,066          264,669                  224,066\"  \n[12] \"For vessels and aircraft                                               0                        0                   0                       0\"\n[13] \"Consumed on brewery premises                                        886                       913              886                       913\" \n[14] \"Sub Total Tax-Free                                          265,555                    224,979          265,555                  224,979\"     \n[15] \"Total Removals                                              13,088,488              13,384,311          13,088,488               13,384,311\"  \n[16] \"Stocks On Hand end-of-month:                                   9,896,961                   9,993,268       9,896,961                9,993,268\"\n[17] \"\"                                                                                                                                             \n[18] \"\"                                                                                                                                             \n[19] \"MATERIALS USED AT BREWERIES\"                                                                                                                  \n[20] \"\"                                                                                                                                             \n[21] \"Malt and malt products                                    322,480,722              330,304,432         322,480,722              330,304,432\"  \n[22] \"Corn and corn products                                      58,632,672              56,705,162          58,632,672               56,705,162\"  \n[23] \"Rice and rice products                                    108,112,318               59,701,345         108,112,318               59,701,345\"  \n[24] \"Barley and barley products                                   4,705,175                   3,668,374       4,705,175                3,668,374\"  \n[25] \"Wheat and wheat products                                     1,210,137                   1,409,685       1,210,137                1,409,685\"  \n[26] \"Total Grain products                                    495,141,024              451,788,998         495,141,024              451,788,998\"    \n[27] \"\"                                                                                                                                             \n[28] \"Sugar and syrups                                            73,793,509              47,308,358          73,793,509               47,308,358\"  \n[29] \"Hops (dry)                                                   6,059,066                   4,765,924       6,059,066                4,765,924\"  \n[30] \"Hops (used as extracts)                                        296,605                    271,405          296,605                  271,405\"  \n[31] \"Other                                                        7,972,930              10,537,742           7,972,930               10,537,742\"  \n[32] \"Total Non-Grain products                                 88,122,110              62,883,429          88,122,110               62,883,429\"     \n[33] \"Total Used                                                  583,263,134              514,672,427         583,263,134              514,672,427\"\n```\n:::\n:::\n\n### Remove all the extra whitespace\n\nNext we need to remove all the huge whitespaces from between columns. The regular expression (regex) of `\"\\\\s{2,}\"` matches whitespaces of 2 or more. If we use `stringr::str_replace_all()` to take all the whitespaces > 2 and replace with a new delimiter such as `\"|\"` we can move to our next step. While we're at it, let's remove all the commas so that we can go straight to doubles rather than characters for all the beer production variables.\n  \n  \n::: {.cell}\n\n```{.r .cell-code}\n# Replace long spaces with a col break symbol\nsquished_table <- str_replace_all(table_trimmed, \"\\\\s{2,}\", \"|\") %>% \n  str_remove_all(\",\")\nsquished_table\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"MANUFACTURE OF BEER|Current Month|Current Month|Year to Date|Year to Date\"\n [2] \"\"                                                                         \n [3] \"Production|14981472|15012331|14981472|15012331\"                           \n [4] \"Removals\"                                                                 \n [5] \"Taxable ($7.00/$18.00 per barrel)\"                                        \n [6] \"In bottles and cans|11571819|11908922|11571819|11908922\"                  \n [7] \"In barrels and kegs|1245125|1245143|1245125|1245143\"                      \n [8] \"Tax Determined Premises Use|5989|5267|5989|5267\"                          \n [9] \"Sub Total Taxable|12822933|13159332|12822933|13159332\"                    \n[10] \"Tax-free\"                                                                 \n[11] \"For export|264669|224066|264669|224066\"                                   \n[12] \"For vessels and aircraft|0|0|0|0\"                                         \n[13] \"Consumed on brewery premises|886|913|886|913\"                             \n[14] \"Sub Total Tax-Free|265555|224979|265555|224979\"                           \n[15] \"Total Removals|13088488|13384311|13088488|13384311\"                       \n[16] \"Stocks On Hand end-of-month:|9896961|9993268|9896961|9993268\"             \n[17] \"\"                                                                         \n[18] \"\"                                                                         \n[19] \"MATERIALS USED AT BREWERIES\"                                              \n[20] \"\"                                                                         \n[21] \"Malt and malt products|322480722|330304432|322480722|330304432\"           \n[22] \"Corn and corn products|58632672|56705162|58632672|56705162\"               \n[23] \"Rice and rice products|108112318|59701345|108112318|59701345\"             \n[24] \"Barley and barley products|4705175|3668374|4705175|3668374\"               \n[25] \"Wheat and wheat products|1210137|1409685|1210137|1409685\"                 \n[26] \"Total Grain products|495141024|451788998|495141024|451788998\"             \n[27] \"\"                                                                         \n[28] \"Sugar and syrups|73793509|47308358|73793509|47308358\"                     \n[29] \"Hops (dry)|6059066|4765924|6059066|4765924\"                               \n[30] \"Hops (used as extracts)|296605|271405|296605|271405\"                      \n[31] \"Other|7972930|10537742|7972930|10537742\"                                  \n[32] \"Total Non-Grain products|88122110|62883429|88122110|62883429\"             \n[33] \"Total Used|583263134|514672427|583263134|514672427\"                       \n```\n:::\n:::\n  \n### Convert to tibble\n\nNow we have a nicely formatted vector of strings! We can use `tibble::enframe()` to create a dataframe/tibble out of the vector.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to tibble\nraw_df <- enframe(squished_table)\nraw_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 33 × 2\n    name value                                                                  \n   <int> <chr>                                                                  \n 1     1 \"MANUFACTURE OF BEER|Current Month|Current Month|Year to Date|Year to …\n 2     2 \"\"                                                                     \n 3     3 \"Production|14981472|15012331|14981472|15012331\"                       \n 4     4 \"Removals\"                                                             \n 5     5 \"Taxable ($7.00/$18.00 per barrel)\"                                    \n 6     6 \"In bottles and cans|11571819|11908922|11571819|11908922\"              \n 7     7 \"In barrels and kegs|1245125|1245143|1245125|1245143\"                  \n 8     8 \"Tax Determined Premises Use|5989|5267|5989|5267\"                      \n 9     9 \"Sub Total Taxable|12822933|13159332|12822933|13159332\"                \n10    10 \"Tax-free\"                                                             \n# … with 23 more rows\n```\n:::\n:::\nNext we can separate value into the 5 columns. Notice that there are a few \"rows\" where the data is NA as there were rows that acted only as indicators of the type of beer production. We'll use them later.\n\n::: {.cell}\n\n```{.r .cell-code}\nyear <- 2011\nmonth <- \"02\"\n# Convert to tibble\nbeer_df <- raw_df %>% \n    separate(value, \n             into = c(\"type\", \"month_current\", \"month_prior_year\", \"ytd_current\", \"ytd_prior_year\"), \n             sep = \"\\\\|\") %>% \n  slice(-1) %>% \n  mutate_at(vars(month_current:ytd_prior_year), as.double) %>% \n  mutate(year = as.integer(year), month = as.integer(month)) %>% \n  select(year, month, type, everything())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expected 5 pieces. Missing pieces filled with `NA` in 9 rows [2, 4, 5,\n10, 17, 18, 19, 20, 27].\n```\n:::\n\n```{.r .cell-code}\nbeer_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32 × 8\n    year month type              name month_current month_prior_year ytd_current\n   <int> <int> <chr>            <int>         <dbl>            <dbl>       <dbl>\n 1  2011     2 \"\"                   2            NA               NA          NA\n 2  2011     2 \"Production\"         3      14981472         15012331    14981472\n 3  2011     2 \"Removals\"           4            NA               NA          NA\n 4  2011     2 \"Taxable ($7.00…     5            NA               NA          NA\n 5  2011     2 \"In bottles and…     6      11571819         11908922    11571819\n 6  2011     2 \"In barrels and…     7       1245125          1245143     1245125\n 7  2011     2 \"Tax Determined…     8          5989             5267        5989\n 8  2011     2 \"Sub Total Taxa…     9      12822933         13159332    12822933\n 9  2011     2 \"Tax-free\"          10            NA               NA          NA\n10  2011     2 \"For export\"        11        264669           224066      264669\n# … with 22 more rows, and 1 more variable: ytd_prior_year <dbl>\n```\n:::\n:::\n\nTechnically at this point, we have successfully converted from raw text to a dataframe/table/tibble! HOWEVER, for many many examples in the wild you will need to do additional data cleaning, data manipulation, factor assignment, etc. As such, I'll continue working on this to get to a final output. I'll also work on repeating this many times as opposed to one time.\n\n# Alternative method via `readr`\n\nThanks to Grant McDermott for bringing up a good point [here](https://github.com/jthomasmock/pdftools-guide/issues/1) - I based this method off of tables where the white-space between columns is varying. If the white space is fixed between columns you could skip some steps as seen in the below example using `readr::read_fwf()`, courtesy of Grant. I believe for most cases either using `readr::read_table()` or `readr::read_fwf()` would be simple, but will keep the additional workflow steps in case they help someone down the road!\n\nOverall, using `readr` to natively parse the table-format could save the workflow step of trimming, coercing to a tibble, and then separating, and just requires you to indicate the spacing of empty cells either manually with `fwf_widths()` or guessing/parsing of columns via `fwf_empty()`. Note that as of `readr`v2.0, you'll need to wrap literal in-memory data with `I()` - full details in [`readr` 2.0 announcement blogpost](https://www.tidyverse.org/blog/2021/07/readr-2-0-0/#literal-data).\n\n::: {.cell}\n\n```{.r .cell-code}\ntable_start_fwf <- stringr::str_which(raw_text, \"Production\") ## Changed since we're dropping the first row anyway\ntable_end_fwf <- stringr::str_which(raw_text, \"Total Used\")\n## Trim the table to the start/end (NB: Don't drop whitespace this time!)\ntable_trimmed_fwf <- raw_text[table_start_fwf:table_end_fwf]\nbeer_df_fwf <- read_fwf(I(table_trimmed_fwf), \n                        fwf_empty(I(table_trimmed_fwf), \n                                  col_names = c(\"type\", \n                                                \"month_current\", \n                                                \"month_prior_year\", \n                                                \"ytd_current\", \n                                                \"ytd_prior_year\")\n                                  )\n                        )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 31 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\n\nchr (1): type\ndbl (1): ytd_prior_year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nbeer_df_fwf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 31 × 6\n   type        month_current month_prior_year ytd_current ytd_prior_year      X6\n   <chr>               <dbl>            <dbl>       <dbl>          <dbl>   <dbl>\n 1 Production       14981472         15012331    14981472             NA  1.50e7\n 2 Removals               NA               NA          NA             NA NA     \n 3 Taxable ($…            NA               NA          NA             NA NA     \n 4 In bottles…      11571819         11908922    11571819             NA  1.19e7\n 5 In barrels…       1245125          1245143     1245125             NA  1.25e6\n 6 Tax Determ…          5989             5267        5989             NA  5.27e3\n 7 Sub Total …      12822933         13159332    12822933             NA  1.32e7\n 8 Tax-free               NA               NA          NA             NA NA     \n 9 For export         264669           224066      264669             NA  2.24e5\n10 For vessel…             0                0          NA              0  0     \n# … with 21 more rows\n```\n:::\n:::\n\nOne more alternative would be to just use [`readr::read_table()`](https://readr.tidyverse.org/reference/read_table.html) or [`readr::read_table2()`](https://readr.tidyverse.org/reference/read_table.html). Now in practice this should be fairly robust, and works just fine for the examples here, but for messier tables it may fail which leads to the more complex and longer workflow shown below. Specifically, from the `readr::read_table()` [docs](https://readr.tidyverse.org/reference/read_table.html):\n\n> `read_table()` and `read_table2()` are designed to read the type of textual data where each column is separated by one (or more) > columns of space.\n> \n> `read_table2()` is like `read.table()`, it allows any number of whitespace characters between columns, and the lines can be of different lengths.\n> \n> `read_table()` is more strict, each line must be the same length, and each field is in the same position in every line. It first finds empty columns and then parses like a fixed width file.\n\n::: {.cell}\n\n```{.r .cell-code}\nread_table(raw_text[table_start:table_end], skip =1,\n           col_names = c(\"type\", \"month_current\", \"month_prior_year\", \n                         \"ytd_current\", \"ytd_prior_year\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 25 parsing failures.\nrow col  expected    actual         file\n  2  -- 5 columns 1 columns literal data\n  3  -- 5 columns 4 columns literal data\n  4  -- 5 columns 8 columns literal data\n  5  -- 5 columns 8 columns literal data\n  6  -- 5 columns 8 columns literal data\n... ... ......... ......... ............\nSee problems(...) for more details.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 27 × 5\n   type       month_current month_prior_year ytd_current ytd_prior_year\n   <chr>      <chr>         <chr>            <chr>                <dbl>\n 1 Production 14,981,472    15,012,331       14,981,472        15012331\n 2 Removals   <NA>          <NA>             <NA>                    NA\n 3 Taxable    ($7.00/$18.00 per              barrel)                 NA\n 4 In         bottles       and              cans              11571819\n 5 In         barrels       and              kegs               1245125\n 6 Tax        Determined,   Premises         Use                   5989\n 7 Sub        Total         Taxable          12,822,933        13159332\n 8 Tax-free   <NA>          <NA>             <NA>                    NA\n 9 For        export        264,669          224,066             264669\n10 For        vessels       and              aircraft                 0\n# … with 17 more rows\n```\n:::\n:::\n\n\n# Proper Cleaning\n\nThis is actually two datasets that are combined into one large reporting table. As such we need to identify the specific row/point to split the dataset at. We can filter to just the row that matches either the string \"MATERIALS USED\" or \"IN POUNDS\", as that indicates a label starting the 2nd dataset.\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_num <- beer_df %>% \n  # find a string that has MATERIALS USED or IN POUNDS\n  # | means OR\n    filter(str_detect(type, \"MATERIALS USED|IN POUNDS\")) %>%\n    pull(name)\nslice_num\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 19\n```\n:::\n:::\n\n## Split dataframe\n\nNext we will add a column based on logic for the `slice_num`, and assign a grouping variable for either `Barrels Produced` (dataset 1) or `Pounds of Materials Used` (dataset 2). We can then drop the unneeded rows with a `filter()`, `group_by(`) the newly produced grouping variable, and use `dplyr::group_split()` to separate the combined dataset into a list of both datasets.\n\n::: {.cell}\n\n```{.r .cell-code}\n# split data into materials vs barrels produced\nsplit_df <- beer_df %>% \n  mutate(data_type = ifelse(name >= slice_num, \"Pounds of Materials Used\", \"Barrels Produced\"),\n         type = str_remove(type, \":\")) %>% \n  select(data_type, everything(), -name) %>% \n  filter(!str_detect(type, \"IN POUNDS|MATERIALS USED|MANUFACTURE OF BEER|BARRELS\")) %>% \n  group_by(data_type) %>% \n  group_split()\nglimpse(split_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlist<tibble[,8]> [1:2] \n$ : tibble [17 × 8] (S3: tbl_df/tbl/data.frame)\n$ : tibble [14 × 8] (S3: tbl_df/tbl/data.frame)\n@ ptype: tibble [0 × 8] (S3: tbl_df/tbl/data.frame)\n```\n:::\n:::\n\n## Factor cleaning and final dataframes\n\nWe can see that the `split_df` object is a list of 2 tibbles/dataframes. We can now operate on the individual dataframes and finalize the factor cleaning and assignment to make the data a bit tidier and analysis ready.\n\n::: {.cell}\n\n```{.r .cell-code}\nmanufacture_df <- split_df[[1]] %>% \n  mutate(\n    tax_status = case_when(\n      type %in% c(\"In bottles and cans\", \"In kegs\", \"In barrels and kegs\",\n                  \"Tax Determined, Premises Use\") ~ \"Taxable\",\n      type == \"Sub Total Taxable\" ~ \"Sub Total Taxable\",\n      type %in% c(\"For export\", \"For vessels and aircraft\", \n                  \"Consumed on brewery premises\") ~ \"Tax Free\",\n      type == \"Sub Total Tax-Free\" ~ \"Sub Total Tax-Free\",\n      type %in% c(\"Production\", \"Total Removals\", \n                  \"Stocks On Hand end-of-month:\") ~ \"Totals\"\n      ),\n    tax_rate = dplyr::if_else(year <= 2017, \"$7/$18 per barrel\", \"$3.50/$16 per barrel\")\n    ) %>% \n  filter(!is.na(tax_status)) %>% \n  select(data_type, tax_status, everything())\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# clean up the material dataset\nmaterial_df <- split_df[[2]] %>% \n  mutate(\n    material_type = case_when(\n      str_detect(type, \"Malt|Corn|Rice|Barley|Wheat\") ~ \"Grain Products\",\n      str_detect(type, \"Sugar|Hops|Other\") ~ \"Non-Grain Products\",\n      str_detect(type, \"Total\") ~ type\n    )\n  ) %>% \n  select(data_type, material_type, everything())\n```\n:::\n\n### Print the dataframes\n\nThe manufacture dataframe now has the labels, factors, etc separated into nice columns, with the 4x columns for specific barrels produced.\n\n::: {.cell}\n\n```{.r .cell-code}\nmanufacture_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 10\n  data_type        tax_status    year month type  month_current month_prior_year\n  <chr>            <chr>        <int> <int> <chr>         <dbl>            <dbl>\n1 Barrels Produced Totals        2011     2 Prod…      14981472         15012331\n2 Barrels Produced Taxable       2011     2 In b…      11571819         11908922\n3 Barrels Produced Taxable       2011     2 In b…       1245125          1245143\n4 Barrels Produced Sub Total T…  2011     2 Sub …      12822933         13159332\n5 Barrels Produced Tax Free      2011     2 For …        264669           224066\n6 Barrels Produced Tax Free      2011     2 For …             0                0\n7 Barrels Produced Tax Free      2011     2 Cons…           886              913\n8 Barrels Produced Sub Total T…  2011     2 Sub …        265555           224979\n9 Barrels Produced Totals        2011     2 Tota…      13088488         13384311\n# … with 3 more variables: ytd_current <dbl>, ytd_prior_year <dbl>,\n#   tax_rate <chr>\n```\n:::\n:::\n\n\nThe material dataframe now has the labels, factors, etc separated into nice columns, with the 4x columns for specific pounds of product used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaterial_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 9\n   data_type      material_type  year month type  month_current month_prior_year\n   <chr>          <chr>         <int> <int> <chr>         <dbl>            <dbl>\n 1 Pounds of Mat… <NA>           2011     2 \"\"               NA               NA\n 2 Pounds of Mat… Grain Produc…  2011     2 \"Mal…     322480722        330304432\n 3 Pounds of Mat… Grain Produc…  2011     2 \"Cor…      58632672         56705162\n 4 Pounds of Mat… Grain Produc…  2011     2 \"Ric…     108112318         59701345\n 5 Pounds of Mat… Grain Produc…  2011     2 \"Bar…       4705175          3668374\n 6 Pounds of Mat… Grain Produc…  2011     2 \"Whe…       1210137          1409685\n 7 Pounds of Mat… Total Grain …  2011     2 \"Tot…     495141024        451788998\n 8 Pounds of Mat… <NA>           2011     2 \"\"               NA               NA\n 9 Pounds of Mat… Non-Grain Pr…  2011     2 \"Sug…      73793509         47308358\n10 Pounds of Mat… Non-Grain Pr…  2011     2 \"Hop…       6059066          4765924\n11 Pounds of Mat… Non-Grain Pr…  2011     2 \"Hop…        296605           271405\n12 Pounds of Mat… Non-Grain Pr…  2011     2 \"Oth…       7972930         10537742\n13 Pounds of Mat… Total Non-Gr…  2011     2 \"Tot…      88122110         62883429\n14 Pounds of Mat… Total Used     2011     2 \"Tot…     583263134        514672427\n# … with 2 more variables: ytd_current <dbl>, ytd_prior_year <dbl>\n```\n:::\n:::\n\n### Finished Cleaning\n\nWe have now finished cleaning the manufacting and material dataframes! However, we did this all line-by-line without functions and would need to repeat this for the other 47 PDFs! Let's convert ALL that code into a function that outputs the final dataframes.\n  \n# Use a function\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a function that works for most years\nget_beer_tables <- function(year, month) {\n  \n  # read in the raw PDF\n  raw_text <- pdftools::pdf_text(glue::glue(\"pdfs/ttb_monthly_stats_{year}-{month}.pdf\")) %>%\n    str_split(\"\\n\") %>%\n    unlist()\n  ## Build Table\n  # find start of table\n  table_start <- stringr::str_which(raw_text, \"MANUFACTURE OF BEER\")\n  # End of table (drop all the asterisks and the other descriptors)\n  table_end <- stringr::str_which(raw_text, \"Total Used\")\n  # Trim the table to the start/end and drop whitespace at each line\n  table_trimmed <- raw_text[table_start:table_end] %>%\n    str_trim()\n  table_trimmed\n  ### Remove all the extra whitespace\n  # Replace long spaces with a col break symbol\n  squished_table <- str_replace_all(table_trimmed, \"\\\\s{2,}\", \"|\") %>%\n    str_remove_all(\",\")\n  ### Convert to tibble\n  # Convert to tibble\n  raw_df <- enframe(squished_table)\n  \n  # split the rows into their columns\n  beer_df <- suppressWarnings(raw_df %>%\n    separate(value,\n      into = c(\"type\", \"month_current\", \"month_prior_year\", \"ytd_current\", \"ytd_prior_year\"),\n      sep = \"\\\\|\"\n    ) %>%\n    slice(-1) %>%\n    mutate_at(vars(month_current:ytd_prior_year), as.double) %>%\n    mutate(year = as.integer(year), month = as.integer(month)) %>%\n    select(year, month, type, everything()))\n  ### Proper Cleaning\n  # ID the specific row/point to split the dataset at.\n  slice_num <- beer_df %>%\n    # find a string that has MATERIALS USED or IN POUNDS\n    # | means OR\n    filter(str_detect(type, \"MATERIALS USED|IN POUNDS\")) %>%\n    pull(name)\n  #### Split dataframe\n  # split data into materials vs barrels produced\n  split_df <- suppressWarnings(beer_df %>%\n    mutate(\n      data_type = ifelse(name >= slice_num, \"Pounds of Materials Used\", \"Barrels Produced\"),\n      type = str_remove(type, \":\")\n    ) %>%\n    select(data_type, everything(), -name) %>%\n    filter(!str_detect(type, \"IN POUNDS|MATERIALS USED|MANUFACTURE OF BEER|BARRELS\")) %>%\n    group_by(data_type) %>%\n    group_split())\n  #### Factor cleaning and final dataframes\n  # clean manufacture df\n  manufacture_df <- split_df[[1]] %>%\n    mutate(\n      tax_status = case_when(\n        type %in% c(\n          \"In bottles and cans\", \"In kegs\", \"In barrels and kegs\",\n          \"Tax Determined, Premises Use\"\n        ) ~ \"Taxable\",\n        type == \"Sub Total Taxable\" ~ \"Sub Total Taxable\",\n        type %in% c(\n          \"For export\", \"For vessels and aircraft\",\n          \"Consumed on brewery premises\"\n        ) ~ \"Tax Free\",\n        type == \"Sub Total Tax-Free\" ~ \"Sub Total Tax-Free\",\n        type %in% c(\n          \"Production\", \"Total Removals\",\n          \"Stocks On Hand end-of-month:\"\n        ) ~ \"Totals\"\n      ),\n      tax_rate = dplyr::if_else(year <= 2017, \"$7/$18 per barrel\", \"$3.50/$16 per barrel\")\n    ) %>%\n    filter(!is.na(tax_status)) %>%\n    select(data_type, tax_status, everything())\n  # clean up the material dataset\n  material_df <- split_df[[2]] %>%\n    mutate(\n      material_type = case_when(\n        str_detect(type, \"Malt|Corn|Rice|Barley|Wheat\") ~ \"Grain Products\",\n        str_detect(type, \"Sugar|Hops|Other\") ~ \"Non-Grain Products\",\n        str_detect(type, \"Total\") ~ type\n      )\n    ) %>%\n    select(data_type, material_type, everything())\n  # output a list of both dfs\n  list(manufacture_df, material_df)\n}\n```\n:::\n\n\nReally the only code we have changed is we added a `glue` call to add the year, month to which PDF to read in, and we have the output as a list of both dataframes. Let's test our function!\n\n::: {.cell}\n\n```{.r .cell-code}\nget_beer_tables(2011, \"01\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 9 × 10\n  data_type        tax_status    year month type  month_current month_prior_year\n  <chr>            <chr>        <int> <int> <chr>         <dbl>            <dbl>\n1 Barrels Produced Totals        2011     1 Prod…      14981472         15012331\n2 Barrels Produced Taxable       2011     1 In b…      11571819         11908922\n3 Barrels Produced Taxable       2011     1 In b…       1245125          1245143\n4 Barrels Produced Sub Total T…  2011     1 Sub …      12822933         13159332\n5 Barrels Produced Tax Free      2011     1 For …        264669           224066\n6 Barrels Produced Tax Free      2011     1 For …             0                0\n7 Barrels Produced Tax Free      2011     1 Cons…           886              913\n8 Barrels Produced Sub Total T…  2011     1 Sub …        265555           224979\n9 Barrels Produced Totals        2011     1 Tota…      13088488         13384311\n# … with 3 more variables: ytd_current <dbl>, ytd_prior_year <dbl>,\n#   tax_rate <chr>\n\n[[2]]\n# A tibble: 14 × 9\n   data_type      material_type  year month type  month_current month_prior_year\n   <chr>          <chr>         <int> <int> <chr>         <dbl>            <dbl>\n 1 Pounds of Mat… <NA>           2011     1 \"\"               NA               NA\n 2 Pounds of Mat… Grain Produc…  2011     1 \"Mal…     322480722        330304432\n 3 Pounds of Mat… Grain Produc…  2011     1 \"Cor…      58632672         56705162\n 4 Pounds of Mat… Grain Produc…  2011     1 \"Ric…     108112318         59701345\n 5 Pounds of Mat… Grain Produc…  2011     1 \"Bar…       4705175          3668374\n 6 Pounds of Mat… Grain Produc…  2011     1 \"Whe…       1210137          1409685\n 7 Pounds of Mat… Total Grain …  2011     1 \"Tot…     495141024        451788998\n 8 Pounds of Mat… <NA>           2011     1 \"\"               NA               NA\n 9 Pounds of Mat… Non-Grain Pr…  2011     1 \"Sug…      73793509         47308358\n10 Pounds of Mat… Non-Grain Pr…  2011     1 \"Hop…       6059066          4765924\n11 Pounds of Mat… Non-Grain Pr…  2011     1 \"Hop…        296605           271405\n12 Pounds of Mat… Non-Grain Pr…  2011     1 \"Oth…       7972930         10537742\n13 Pounds of Mat… Total Non-Gr…  2011     1 \"Tot…      88122110         62883429\n14 Pounds of Mat… Total Used     2011     1 \"Tot…     583263134        514672427\n# … with 2 more variables: ytd_current <dbl>, ytd_prior_year <dbl>\n```\n:::\n:::\n\nBoom! Function is working for our example, let's try it out with more than 1 input via `purrr`!\n\n# `purrr` - iteration without repetition\n\nWe'll be using `pmap()` to apply our function multiple times, where `pmap` can take any number of inputs. For example if we call `get_beer_tables()` via `pmap`, we can get our tables for that 1 year/month combo!\n\n::: {.cell}\n\n```{.r .cell-code}\n# Quick test of purrr\npmap(list(2011, \"02\"), get_beer_tables)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[[1]][[1]]\n# A tibble: 9 × 10\n  data_type        tax_status    year month type  month_current month_prior_year\n  <chr>            <chr>        <int> <int> <chr>         <dbl>            <dbl>\n1 Barrels Produced Totals        2011     2 Prod…      14350832         14297845\n2 Barrels Produced Taxable       2011     2 In b…      11509264         11847648\n3 Barrels Produced Taxable       2011     2 In b…       1234147          1308677\n4 Barrels Produced Sub Total T…  2011     2 Sub …      12749447         13161061\n5 Barrels Produced Tax Free      2011     2 For …        279150           263721\n6 Barrels Produced Tax Free      2011     2 For …             0                0\n7 Barrels Produced Tax Free      2011     2 Cons…           942              719\n8 Barrels Produced Sub Total T…  2011     2 Sub …        280092           264440\n9 Barrels Produced Totals        2011     2 Tota…      13029539         13425501\n# … with 3 more variables: ytd_current <dbl>, ytd_prior_year <dbl>,\n#   tax_rate <chr>\n\n[[1]][[2]]\n# A tibble: 14 × 9\n   data_type      material_type  year month type  month_current month_prior_year\n   <chr>          <chr>         <int> <int> <chr>         <dbl>            <dbl>\n 1 Pounds of Mat… <NA>           2011     2 \"\"               NA               NA\n 2 Pounds of Mat… Grain Produc…  2011     2 \"Mal…     307076591        305543380\n 3 Pounds of Mat… Grain Produc…  2011     2 \"Cor…      53981943         54486996\n 4 Pounds of Mat… Grain Produc…  2011     2 \"Ric…      54287863         55198940\n 5 Pounds of Mat… Grain Produc…  2011     2 \"Bar…       4322047          3726630\n 6 Pounds of Mat… Grain Produc…  2011     2 \"Whe…        955671          1683401\n 7 Pounds of Mat… Total Grain …  2011     2 \"Tot…     420624115        420639347\n 8 Pounds of Mat… <NA>           2011     2 \"\"               NA               NA\n 9 Pounds of Mat… Non-Grain Pr…  2011     2 \"Sug…      63374850         46718854\n10 Pounds of Mat… Non-Grain Pr…  2011     2 \"Hop…       7617974          4899463\n11 Pounds of Mat… Non-Grain Pr…  2011     2 \"Hop…        275963           268589\n12 Pounds of Mat… Non-Grain Pr…  2011     2 \"Oth…       7997916          9022834\n13 Pounds of Mat… Total Non-Gr…  2011     2 \"Tot…      79266703         60909740\n14 Pounds of Mat… Total Used     2011     2 \"Tot…     499890818        481549087\n# … with 2 more variables: ytd_current <dbl>, ytd_prior_year <dbl>\n```\n:::\n:::\n\nHowever our goal is all the inputs at once! We can create a vector of the month inputs as character strings, and then use `tidyr::crossing()` to output all the possible combinations of year + month as a dataframe. Notice two columns, year and month with a length of 48 - equal to all of our PDFs!\n\n::: {.cell}\n\n```{.r .cell-code}\n# add the month_num as vector\nmonth_num <- c(\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\")\n# use crossing to generate all combos for the data \n# 2010 is missing, but as the data has prior year data we can theoretically\n# add it back in after the fact\ncrossing(\n  year = c(2011:2014), \n  month = month_num\n  ) %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 48\nColumns: 2\n$ year  <int> 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011…\n$ month <chr> \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\"…\n```\n:::\n:::\n\n## All possible combos\n\nWe can use `tidyr::crossing()` again to generate the possible inputs and create the output dataframes as list column of two dataframes. Running this takes only about 2 seconds across the 48 PDFs! The output is not very exciting as the data is simply the year & month columns, plus a list-column called data. Let's get the final outputs!\n\n::: {.cell hash='index_cache/html/unnamed-chunk-24_511bfe226f9f7f60e236e6de677d27ae'}\n\n```{.r .cell-code}\n# add the month_num as vector\nmonth_num <- c(\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\")\n# use crossing to generate all combos for the data \ndf_2011_2014 <- crossing(year = c(2011:2014), \n                         month = month_num) %>% \n  mutate(data = pmap(., get_beer_tables))\ndf_2011_2014\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 48 × 3\n    year month data      \n   <int> <chr> <list>    \n 1  2011 01    <list [2]>\n 2  2011 02    <list [2]>\n 3  2011 03    <list [2]>\n 4  2011 04    <list [2]>\n 5  2011 05    <list [2]>\n 6  2011 06    <list [2]>\n 7  2011 07    <list [2]>\n 8  2011 08    <list [2]>\n 9  2011 09    <list [2]>\n10  2011 10    <list [2]>\n# … with 38 more rows\n```\n:::\n:::\n\n## Final output\n\nWe can now get just the output data, drop the other columns. We're still working with list-columns, so let's get to the `manufacture_df` and `material_df`.\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_output <- df_2011_2014 %>%\n  # grab the data into respective columns\n  mutate(manufacture_data = map(data, 1),\n         material_data = map(data, 2)) %>% \n  select(manufacture_data, material_data)\nfinal_output\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 48 × 2\n   manufacture_data  material_data    \n   <list>            <list>           \n 1 <tibble [9 × 10]> <tibble [14 × 9]>\n 2 <tibble [9 × 10]> <tibble [14 × 9]>\n 3 <tibble [9 × 10]> <tibble [14 × 9]>\n 4 <tibble [9 × 10]> <tibble [14 × 9]>\n 5 <tibble [9 × 10]> <tibble [14 × 9]>\n 6 <tibble [9 × 10]> <tibble [14 × 9]>\n 7 <tibble [9 × 10]> <tibble [14 × 9]>\n 8 <tibble [9 × 10]> <tibble [14 × 9]>\n 9 <tibble [9 × 10]> <tibble [14 × 9]>\n10 <tibble [9 × 10]> <tibble [14 × 9]>\n# … with 38 more rows\n```\n:::\n:::\n\n\nThe manufacture dataframe can be combined as below.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Grab just the manufacture data\nmanufacture_df <- final_output %>% \n  select(manufacture_data) %>% \n  unnest(manufacture_data)\n# Grab just the manufacture data\nmaterial_df <- final_output %>% \n  select(material_data) %>% \n  unnest(material_data)\n```\n:::\n\n\nAnd now we can look at the outputs!\n\n### Manufacture dataset\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(manufacture_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 432\nColumns: 10\n$ data_type        <chr> \"Barrels Produced\", \"Barrels Produced\", \"Barrels Prod…\n$ tax_status       <chr> \"Totals\", \"Taxable\", \"Taxable\", \"Sub Total Taxable\", …\n$ year             <int> 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011,…\n$ month            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2,…\n$ type             <chr> \"Production\", \"In bottles and cans\", \"In barrels and …\n$ month_current    <dbl> 14981472, 11571819, 1245125, 12822933, 264669, 0, 886…\n$ month_prior_year <dbl> 15012331, 11908922, 1245143, 13159332, 224066, 0, 913…\n$ ytd_current      <dbl> 14981472, 11571819, 1245125, 12822933, 264669, 0, 886…\n$ ytd_prior_year   <dbl> 15012331, 11908922, 1245143, 13159332, 224066, 0, 913…\n$ tax_rate         <chr> \"$7/$18 per barrel\", \"$7/$18 per barrel\", \"$7/$18 per…\n```\n:::\n:::\n\n### Material dataset\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(material_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 637\nColumns: 9\n$ data_type        <chr> \"Pounds of Materials Used\", \"Pounds of Materials Used…\n$ material_type    <chr> NA, \"Grain Products\", \"Grain Products\", \"Grain Produc…\n$ year             <int> 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011,…\n$ month            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,…\n$ type             <chr> \"\", \"Malt and malt products\", \"Corn and corn products…\n$ month_current    <dbl> NA, 322480722, 58632672, 108112318, 4705175, 1210137,…\n$ month_prior_year <dbl> NA, 330304432, 56705162, 59701345, 3668374, 1409685, …\n$ ytd_current      <dbl> NA, 322480722, 58632672, 108112318, 4705175, 1210137,…\n$ ytd_prior_year   <dbl> NA, 330304432, 56705162, 59701345, 3668374, 1409685, …\n```\n:::\n:::\n\n# Do it all in 6 Lines of Code!\n\nNow all of that could have been done in about 6 lines of `tidyverse` code since we created a function.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use crossing to generate all 48 combos for the data \n# Use purrr to read in, clean, and output the 96 tables from the 48 PDFs\nfinal_output <- crossing(year = c(2011:2014), month = month_num) %>% \n  mutate(data = pmap(., get_beer_tables)) %>% \n  mutate(manufacture_data = map(data, 1), material_data = map(data, 2)) %>% \n  select(manufacture_data, material_data)\n# Grab just the manufacture data\nmanufacture_df <- final_output %>% select(manufacture_data) %>% unnest(manufacture_data)\n# Grab just the manufacture data\nmaterial_df <- final_output %>% select(material_data) %>% unnest(material_data)\n```\n:::\n\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS Monterey 12.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-04-28\n pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n quarto   0.9.294 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n dplyr       * 1.0.8   2022-02-08 [1] CRAN (R 4.2.0)\n forcats     * 0.5.1   2021-01-27 [1] CRAN (R 4.2.0)\n ggplot2     * 3.3.5   2021-06-25 [1] CRAN (R 4.2.0)\n pdftools    * 3.1.1   2022-02-25 [1] CRAN (R 4.2.0)\n purrr       * 0.3.4   2020-04-17 [1] CRAN (R 4.2.0)\n readr       * 2.1.2   2022-01-30 [1] CRAN (R 4.2.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n stringr     * 1.4.0   2019-02-10 [1] CRAN (R 4.2.0)\n tibble      * 3.1.6   2021-11-07 [1] CRAN (R 4.2.0)\n tidyr       * 1.2.0   2022-02-01 [1] CRAN (R 4.2.0)\n tidyverse   * 1.3.1   2021-04-15 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}