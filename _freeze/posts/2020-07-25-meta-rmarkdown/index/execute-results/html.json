{
  "hash": "982c1279e9e0f3c41e561304af278964",
  "result": {
    "markdown": "---\ntitle: \"Meta RMarkdown - Taxonomy and Use cases\"\ndescription: |\n  A meta collection of all things R Markdown.\nauthor: Thomas Mock\ndate: 07-25-2020\ncategories:\n  - rmarkdown\n  - tidyverse\nimage: tools-flat.jpg\n---\n\n![Set of tools layed flat](tools-flat.jpg)\n\n## NYR Presentation\n\n![](nyr-slide.png)\n\nMy slides on this topic for the NYC R Conference are at [bit.ly/marvelRMD](https://docs.google.com/presentation/d/e/2PACX-1vRo1eXJtiwo6aTA8KZ2E-bUbv2GOonC2RIVk_5eWQ5y-ADXbRamBhHaa3w1vMW6BkEPOMJ13ZahSo8Q/embed?start=false&loop=true&delayms=30000&slide=id.p).\n\n[PDF Version](https://github.com/jthomasmock/radix_themockup/tree/master/_posts/2020-07-25-meta-rmarkdown/rmd-slides.pdf) for folks who want to try out the code-chunks.\n\n## How Alison Hill teaches R Markdown\n\nIf you haven't read it already make sure to read [Dr. Alison Hill's fantastic blogpost](https://alison.rbind.io/post/2020-05-28-how-i-teach-r-markdown/):  \n**`How I teach R Markdown`**\n\nAlison is a RMarkdown superstar on the RStudio Education team. Her blogpost covers her guide on her well-informed approach for **teaching** R Markdown. \n\nShe has taught:  \n- College students as a professor across a semester  \n- In person professional learners at RStudio::conf in 1-2 day workshops  \n- Digital Learners in Pharma/Finance/etc via shorter online workshops  \n\nTo summarize her post:  \n\n1. **Make it. Make it again.** - Show how knitting works throughout the process.  \n2. **Make it pretty** - Engage your learners with visuals, tables, etc - motivation is key!  \n3. **Make it snappy** - Get a shareable link the first 20 min (usually via Netlify Drop).  \n4. **Make it real** - \"Teach folks what they need to know to actually use the tool productively in real life.\"  \n5. **Make it easy** - \"People will only keep using R Markdown if they see it making their life easier. So show them how. For example, the RStudio IDE has some very nice built-in features that make it much easier to be an R Markdown user.\"\n\nAgain - GO READ her [blogpost](https://alison.rbind.io/post/2020-05-28-how-i-teach-r-markdown/) for additional links and guides she links to.\n\nMy blogpost below is meant to be a sister article to hers, framed with a similar approach we use in Customer Success but different in that we're not doing as much long-form education. Alison's approach is well-informed and very useful in the context of direct teaching activity, which is why I wanted to share it as well!\n\n## How I **share knowledge** around R Markdown\n\nI work on a different team than Alison at RStudio, specifically I'm a Customer Success Manager. This means that I work with existing RStudio Pro Product customers, most often people who have RStudio Connect. I work exclusively with High Tech/Software customers, meaning that they are typically *already* doing very sophisticated work with R in production, and I'm helping them further eliminate friction or empower their data science teams to do more with R.\n\nA core part of my job is **knowledge sharing** around how to use open-source software like R Markdown with or without our Pro Products. Thus most of my work is **Strategic** in nature, although I do often give shorter 30-60 min training sessions that are **Tactical**. \n\n> A **strategy** is a set of guidelines used to achieve an overall objective, whereas **tactics** are the specific actions aimed at adhering to those guidelines. [Source: Wikipedia](https://en.wikipedia.org/wiki/Tactic_(method))\n\nThus my usual framing is covering topics that inform the learner of new strategies (ways of solving a problem) without necessary having to teach all the tactics (nuts and bolts of how it all works).\n\nThis post will focus on 4 core strategies of why R Markdown is *SO* useful and absolutely worth learning with links to external tactics/guides/write-ups of how to accomplish the various tasks.\n\n---\n\n![Cat reading a military strategy book](https://media.giphy.com/media/NFA61GS9qKZ68/giphy.gif)\n\n## R Markdown for Literate Programming\n\n**Goal**: Capture code, text/comments, and output in a single document\n\nThis is the most common use of R Markdown, and is often how it is taught in University coursework. R Markdown is a tool for [Literate Programming](https://en.wikipedia.org/wiki/Literate_programming), and in summary is:\n\n> A programming paradigm introduced by Donald Knuth in which a computer program is given an explanation of its logic in a natural language, such as English, interspersed with snippets of macros and traditional source code, from which compilable source code can be generated.\n\n### Not *just* for R\n\nR Markdown obviously has rich support for R-based code and data products, but did you know it also supports:  \n- Native [`Python`](https://bookdown.org/yihui/rmarkdown/language-engines.html) or calling `Python` from R via [`reticulate`](https://rstudio.github.io/reticulate/articles/r_markdown.html)  \n- `SQL` - [Blog post by Irene Steves](https://irene.rbind.io/post/using-sql-in-rstudio/)  \n- [CSS](https://bookdown.org/yihui/rmarkdown-cookbook/html-css.html) or [`JavaScript`](https://livefreeordichotomize.com/2017/01/24/custom-javascript-visualizations-in-rmarkdown/) for all sorts of customization  \n- As well as Bash, Rcpp, Stan, and other formats  \n- All together there are 52(!) possible language engines coming from `knitr`  \n\n### MVP of [Reproducibility](https://datacarpentry.org/rr-intro/02-toolkit/)\n\nWhether you talk about **M**inimum **V**iable **P**roduct or **M**ost **V**aluable **P**layer, it works! Since R Markdown is a form of Literate Programming, you can write all of your comments, notes, and execute your code within it.\n\n- R Markdown **HAS** to run successfully to save/knit the output  \n- R Markdown is self-documenting (the code is embedded)  \n- The code is `diffable` and easily human readable in version control  \n- Self-contained workspace\n\n### Exploratory Data Analysis \n\nAn example here is for Dave Robinson's `#TidyTuesday` [screencasts](https://www.youtube.com/user/safe4democracy/playlists) + [code](https://github.com/dgrtwo/data-screencasts)  \n\n- Dave uses R Markdown to explore a brand new dataset each week, capturing his comments and train of thought as he tests the data, performs basic analyses, and moves towards a modeling or deliverable data product\n  \n\n---\n\n![Man plotting an upward curve](https://media.giphy.com/media/3og0IExSrnfW2kUaaI/giphy.gif)\n\n## R Markdown as a Data Product\n\n**Goal**: Generate output natively in R for consumption\n\n\nThis is typically the second most common use of R Markdown. Since R Markdown can `knit` to all sorts of different formats, it is a powerful tool for creating data products like:\n\n### [Presentations](https://bookdown.org/yihui/rmarkdown/presentations.html)  \n  - Powerpoint  \n  - Web-formats - `xaringan` (`remark.js`)  \n  - LateX formats - Beamer  \n  \n### [Dashboards](https://rmarkdown.rstudio.com/flexdashboard/) with `flexashboard`  \n  - Lets you quickly build beautiful dashboards with either static or reactive components\n  \n### [Reports](https://bookdown.org/yihui/rmarkdown/html-document.html)  \n  - Supports HTML Documents, PDF, Word and many others  \n  \n### [Entire Websites](https://bookdown.org/yihui/rmarkdown/websites.html)  \n  - [`blogdown`](https://bookdown.org/yihui/blogdown/) for easily extensible custom websites or blogs  \n  - [`distill`](https://rstudio.github.io/distill/) for scientific writing, native to the web (this website is built in `distill`)   \n  \nMost importantly these formats are created with code, so you get the benefit of reproducibility, automation, etc while still generating data products in the format your non-coder colleagues expect.\n\n\n---\n\n![Child operating mission control](https://media.giphy.com/media/QmV0qTbokfmDK/giphy.gif)\n\n## R Markdown as a Control Document\n\n**Goal**: Scale data science tasks, automate the boring stuff, create robust pipelines\n\n\nLess widely known, but just as important is the idea of R Markdown as a meta-document that lets you bring in other code or automate processes.\n\nAs it's much larger in scope than a single bullet point I'd recommend going to read Emily Riederer's blog post on [Rmarkdown Driven Development](https://emilyriederer.netlify.app/post/rmarkdown-driven-development/). It's \"an approach of using R Markdown within the larger scope of the [analysis engineering](https://peerj.com/preprints/3210/) concept\" presented by Hilary Parker.\n\nA brief summary of her blogpost:\n\n> I tend to think of each RMarkdown as having a “data product” (an analytical engine calibrated to answer some specific question) nestled within it. Surfacing this tool just requires a touch of forethought before beginning an analysis and a bit of clean-up afterwards.\n> \n> In this post, I describe RMarkdown Driven Development: a progression of stages between a single ad-hoc RMarkdown script and more advanced and reusable data products like R projects and packages. This approach has numerous benefits.\n\n### Automation w/ parameters\n- Parameters are data passed to the R Markdown document to generate new outputs from the same code.  \n- An example here is generating a report for all 50 US states.  \n  - Rather than writing 50 reports manually, you can pass a parameter of `state` to the R Markdown report and render 50x reports at once!  \n  - The input R Markdown is always the same, but you pass each state as a parameter programatically to generate a new report for EACH state with it's data.  \n- [Paramaterized reports](https://bookdown.org/yihui/rmarkdown/parameterized-reports.html)  \n- [Parameterized report cookbook](https://bookdown.org/yihui/rmarkdown-cookbook/parameterized-reports.html)  \n- [Parameterized Reports site](https://rmarkdown.rstudio.com/developer_parameterized_reports.html%23parameter_types%2F)  \n\n### Child Documents\n- Child documents allow you to bring in OTHER RMarkdown code/documents into a parent, meaning you can use the parent document as a meta-document referencing code/outputs in other documents.  \n  - This can greatly help with the flow/size of a single document and you can essentially modularize portions of the document.\n  - It's worth noting that you should read Emily's post above on building up a robust R Markdown workflow.\n  - [Child Documents](https://bookdown.org/yihui/rmarkdown-cookbook/child-document.html)  \n  - [Child Documents - Yihui's Blog](https://yihui.org/knitr/demo/child/)  \n\n### [RMarkdown for Emails](https://github.com/rich-iannone/blastula) w/ `blastula`  \n- While this is technically a data-product, because it is generating an email I'm putting it as a Control Document. The short of this is that `blastula` provides a framework to generate HMTL emails from R Markdown, which are then sent by an email server or RStudio Connect.\n  - This [Blastula Webinar](https://rstudio.com/resources/webinars/avoid-dashboard-fatigue/) covers a lot of the use cases, all with code and real-life applications\n\n### R Markdown + RStudio Connect as an execution engine  \n- R Markdown is a first-class citizen on RStudio Connect, and you can interactively generate new reports based on parameters, or schedule R Markdown documents to re-execute documents on a schedule.  \n\n- Code for [ETL](https://solutions.rstudio.com/examples/apps/output-file-etl/) - an example of an ETL process through an automated R Markdown report, this could query against a SQL database or a `spark` cluster to process ETL jobs, all on a schedule down to the minute or up to a year.  \n- [Scheduled reporting](https://solutions.rstudio.com/examples/scheduling/scheduling/) - maybe your boss needs a report built every Monday? You can do that too - pulling in new data and re-generating a report on a specific time-schedule all with no need for human intervention. \n- [Emailing w/ `blastula`](https://solutions.rstudio.com/examples/blastula/conditional-example/) - maybe your boss is too busy to consume a full report every day - send a conditional email directly to them if a specific number is hit or missed all with code in R! This email could is built with R Markdown, and could contain plots, tables, raw data, or attach ANY R Markdown-based document (so... basically anything).  \n\n---\n\n![Gif of a machine creating jelly rolls](https://media.giphy.com/media/L7TQTflWNF1YI/giphy.gif)\n\n## RMarkdown for Templating\n\n**Goal**: Don't repeat yourself, generate **input** templates or **output** documents from code.\n\n\nUsing R Markdown for templating is normally thought of for `knitr::render()` + parameters, but there's additional techniques to solve specific problems that don't fit neatly into paramaterized reports as well.\n\n###  [Knitting w/ `knit::render()`](https://rmarkdown.rstudio.com/docs/reference/render.html)  \n- This is the first step towards using a template, and lets you generate R Markdown outputs programatically with code. It can be coupled with parameters or with other arguments for outputs locations, etc.\n\n### Looping outputs \n- This is really still focused at data products, but programmatically building up portions WITHIN a document.\n  - In this example, I'm taking a single function and using `purrr::walk()` to generate new outputs from a template within the R Markdown report.\n  - Note that for the chunk that outputs the repeated portions, you have to set `results=\"asis\"` in the chunk option.\n\nMinimal example below with the [`palmerpenguins` dataset](https://github.com/allisonhorst/palmerpenguins). Full copy-pastable code at: [https://git.io/JJBcC](https://git.io/JJBcC).\n\nNote that I'm writing one function and calling it `n` times, it would loop across all the data based on the different inputs.\n\n````\n---\noutput: html_document\n---\n  \n  \n```{r penguin function, echo=FALSE, message=FALSE}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nlibrary(glue)\npenguins <- palmerpenguins::penguins\nmultiplot <- function(penguin_name){\n  cat(glue::glue(\"  \\n### {penguin_name}  \\n  \\n\"))\n  df_pen <- penguins %>% \n    filter(as.character(species) == penguin_name) %>% \n    na.omit()\n  \n  flipper_len <- df_pen %>% \n    summarize(mean = mean(flipper_length_mm)) %>% \n    pull(mean) %>% \n    round(digits = 1)\n  \n  bill_len <- df_pen %>% \n    summarize(mean = mean(bill_length_mm)) %>% \n    pull(mean) %>% \n    round(digits = 1)\n  \n  cat(\n    glue::glue(\"There are {nrow(df_pen)} observations of {penguin_name} penguins. The average flipper length is {flipper_len} and the average bill length is {bill_len}.  \\n\")\n  )\n  \n  plot_out <- df_pen %>% \n    ggplot(aes(x = bill_length_mm, y = flipper_length_mm)) +\n    geom_point() +\n    labs(x = \"Bill Length\", y = \"Flipper Length\", title = penguin_name)\n  \n  print(plot_out)\n  \n  cat(\"  \\n  \\n\")\n}\n```\n\n```{r loop output,fig.width=6,echo=FALSE,message=FALSE,results=\"asis\"}\npurrr::walk(unique(as.character(penguins$species)), multiplot)\n```\n\n<!-- https://git.io/JJBcC -->\n````\n\nWhich generates the following document:\n\n![Loop Output in RMD](palmer-penguins.png)\n  \n### [whisker](https://github.com/edwindj/whisker)  \n  - `whisker` is a templating engine for R conforming to the Mustache specification.  \n  - It uses `glue` style syntax to add data to templates either in memory or to an output file, where my mental model is it is `glue` for documents rather than strings.  \n  - You can include templates from all sorts of inputs, like R files, R Markdown, markdown or plain text.  \n  - These templates can be local directories, or stored in the [`inst`](https://r-pkgs.org/inst.html) directory of an R package.  \n  - Lastly, these can also generate outputs in the same format, eg you can create templates/outputs for R, R Markdown or other plain-text formats!\n  \nMinimal `whisker` example below:\n\nFirst, some input data:\n```\ndata <- list(\n  name = \"Chris\", \n  value = 10000, \n  taxed_value = 10000 - (10000 * 0.4), \n  in_ca = TRUE\n)\n\n```\n\nThen a template:\n\n```\ntemplate <-\n'Hello {{name}}\nYou have just won ${{value}}!\n{{#in_ca}}\nWell, ${{taxed_value}}, after taxes.\n{{/in_ca}}'\n```\n\nNow, fill the template!\n\n```\ntext <- whisker.render(template, data)\ncat(text)\n```\n\n```\n# Output\nHello Chris\nYou have just won $10000!\nWell, $6000, after taxes.\n```\n\nI use `whisker` natively to generate the readme files for each week's `#TidyTuesday` submission. Separate blog-post to come for that!\n\n### `usethis::use_template()`\n\n- Alternatively to natively using `whisker` [usethis::use_template()](https://usethis.r-lib.org/reference/use_template.html) provides a more ready to use function, and uses `whisker` internally.\n  - `use_template()` Used as the engine for a templating function in other packages. \n\nSharla Gelfand, the \"Queen of Reproducible Reporting\", put together lots of material using the `usethis::use_template()` workflow in their work.\n\n- [Sharla Gelfand's `use_template()` blogpost](https://sharla.party/post/usethis-for-reporting/)  \n  - In short, they turned an annual report from a mess of copy-pasting and manual work into a fast, streamlined, reproducible, and easily repeatable workflow using R, R Markdown, and `usethis::use_template()`.  \n  - [Recording](https://rstudio.com/resources/rstudioconf-2020/don-t-repeat-yourself-talk-to-yourself-repeated-reporting-in-the-r-universe/) of their presentation on the same topic  \n  - [Slides](https://sharstudioconf.netlify.app/) for that presentation.  \n\n\n### Fin\n\nSo that's an overview of my approach to **sharing knowledge** around R Markdown, and like Alison said:\n\n> But remember: there is no one way to learn R Markdown, and no one way to teach it either. I love seeing the creativity of the community when introducing the R Markdown family - so keep them coming!\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS Monterey 12.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-04-28\n pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n quarto   0.9.294 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}