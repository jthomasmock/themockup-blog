{
  "hash": "deb0e6af378148a6e6097d7d4e6e106a",
  "result": {
    "markdown": "---\ntitle: \"Adding session info to blog posts\"\ndescription: |\n  A snapshot of your code state\nauthor: Thomas Mock\ndate: 04-18-2022\ncategories:\n  - meta\n  - quarto\nimage: preview.png\nimage-alt: \"A polaroid camera sitting lens up in a pile of fallen brown leaves\"\n---\n\n## Adding session info\n\nSession info in R has lots of useful information on the state of your working environment at the moment you were coding. While tools such as [`renv`](https://rstudio.github.io/renv/articles/renv.html) or `packrat` can help you create project-specific libraries, `sessionInfo()` at least lets you capture the basic environment details. I'm not wanting to create project-specific libraries, but I'm rather wanting to share a nicely formatted output of my environment metadata.[Put another way, `{renv}` can be useful for someone (including yourself) to revert back to the specific package environment, whereas the session info simply _returns_ the basic environment info. For a blogpost, I don't imagine others trying to match to exact package environments, but rather confirm that their package environment is \"similar enough\".]{.aside}\n\nWe can create and capture the session details like so:\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_sesh <- sessionInfo()\n\nbase_sesh\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.1.1 (2021-08-10)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Monterey 12.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] emo_0.0.0.9000    lubridate_1.8.0   here_1.0.1        digest_0.6.29    \n [5] crayon_1.5.1      rprojroot_2.0.3   assertthat_0.2.1  jsonlite_1.8.0   \n [9] magrittr_2.0.3    evaluate_0.15     rlang_1.0.2       stringi_1.7.6    \n[13] cli_3.2.0         rstudioapi_0.13   generics_0.1.2    rmarkdown_2.13   \n[17] rsthemes_0.3.1    tools_4.1.1       stringr_1.4.0     htmlwidgets_1.5.4\n[21] glue_1.6.2        purrr_0.3.4       yaml_2.3.5        xfun_0.30        \n[25] fastmap_1.1.0     compiler_4.1.1    htmltools_0.5.2   knitr_1.38.3     \n```\n:::\n:::\n\nSince `sessionInfo()` generates a list, we can explore it like a list or even inject new objects into it.\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_sesh |> \n  str(max.level = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 12\n $ R.version      :List of 14\n $ platform       : chr \"aarch64-apple-darwin20 (64-bit)\"\n $ locale         : chr \"en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\"\n $ running        : chr \"macOS Monterey 12.2.1\"\n $ RNGkind        : chr [1:3] \"Mersenne-Twister\" \"Inversion\" \"Rejection\"\n $ basePkgs       : chr [1:7] \"stats\" \"graphics\" \"grDevices\" \"utils\" ...\n $ loadedOnly     :List of 28\n $ matprod        : chr \"default\"\n $ BLAS           : chr \"/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/lib/libRblas.0.dylib\"\n $ LAPACK         : chr \"/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/lib/libRlapack.dylib\"\n $ system.codepage: chr \"NULL\"\n $ codepage       : chr \"NULL\"\n - attr(*, \"class\")= chr \"sessionInfo\"\n```\n:::\n:::\n\nFor example, I can inject my current version of the `quarto` CLI into the session info.\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_sesh$quarto <- system(\"quarto -V\", intern = TRUE)\n\nbase_sesh |>\n  str(max.level = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 13\n $ R.version      :List of 14\n $ platform       : chr \"aarch64-apple-darwin20 (64-bit)\"\n $ locale         : chr \"en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\"\n $ running        : chr \"macOS Monterey 12.2.1\"\n $ RNGkind        : chr [1:3] \"Mersenne-Twister\" \"Inversion\" \"Rejection\"\n $ basePkgs       : chr [1:7] \"stats\" \"graphics\" \"grDevices\" \"utils\" ...\n $ loadedOnly     :List of 28\n $ matprod        : chr \"default\"\n $ BLAS           : chr \"/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/lib/libRblas.0.dylib\"\n $ LAPACK         : chr \"/Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/lib/libRlapack.dylib\"\n $ system.codepage: chr \"NULL\"\n $ codepage       : chr \"NULL\"\n $ quarto         : chr \"0.9.294\"\n - attr(*, \"class\")= chr \"sessionInfo\"\n```\n:::\n:::\n\nWe've now captured a lot of useful session info and even injected a new item, so that we can remember what version of the Quarto CLI I was using.\n\n## `sessioninfo` package\n\nAn alternative to using `utils::sessionInfo()` would be to use the `sessioninfo` package. Per the [package docs](https://r-lib.github.io/sessioninfo/):\n\n> Query and print information about the current R session. It is similar to `utils::sessionInfo()`, but includes more information about packages, and where they were installed from.\n>\n> ### Differences from `utils::sessionInfo()`\n>\n> -   Additional platform details: time zone, pandoc version, RStudio version, etc.\n> -   Information about package sources, e.g. GitHub repo and hash for packages installed from GitHub.\n> -   Highlight package installation problems, e.g. if the loaded and on-disk versions are different, if the MD5 checksum of the package DLL is wrong, etc.\n> -   Highlight packages from unusual sources.\n> -   Information about external software via `external_info()`.\n> -   Information about the Python configuration is the reticulate package is loaded and configured.\n> -   Information about package libraries.\n> -   Compare two session info outputs with the `session_diff()` function.\n> -   Option to show loaded (default), attached or installed packages, or the recursive dependencies of the specified packages.\n\n:::{.callout-note}\n\nNote that I'm really only interested in the session info and which packages were attached (ie via `library(pkgname)`), so I'll use the `pkgs = \"attached\"` argument. This flexibility is nice!\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sessioninfo)\nsession_info(pkgs = \"attached\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.1.1 (2021-08-10)\n os       macOS Monterey 12.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-04-26\n pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.1.1)\n\n [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\nNow while information such as this is very useful for attaching to things like a `reprex`, it can also be useful to include for testing purposes or for \"posterity\" when rendering a document or writing a blogpost.\n\n### Adding to `sessioninfo`\n\nLet's also note one more thing - again I'd like to record the Quarto version, since I'm relying on `quarto` for rendering my blog. We can \"inject\" the `quarto` version and path to the `sessioninfo` list object. [I did go ahead and submit a [feature request](https://github.com/r-lib/sessioninfo/issues/75) on the `sessioninfo` repo - maybe `quarto` info will be incorporated into `sessioninfo` in the near future!]{.aside}\n\n::: {.cell}\n\n```{.r .cell-code}\n# save the session info as an object\npkg_sesh <- session_info(pkgs = \"attached\")\n\n# get the quarto version\nquarto_version <- system(\"quarto --version\", intern = TRUE)\n\n# inject the quarto info\npkg_sesh$platform$quarto <- paste(\n  system(\"quarto --version\", intern = TRUE), \n  \"@\", \n  quarto::quarto_path()\n  )\n\n# print it out\npkg_sesh\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.1.1 (2021-08-10)\n os       macOS Monterey 12.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-04-26\n pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n quarto   0.9.294 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.1.1)\n\n [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\nThat's looking good!\n\n## Include in docs\n\nNow to add it to the end of our document, we can use a quick HTML `<details>` tag. This creates a small expandable section. We can also change the title of with the use of a `<summary>` tag. We can add this to all of our documents/blogposts and capture\n\n````code\n<details><summary>Session Info</summary>\n\n```{{r, echo = FALSE}}\nlibrary(sessioninfo)\n# save the session info as an object\npkg_sesh <- session_info(pkgs = \"attached\")\n\n# get the quarto version\nquarto_version <- system(\"quarto --version\", intern = TRUE)\n\n# inject the quarto info\npkg_sesh$platform$quarto <- paste(\n  system(\"quarto --version\", intern = TRUE), \n  \"@\", \n  quarto::quarto_path()\n  )\n\n# print it out\npkg_sesh\n```\n\n</details>\n\n````\n\nWhich generates something like the below (again note that you need to expand this `<details>` tag by clicking on it):\n\n---\n\n<details><summary>Session Info</summary>\n\n<div style='font-size:12px;'>\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.1.1 (2021-08-10)\n os       macOS Monterey 12.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-04-26\n pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n quarto   0.9.294 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.1.1)\n\n [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n</div>\n\n</details>\n\n### Quarto-native callouts\n\nQuarto itself adds the ability to create [boostrap-style callouts](https://quarto.org/docs/authoring/callouts.html) and collapsible callouts, so we can simplify our code a bit:\n\n````code\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n```{{r, echo = FALSE}}\nlibrary(sessioninfo)\n# save the session info as an object\npkg_sesh <- session_info(pkgs = \"attached\")\n\n# get the quarto version\nquarto_version <- system(\"quarto --version\", intern = TRUE)\n\n# inject the quarto info\npkg_sesh$platform$quarto <- paste(\n  system(\"quarto --version\", intern = TRUE), \n  \"@\", \n  quarto::quarto_path()\n  )\n\n# print it out\npkg_sesh\n```\n\n:::\n\n````\n\nWhich will return a colored callout like below:\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.1.1 (2021-08-10)\n os       macOS Monterey 12.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-04-26\n pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n quarto   0.9.294 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.1.1)\n\n [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::\n\n## Closing Notes\n\nIf you want to see some examples of this in action on other blogs, check out:\n\n- [TJ Mahr's `_footer.Rmd`](https://github.com/tjmahr/tjmahr.github.io/blob/master/_R/_footer.Rmd)\n- [Danielle Navarro's `appendix.R`](https://github.com/djnavarro/quarto-blog/blob/main/posts/2022-04-20_porting-to-quarto/appendix.R)\n\nTJ also uses `sessioninfo::session_info()` while Danielle takes it a step further and generates a full `{renv}` lockfile.\n\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.1.1 (2021-08-10)\n os       macOS Monterey 12.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-04-26\n pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n quarto   0.9.294 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.1.1)\n\n [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}