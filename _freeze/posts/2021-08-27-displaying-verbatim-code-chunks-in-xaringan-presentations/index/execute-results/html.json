{
  "hash": "32fdda168e51330a4dd34b068ad732b5",
  "result": {
    "markdown": "---\ntitle: \"Displaying verbatim code chunks in RMarkdown and Xaringan presentations\"\ndescription: |\n  Because the best way to teach RMarkdown is with RMarkdown.\nauthor: Thomas Mock\ndate: 08-27-2021\nimage: preview.png\ncategories:\n  - meta\n  - xaringan\n  - rmarkdown\n---\n\n\n\n\nThis will be a short article, but I wanted to note it for my own future use and hopefully a discoverable resource if folks get stuck trying to do the same thing!\n\n:::{.callout-tip}\n## New `{knitr}` verbatim options\nAlso note that since I originally published this article in `2021-08-27`, `{knitr} v1.37` introduced new options for `verbatim`, `comment` and `asis` chunks. See the full examples in the [`knitr` News](https://github.com/yihui/knitr/blob/master/NEWS.md#new-features-1). They may make this article obsolete!\n\nThe last option that `knitr` recently introduced was the concept of curly-curly (ie `{{r}}`) verbatim code. This is by far one one of my favorite options! See it expanded upon in this [`knitr` Issue](https://github.com/yihui/knitr/issues/2040).\n\n:::\n\nBack to the original blogpost!\n\nI recently gave a presentation on Advanced RMarkdown use, and part of what I was displaying in my RMarkdown generated `{xaringan}` slides was literal RMarkdown code chunks. These verbatim code chunks are very useful and in some cases *necessary* to accurately convey a teaching example.\n\n<iframe width=\"800\" height=\"450\" src=\"https://www.youtube.com/embed/WkF7nqEYF1E\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n\n---\n\nNotably, while these verbatim code chunks are extremely useful some difficulty can arise as you're essentially nesting R and RMarkdown code/logic _inside_ a RMarkdown document. In order to \"tell\" RMarkdown to ignore the code and simply print it out verbatim you need to use a few different techniques.\n\nMore details can be found in the [RMarkdown Cookbook](https://bookdown.org/yihui/rmarkdown-cookbook/verbatim-code-chunks.html).\n\n## Verbatim Code Chunks\n\nThe primary problem here is we need to \"tell\" RMarkdown not to parse the RMarkdown code chunk as _real_ code. So we need to account for the 3x backticks that make up an R code chunk as seen below.\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n````\n```{r, echo = TRUE}\n...code_goes_here...\n```\n````\n:::\n:::\n\n### `cat()` to the rescue\n\nYou can use `cat()` to output specific code chunks verbatim as raw text. This can be very fast, but requires you to write code by hand in text.\n\n::: {.cell}\n\n```{.r .cell-code}\noutput_code <-\n\"````\n```{r, eval=TRUE}`r ''`\nlibrary(dplyr)\nmtcars %>% \n  group_by(cyl) %>% \n  summarize(n = n(), mean = mean(mpg))\n```\\n````\"\n\ncat(output_code)\n```\n\n::: {.cell-output .cell-output-stdout}\n`````\n````\n```{r, eval=TRUE}`r ''`\nlibrary(dplyr)\nmtcars %>% \n  group_by(cyl) %>% \n  summarize(n = n(), mean = mean(mpg))\n```\n````\n`````\n:::\n:::\n\n\n### We need more backticks captain!\n\nTo return unevaluated verbatim code chunks code you need N + 1 of the max backticks, so for RMarkdown chunks that have 3x backticks, you need to wrap it in 4x backticks on either side of the code.\n\nYou _also_ need to invalidate the code chunk by adding a blank `r ''` to the _end_ of the existing code chunk (ie immediately after the `{r}` like so:\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n````\n```{r}`r''`\n...code_goes_here...\n```\n````\n:::\n:::\n\nAs a code example I can wrap my code in 4x backticks around the 3x backticks, also note the invalidated `r` expression after the `{r}`.\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n`````\n````\n```{r}`r ''`\nlibrary(dplyr)\nmtcars %>% \n  group_by(cyl) %>% \n  summarize(n = n(), mean = mean(mpg))\n```\n````\n`````\n:::\n:::\n\nThat rendered inside RMarkdown outputs:\n\n````\n```{r}\nlibrary(dplyr)\nmtcars %>% \n  group_by(cyl) %>% \n  summarize(n = n(), mean = mean(mpg))\n```\n\n````\n\nHowever you may notice that there's no grey `code` background for the code chunk. To format it, we can also add the code type to the end of the 4x backticks for formatting purposes. I have a panelset of some of the various code types appended to the 4x backticks below. This affects some highlighting of specific functions/strings/etc in the code as well.\n\nA note here is that my blog is written in `{distill}`, so what you see here is not identical to `{xaringan}` which is built on `remark.js`. As such, I've included the `{distill}` output below, and after that another embedded version of a minimal `{xaringan}` presentation. In `{xaringan}` there is also the `highlightStyle` argument in the YAML which allows for a lot of customization of the code chunk/code/comments colors. The various options for this argument are at the bottom of the [`remark.js` wiki](https://github.com/gnab/remark/wiki/Configuration).\n\n### `{distill}` output\n\n<!-- begin panelset -->\n\n::: {.column-page-inset}\n\n::: {.panel-tabset}\n\n## Blank\n\nAdd nothing to end of 4x backticks\n\n`````\n\n````\n````\n\n`````\n\nWhich returns code formatted like the below:\n\n\n\n````\n```{r}\n# load library\nlibrary(dplyr)\n\n# Execute code\nmtcars %>% \n  group_by(cyl) %>% \n  summarize(n = n(), mean = mean(mpg)) %>% \n  mutate(cyl_name = paste(cyl, \"Cylinders\"))\n```\n\n````\n\n<!-- end panel1 -->\n\n\n## `r`\n\nAdd the letter `r` to end of 4x backticks\n\n`````\n\n````r\n````\n\n`````\n\nWhich returns code formatted like the below:\n\n\n````r\n```{r}\n# load library\nlibrary(dplyr)\n\n# Execute code\nmtcars %>% \n  group_by(cyl) %>% \n  summarize(n = n(), mean = mean(mpg)) %>% \n  mutate(cyl_name = paste(cyl, \"Cylinders\"))\n```\n\n````\n\n<!-- end panel2 -->\n\n## `fortan`\n\nAdd `fortran` to the end of the 4x backticks\n\n`````\n\n````fortran\n````\n\n`````\n\nWhich returns code formatted like the below:\n\n\n\n````fortran\n```{r}\n# load library\nlibrary(dplyr)\n\n# Execute code\nmtcars %>% \n  group_by(cyl) %>% \n  summarize(n = n(), mean = mean(mpg)) %>% \n  mutate(cyl_name = paste(cyl, \"Cylinders\"))\n```\n\n````\n\n<!-- end panel3 -->\n\n## `markdown`\n\nAdd `markdown` or `md` to the end of the 4x backticks\n\n`````\n\n````markdown\n````\n\n`````\n\nWhich returns code formatted like the below:\n\n````markdown\n```{r}\n# load library\nlibrary(dplyr)\n\n# Execute code\nmtcars %>% \n  group_by(cyl) %>% \n  summarize(n = n(), mean = mean(mpg)) %>% \n  mutate(cyl_name = paste(cyl, \"Cylinders\"))\n```\n\n````\n\n<!-- end panel4 -->\n\n## `c`\n\nAdd the letter `c` to the end of the 4x backticks\n\n`````\n\n````c\n````\n\n`````\n\nWhich returns code formatted like the below:\n\n\n````c\n```{r}\n# load library\nlibrary(dplyr)\n\n# Execute code\nmtcars %>% \n  group_by(cyl) %>% \n  summarize(n = n(), mean = mean(mpg)) %>% \n  mutate(cyl_name = paste(cyl, \"Cylinders\"))\n```\n\n````\n\n<!-- end panel5 -->\n\n## `haskell`\n\nAdd `haskell` to the end of the 4x backticks\n\n`````\n\n````haskell\n````\n\n`````\n\nWhich returns code formatted like the below:\n\n\n````haskell\n```{r}\n# load library\nlibrary(dplyr)\n\n# Execute code\nmtcars %>% \n  group_by(cyl) %>% \n  summarize(n = n(), mean = mean(mpg)) %>% \n  mutate(cyl_name = paste(cyl, \"Cylinders\"))\n```\n\n````\n\n<!-- end panel6 -->\n\n## `python`\n\nAdd `python` to the end of the 4x backticks\n\n`````\n\n````python\n````\n\n`````\n\nWhich returns code formatted like the below:\n\n\n````python\n```{python}\n# load library and data\nimport pandas as pd\nimport statsmodels.api as sm\n\nmtcars = sm.datasets.get_rdataset(\"mtcars\", \"datasets\", cache=True).data\n\n# Execute code\n(mtcars\n  .groupby(['cyl'])\n  .agg(['count', 'mean']))\n```\n\n````\n\n<!-- end panel7 -->\n\n:::\n:::\n\n<!-- end panelset -->\n\n\n### Xaringan output\n\n::: {.cell}\n<iframe src=\"https://themockup.blog/static/slides/xaringan-ex.html\" width=\"672\" height=\"400px\" data-external=\"1\"></iframe>\n:::\n\n\n---\n\n\n## Add more complexity\n\nNow you can also embed essentially entire RMarkdown documents, including inline code. For inline code such as `'r 1 + 1'`, you'll need to use one more technique - also outlined in the [RMarkdown Cookbook](https://bookdown.org/yihui/rmarkdown-cookbook/verbatim-code-chunks.html#show-a-verbatim-inline-expression).\n\nTo display inline code like `r 1+1` you'll need to use `knitr::inline_expr('1+1')` which will convert the raw expression to the expected inline output of `r 1+1` before it's evaluated by RMarkdown.\n\nA meta example from the RMarkdown Cookbook:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncode = 'This will show a verbatim inline R expression `r knitr::inline_expr(\\'knitr::inline_expr(\"1+1\")\\')` in the output.'\n\ncat(code)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis will show a verbatim inline R expression `r knitr::inline_expr('knitr::inline_expr(\"1+1\")')` in the output.\n```\n:::\n:::\n\n\nWhich if used as code outputs:\n\n```md\nThis will show a verbatim inline R expression\n`r knitr::inline_expr(\"1+1\")` in the output.\n```\n\nWe can use a full example below.\n\n### Generate inline code\n\nTo generate the verbatim inline code we actually used:\n\n```md\nWe have data about `r knitr::inline_expr(\"nrow(penguins)\")` penguins.  Only \n`r knitr::inline_expr(\"nrow(penguins) - nrow(smaller)\")` are classified as\n`r knitr::inline_expr(\"params$species\")`. The distribution of the \n`r knitr::inline_expr(\"params$species\")` penguins are shown below:\n```\n\nWhich generated the code below:\n\n````md\n\nWe have data about `r nrow(penguins)`  penguins.  Only \n`r nrow(penguins) - nrow(smaller)` are classified as\n`r params$species`. The distribution of the \n`r params$species` penguins are shown below:\n\n````\n\n### All together now\n\nHere's YAML + code chunks + inline R expression, all in one code block!\n\n\n````md\n---\ntitle: \"Penguins\"\ndate: 2020-08-11\noutput: html_document\nparams:\n  species: Adelie\n---\n```{r setup, include = FALSE}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nsmaller <- penguins %>% \n  filter(species == params$species, \n         !is.na(body_mass_g))\n```\nWe have data about `r nrow(penguins)` penguins.  Only \n`r nrow(penguins) - nrow(smaller)` are classified as\n`r params$species`. The distribution of the \n`r params$species` penguins are shown below:\n\n```{r, echo = FALSE}\nsmaller %>% \n  ggplot(aes(body_mass_g)) + \n  geom_histogram(binwidth = 100)\n```\n````\n\n:::{.aside}\n\nMake sure to keep track of your back ticks as the code can stop looking like _\"real\"_ code after staring at for a while. I highly recommend checking yourself as you go, because if you miss a backtick it can be quite tricky to \"find the needle in the haystack\"...\n\n:::\n\nJust for fun, I've included a [link to the source code](https://gist.github.com/jthomasmock/771853602d5b15662a36eca237e2113d) for the above embedded RMarkdown so you can explore it.\n\nI also highly recommend exploring the [source code of the RMarkdown Cookbook](https://github.com/yihui/rmarkdown-cookbook/blob/master/05-formatting.Rmd) to figure out how they did all of their inline embedding.\n\n\n::: {.cell .column-column-page-inset}\n<iframe src=\"https://bookdown.org/yihui/rmarkdown-cookbook/verbatim-code-chunks.html#\" width=\"672\" height=\"800px\" data-external=\"1\"></iframe>\n:::\n\n\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS Monterey 12.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-05-11\n pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n quarto   0.9.387 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n quarto      * 1.1.0.9000 2022-04-26 [1] Github (quarto-dev/quarto-r@e06d096)\n sessioninfo * 1.2.2      2021-12-06 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}