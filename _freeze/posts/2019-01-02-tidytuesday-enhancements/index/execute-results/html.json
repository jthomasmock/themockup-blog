{
  "hash": "2876ea3051f3e4d08463323d0fca6751",
  "result": {
    "markdown": "---\ntitle: \"TidyTuesday enhancements\"\ndescription: |\n  Making #TidyTuesday better.\nauthor: Thomas Mock\ndate: 01-02-2019\nimage: https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/static/tt_logo.png\ncategories:\n  - TidyTuesday\n  - tidyverse\n  - Automation\n---\n\n\n\n::: {.cell}\n\n:::\n\n![](new_year.png)\n\nOne of my `#rstats` goals for 2019 was to make #TidyTuesday better, both from the experience on GitHub and the weekly posting for myself and for others.\n\nThe first thing I did for the project was to re-organize the GitHub repo, moving all the 2018 data into an archived folder and making a new 2019 folder to begin populating with new data! Additionally, with some help from [Philip Khor](https://twitter.com/philip_khor) via a pull-request - the GitHub repo is now full of relative (rather than absolute) paths to make life easier for anyone that forks the repo. \n\nI reorganized the [Useful Links](https://github.com/rfordatascience/tidytuesday/blob/master/README.md) section at the bottom of the repo to make it more succinct, adding a few more links including [Happy Git with R](https://happygitwithr.com/) by Jenny Bryan! If you are just getting started with GitHub and want to learn more about Git, GitHub, and using it from within RStudio - check out her resources!\n\n## Ways to contribute\n\nI'm always on the lookout for interesting datasets, and a way for you to contribute to TidyTuesday beyond a weekly post is submitting a dataset you find in the wild as an [Issue](https://github.com/rfordatascience/tidytuesday/issues) on the TidyTuesday repo. Please link to the dataset and add any additional info as to why you thought it was interesting or an article/plot that corresponds to that data.\n\nI added the **Submitting Code Chunks** section directly to the readme doc. This is for some code, script, etc that you found useful when working with TidyTuesday. It's also a chance for a low-stress pull-request as that's how we will be adding code chunks! Please see the guide [here](https://github.com/rfordatascience/tidytuesday/blob/master/community_resources/code_chunks/readme.md) about the format to submit.\n\n## Improving my Weekly Tweet Submission Process\n\nI generally switched between a lot of tabs, eg GitHub, short links, manually adding pics, etc while getting the weekly post setup. I knew there was a way to at least partially automate this, so I looked into my options.\n\nThe `rtweet` package has a post to Twitter function via `rtweet::post_tweet()` which allows you to programmatically post tweets! However - to get where I wanted to be I had to add a few more things and do some interesting refactoring!\n\n# DISCLAIMER\n\nTo use `rtweet` for posting you will need to register a Twitter application - please see [Mike Kearney's](https://twitter.com/kearneymw) [great vignette](https://rtweet.info/articles/auth.html) on how to do this. \n\n::: {.cell}\n\n```{.r .cell-code}\n# Basic method of tweeting from rtweet vignette\n\npost_tweet(status = \"my first rtweet #rstats\", media = NULL,\n  token = NULL, in_reply_to_status_id = NULL, destroy_id = NULL,\n  retweet_id = NULL)\n```\n:::\n\n## My Weekly `#TidyTuesday` Tweet\n\nIf I simply wanted to post a tweet following the format for `#TidyTuesday` I could do something like the following.\n\n::: {.cell}\n\n```{.r .cell-code}\nrtweet::post_tweet(\"The @r4dscommunity welcomes you to Week 2 of #TidyTuesday! We're exploring data about *esoteric topic*!\n                   Data: link_to_data\n                   Article: link_to_article\",\n                   media = \"tt_logo.png\")\n```\n:::\n\nHowever this results in the following Tweet:\n\n![](wrong.png)\n\nThis is not exactly what I want... the text isn't aligned properly, I want more than 1 pic, and I really would prefer to use emoji to save characters over `Data:` and `Article:`.\n\nSo on to the next step!\n\nHadley Wickham has the [`emo`](https://github.com/hadley/emo) package which allows you to input various emoji into R/R Markdown. This package perfectly solves our emoji needs! I can use code like `emo::ji(\"folder\")` to get üìÅ or `emo::ji(\"news\")` to get üì∞! \n\nBut I still need to get my text aligned properly... So I broke some formatting rules for normal code, but it got the job done for this `rtweet` use! Basically, I forced the text to be fully left-aligned, added in some spacing where necessary, and used `paste0()` to get everything squished together in a coherent tweet (with multiple pics!).\n\n::: {.cell}\n\n```{.r .cell-code}\nrtweet::post_tweet(status = paste0(\n\"The @R4DScommunity welcomes you to week 2 of #TidyTuesday!  We're exploring *esoteric topic*!\n \n\",\n        emo::ji(\"folder\"),\n        \" http://bit.ly/tidyreadme\n\",\n        emo::ji(\"news\"),\n        \" http://cool.article.com\n\n#r4ds #tidyverse #rstats #dataviz\"),\n\n# The below code is relative to my project\n# You need to specify path to the images for tweeting\n\n        media = c(\"tt_logo.png\",\n                  \"tt_rules.png\")\n        )\n```\n:::\n\n![](right.png)\n\nThis is a great start! However, I want to make this a bit more robust, as I don't want to edit it all by hand, when I can generate it programmatically. Refactoring code is always an adventure, so let's take a look at our code to see what is static and what changes.\n\n### Mix of static and dynamic:  \n- `The @r4dscommunity welcomes you to week {week} of #Tidy Tuesday`  \n- `We're exploring {data to explore}!`  \n- The link to the readme is static, but we change the link to an article.  \n- The logo and rules are always the same, but up to two additional pics are dynamic.  \n\nSo how do you generate dynamic and static text together? With [`glue`](https://github.com/tidyverse/glue) of course! The `glue` package glues strings together in R, and allows for interpreted strings with the use of `{}` for example `glue::glue(\"Glue is an {adjective} package!\")` where the `{adjective}` indicates an intepreted add-in. So if I had `adjective <- \"awesome\"` the string would print as `\"Glue is an awesome package!\"`.\n\nSince we are going to be linking local pics, I'm also using the [`here`](https://github.com/r-lib/here) package to make moving between folders in my project easier. My folder is organized like so:\n`TidyTuesday/2019/2019-01-08/`. \n\nSo I can use `here::here(\"2019\", \"2019-01-08\", \"pic1.png\")` to get the file directory for `pic1.png`. Since the date `2019-01-08` changes each week, I will also add it as a variable to define.\n\nAnyway, back to refactoring.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dynamic Variables\nweek_num <- 2\nexploring <- \"Esoteric data!\"\nshort_link <- \"http://bit.ly/WHATEVER\"\nweek_date <- \"2019-01-08\"\n\n# Static framework\nrtweet::post_tweet(status = glue::glue(\n\"The @R4DScommunity welcomes you to week {week_num} of #TidyTuesday!  We're exploring {exploring}!\n \n\",\n        emo::ji(\"folder\"),\n        \" http://bit.ly/tidyreadme\n\",\n        emo::ji(\"news\"),\n        \" {short_link}\n\n#r4ds #tidyverse #rstats #dataviz\"),\n# The below code is relative to my project\n# You would need to specify path to the images for tweeting\n        media = c(here::here(\"static_img\", \"tt_logo.png\"),   # I have two static pics\n                  here::here(\"static_img\", \"tt_rules.png\"),  # so they go in /static\n                  here::here(\"2019\", week_date, \"pic1.png\"), # notice I have week_date\n                  here::here(\"2019\", week_date, \"pic2.png\")  # here instead of 2019-01-01\n        ))\n```\n:::\n\nNow this will generate the correctly formatted tweet, include the correct additional pictures and text, but more importantly the use of `glue` and `here` means I can define the dynamic portions at the top and leave the static body the same.\n\nHowever, we can refactor things further! \n\nWe can refactor to a function AND since I only post these tweets on the Monday before `#TidyTuesday`, I can build variable dates into the function. Really the only thing I need to manually change is **`what data we are exploring`** and **`the short article link`**.\n\nBefore we get into the function, I am using a number of packages for my ease.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Packages used in this script\nlibrary(rtweet) # For Tweeting\nlibrary(glue) # For interpretation inside strings\nlibrary(emo) # For emojis!\nlibrary(lubridate) # Working with date-times\nlibrary(here) # Easier file navigation inside projects\nlibrary(purrr) # for pluck - I'm lazy. :shrug:\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Only two inputs!\n# exploring = what we are exploring in text\n# short_link = the article link\n\npost_tidytuesday <- function(exploring, short_link){\n        \n        # set date for files structure and names\n        week_date <- as.character(lubridate::today() + 1)\n        \n        # Today's date + 1 = tomorrow\n        # Then time diff between tomorrow and 1st tidytuesday in number of weeks\n        week_num <- as.numeric((lubridate::today() + 1) - lubridate::ymd(20190101))/7 + 1\n        \n        # post the tweet with fill\n        rtweet::post_tweet(status = glue::glue(\n                \"The @R4DScommunity welcomes you to week {week_num} of #TidyTuesday!  We're exploring {exploring}!\n \n\",\n                emo::ji(\"folder\"),\n                \" http://bit.ly/tidyreadme\n\",\n                emo::ji(\"news\"),\n                \" {short_link}\n\n#r4ds #tidyverse #rstats #dataviz\"),\n                \n                # The below code is relative to my project\n                # You need to specify path to the images for tweeting\n                media = c(here::here(\"static_img\", \"tt_logo.png\"),\n                          here::here(\"static_img\", \"tt_rules.png\"),\n                          here::here(\"2019\", week_date, \"pic1.png\"),\n                          here::here(\"2019\", week_date, \"pic1.png\")\n                ))    \n}\n```\n:::\n\nNow we have a nice function and when I want to post on Monday morning, I can just do the following! \n\n::: {.cell}\n\n```{.r .cell-code}\npost_tidytuesday(\n  exploring = \"Esoteric data!\",\n  short_link = \"http://bit.ly/tidy_post\"\n)\n```\n:::\n\nThe [link](https://github.com/rfordatascience/tidytuesday/blob/master/community_resources/code_chunks/tweet_tidytuesday.R) to GitHub for this code.\n\n### Package Links\n[`rtweet`](https://rtweet.info/)  \n[`glue`](https://github.com/tidyverse/glue)  \n[`emo`](https://github.com/hadley/emo)  \n[`lubridate`](https://lubridate.tidyverse.org/)  \n[`here`](https://github.com/r-lib/here)  \n[`purrr::pluck()`](https://purrr.tidyverse.org/reference/pluck.html)  \n\n## Step 2 (for next time)\n\nHow to improve YOUR `#TidyTuesday` process and get your code directly from RStudio into Carbon.now.sh for pretty \"screenshots\"!\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n‚îÄ Session info ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS Monterey 12.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-04-28\n pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n quarto   0.9.294 @ /usr/local/bin/quarto\n\n‚îÄ Packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n package     * version date (UTC) lib source\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}