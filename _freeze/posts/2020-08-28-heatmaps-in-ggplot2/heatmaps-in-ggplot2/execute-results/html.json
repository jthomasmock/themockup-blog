{
  "hash": "48b8177ccd8e121611ed8cbf6786fb01",
  "result": {
    "markdown": "---\ntitle: \"Heatmaps in ggplot2\"\ndescription: |\n  It's more than just a passing fad.\nauthor: Thomas Mock\ndate: 08-28-2020\ncategories:\n  - data visualization\n  - ggplot2\n  - tidyverse\n  - NFL\nimage: preview.png\n---\n\n\n\n\nMany thanks to [Ethan Douglas](https://twitter.com/ChiefsAnalytics) for sharing his heatmap python code on [OpenSource Football](https://www.opensourcefootball.com/posts/2020-08-22-nfl-pass-location-visualization/)! ^[Douglas (2020, Aug. 21). Open Source Football: NFL Pass Location Visualization. Retrieved from https://mrcaseb.github.io/open-source-football/posts/2020-08-22-nfl-pass-location-visualization/] This is a similar walkthrough to Ethan's post, but in R + `ggplot2`. Additionally, credit for both collecting the data and the original plot go to Ethan.\n\nPlease also note that the original code adapted from Ethan came from [Sarah Mallepalle et al, 2019](https://arxiv.org/abs/1906.03339). ^[https://arxiv.org/abs/1906.03339] Many thanks to Sarah, Ron, Konstantinos, and Sam for sharing this data collection tool!\n\n\n## Load Everything\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # all the things\nlibrary(ggExtra)   # marginal plots\nlibrary(ggtext)    # color your text\nlibrary(patchwork) # combine multiple plots\nlibrary(paletteer) # get all the color palettes\nlibrary(scales)    # helper functions from ggplot2\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsouce_url <- \"https://raw.githubusercontent.com/ArrowheadAnalytics/next-gen-scrapy-2.0/master/pass_and_game_data.csv\"\n\npass_map_df <- read_csv(souce_url) %>%\n  na.omit()\n\nglimpse(pass_map_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 37,408\nColumns: 42\n$ posteam          <chr> \"BAL\", \"BAL\", \"BAL\", \"BAL\", \"BAL\", \"BAL\", \"BAL\", \"BAL…\n$ week             <dbl> 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1…\n$ name             <chr> \"Joseph Flacco\", \"Joseph Flacco\", \"Joseph Flacco\", \"J…\n$ pass_type        <chr> \"COMPLETE\", \"COMPLETE\", \"COMPLETE\", \"COMPLETE\", \"COMP…\n$ x                <dbl> 1.4, 12.6, -11.1, 18.3, 9.6, -13.8, -4.4, 17.1, -20.0…\n$ y                <dbl> 2.0, -6.6, -0.1, 8.1, 1.9, 12.1, 6.8, -4.4, 2.3, 14.1…\n$ season           <dbl> 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017,…\n$ game_id          <chr> \"2017_12_HOU_BAL\", \"2017_12_HOU_BAL\", \"2017_12_HOU_BA…\n$ game_type        <chr> \"REG\", \"REG\", \"REG\", \"REG\", \"REG\", \"REG\", \"REG\", \"REG…\n$ gameday          <date> 2017-11-27, 2017-11-27, 2017-11-27, 2017-11-27, 2017…\n$ weekday          <chr> \"Monday\", \"Monday\", \"Monday\", \"Monday\", \"Monday\", \"Mo…\n$ gametime         <time> 20:30:00, 20:30:00, 20:30:00, 20:30:00, 20:30:00, 20…\n$ away_team        <chr> \"HOU\", \"HOU\", \"HOU\", \"HOU\", \"HOU\", \"HOU\", \"HOU\", \"HOU…\n$ away_score       <dbl> 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 1…\n$ home_team        <chr> \"BAL\", \"BAL\", \"BAL\", \"BAL\", \"BAL\", \"BAL\", \"BAL\", \"BAL…\n$ home_score       <dbl> 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 2…\n$ location         <chr> \"Home\", \"Home\", \"Home\", \"Home\", \"Home\", \"Home\", \"Home…\n$ result           <dbl> 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,…\n$ total            <dbl> 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 3…\n$ overtime         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ old_game_id      <dbl> 2017112700, 2017112700, 2017112700, 2017112700, 20171…\n$ away_rest        <dbl> 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,…\n$ home_rest        <dbl> 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,…\n$ away_moneyline   <dbl> 311, 311, 311, 311, 311, 311, 311, 311, 311, 311, 311…\n$ home_moneyline   <dbl> -357, -357, -357, -357, -357, -357, -357, -357, -357,…\n$ spread_line      <dbl> 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5, 7.5…\n$ away_spread_odds <dbl> -103, -103, -103, -103, -103, -103, -103, -103, -103,…\n$ home_spread_odds <dbl> -107, -107, -107, -107, -107, -107, -107, -107, -107,…\n$ total_line       <dbl> 39.5, 39.5, 39.5, 39.5, 39.5, 39.5, 39.5, 39.5, 39.5,…\n$ under_odds       <dbl> -102, -102, -102, -102, -102, -102, -102, -102, -102,…\n$ over_odds        <dbl> -108, -108, -108, -108, -108, -108, -108, -108, -108,…\n$ div_game         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ roof             <chr> \"outdoors\", \"outdoors\", \"outdoors\", \"outdoors\", \"outd…\n$ surface          <chr> \"grass\", \"grass\", \"grass\", \"grass\", \"grass\", \"grass\",…\n$ temp             <dbl> 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 5…\n$ wind             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ away_coach       <chr> \"Bill O'Brien\", \"Bill O'Brien\", \"Bill O'Brien\", \"Bill…\n$ home_coach       <chr> \"John Harbaugh\", \"John Harbaugh\", \"John Harbaugh\", \"J…\n$ referee          <chr> \"Brad Allen\", \"Brad Allen\", \"Brad Allen\", \"Brad Allen…\n$ stadium_id       <chr> \"BAL00\", \"BAL00\", \"BAL00\", \"BAL00\", \"BAL00\", \"BAL00\",…\n$ stadium          <chr> \"M&T Bank Stadium\", \"M&T Bank Stadium\", \"M&T Bank Sta…\n$ defteam          <chr> \"HOU\", \"HOU\", \"HOU\", \"HOU\", \"HOU\", \"HOU\", \"HOU\", \"HOU…\n```\n:::\n:::\n\n## Why not just plot the points?\n\nWhy even mess around with `heatmaps` or 2d density plots? Well, we run the risk of overplotting by graphing just the points without thinking or adjusting any of the aesthetics. \n\nHadley Wickham in [`ggplot2`: Elegant Graphics for Data Analysis](https://ggplot2-book.org/statistical-summaries.html#overplotting):  \n\n> When the data is large, points will be often plotted on top of each other, obscuring the true relationship. In extreme cases, you will only be able to see the extent of the data, and any conclusions drawn from the graphic will be suspect. This problem is called **overplotting**.\n\nHadley uses an example with just 2000 data points, which already has a lot of overplotting due to a small sample x-y space. We have about 43,000 passes for this dataset, spread out over a relatively large space. We still need to be careful of overplotting though!  \n\n:::{.aside}\n\n[Data to Viz](https://www.data-to-viz.com/caveat/overplotting.html) and [Clause Wilke](https://clauswilke.com/dataviz/overlapping-points.html) have good writeups on overplotting as well\n\n:::\n\n<details>\n<summary><strong>Claus Wilke | Fundamentals of Data Visualization^[https://clauswilke.com/dataviz/] </summary>  \n\nWhile it's not really focused on the problem at hand, Claus Wilke has a wonderful book on the *Fundaments of Data Visualization*. His chapters below are applicable and very helpful for best practices:  \n\n* [Visualizing Distributions](https://clauswilke.com/dataviz/histograms-density-plots.html) - Histograms and density plots  \n\nMain idea here is potentially overlapping plots to see where differences arise. Code adapted from Claus Wilke's source code. ^[https://github.com/clauswilke/dataviz/blob/master/visualizing_distributions_I.Rmd#L303-L323]\n\n::: {.cell}\n\n```{.r .cell-code}\npass_map_df %>% \n  filter(str_detect(name, \"Derek Carr|Mahomes\")) %>% \n  mutate(name = factor(name)) %>% \n  ggplot() +\n  geom_density(aes(x = y, y = ..count.., fill = name, color = name),\n               alpha = 0.5) +\n  geom_vline(xintercept = 5, color = \"red\", size = 1, alpha = 0.5) +\n  coord_cartesian(xlim = c(-10, 40)) +\n  scale_x_continuous(breaks = seq(-10, 40, 5), name = \"Yardline\") +\n  scale_y_continuous(breaks = seq(0, 100, 10), name = \"scaled density\") +\n  scale_fill_manual(values = c(\"#0072B2\", \"#D55E00\"), name = \"QB\") +\n  scale_color_manual(values = scales::muted(c(\"#0072B2\", \"#D55E00\")), name = \"QB\") +\n  guides(fill = guide_legend(override.aes = list(linetype = 0))) +\n  theme_minimal() +\n  theme(\n    axis.line.x = element_blank(),\n    legend.position = c(.9, .87),\n    legend.justification = c(\"right\", \"top\"),\n    legend.box.background = element_rect(fill = \"white\", color = \"white\"),\n    plot.margin = margin(3, 7, 3, 1.5)\n  )\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/viz-distributions-1.png){width=672}\n:::\n:::\n\n* [Visualizing many distributions at once](https://clauswilke.com/dataviz/boxplots-violins.html) - Plotting multiple or many distributions at once, and introduces the `ggridges` package  \n\nMain idea here is overlapping many distributions at once, to see general trends or differences.\n\n[`ggridges`](https://github.com/wilkelab/ggridges) has a [vignette](https://cran.r-project.org/web/packages/ggridges/vignettes/gallery.html) on now to use it, but here's a minimal example with the data at hand. Note that we are doing 1 dimensional density, so we could use this with `nflfastR` data as well!\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggridges)\n\npass_map_df %>% \n  filter(str_detect(name, \"Wilson|Mahomes|Prescott|Watson|Rodgers\")) %>% \n  mutate(name = word(name, 2)) %>% \n  ggplot(aes(x = y, group = name, y = name)) +\n  stat_density_ridges(quantile_lines = TRUE, quantiles = 2, scale = 2) +\n  theme_ridges() +\n  scale_x_continuous(breaks = seq(-10, 60, 10), name = \"Yardline\") +\n  labs(y = \"\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPicking joint bandwidth of 2.1\n```\n:::\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/ggridges-1.png){width=672}\n:::\n:::\n\n* [Handling overlapping points](https://clauswilke.com/dataviz/overlapping-points.html) - Dealing with overplotting with small data or big data  \n\nWe create some bins and then plot the data for Mahomes. Here the data is relatively small, but still stacks.\n\n::: {.cell fig.dim='[4,6]'}\n\n```{.r .cell-code}\nbin_data <- pass_map_df %>% \n  filter(str_detect(name, \"Mahomes\"), between(y, -5, 20)) %>% \n  # create 5 yard bins on y axis\n  mutate(y_bins = y - y %% 5) \n\nbin_data %>% \n  ggplot(aes(x = x, y = y_bins)) +\n  geom_point() +\n  scale_y_continuous(breaks = seq(-5, 20, 5))\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/bin-data1-1.png){width=384}\n:::\n:::\n\nWe can add transparency with `alpha` along with `geom_jitter()` to add some random noise in the y-direction w/ `height`. Note that this is kind of a silly example since we have x and y coords, but you can imagine a situation where you only have binned data or like `nflfastR` you have large bins (left, middle right and short, long).\n\n::: {.cell fig.dim='[4,6]'}\n\n```{.r .cell-code}\nbin_data %>% \n  ggplot(aes(x = x, y = y_bins)) +\n  geom_jitter(height = 0.3, alpha = 0.5) +\n  scale_y_continuous(breaks = seq(-5, 20, 5))\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/bin-data2-1.png){width=384}\n:::\n:::\n\nClaus then goes on to cover details with `geom_bin2d()`, `geom_hex()`, and `geom_contour()`, still worth reading but stuff we've covered in the bulk of this post. Again, Claus' book is amazing, and a great resource regardless of what software you are plotting in. He used R, but intentionally left out code and focused on concepts.\n\n</details>\n\n### Fear the beard\n\nWe can display our points with a quick `geom_point()` call but this returns a lot of overplotting albeit in a happy beard shape!\n\n::: {.cell}\n\n```{.r .cell-code}\npass_map_df %>%\n  ggplot(aes(x = x, y = y)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/sanity-check-1.png){width=384}\n:::\n:::\n\nWe can add 90% transparency with `alpha = 0.1` or set `alpha` as uirea ratio, and change the color to red, but this still leaves us with difficulty parsing through the high vs medium pass locations. Although the 1/20 ratio gets us a bit farther. The ratio denominator can be though of as the \"number of points that must overplotted to give a solid color.\" ^[https://ggplot2-book.org/statistical-summaries.html#overplotting]\n\nPasses around the 5 yard mark appear to be as common as at the 10 and even 20 yard mark in some cases! We know this isn't true from `nflfastR` data. Maybe we can try to get closer views of the actual distributions with `ggMarginal` from the [`ggExtra`](https://github.com/daattali/ggExtra) R package, which provides marginal histograms, box plots, or density plots.\n\n::: {.cell}\n\n```{.r .cell-code}\nred_beard <- pass_map_df %>%\n  ggplot(aes(x = x, y = y)) +\n  geom_point(alpha = 0.1, color = \"red\") +\n  labs(title = \"Alpha = 0.1 or 90% transparency\")\n\nred_beard_ratio <- pass_map_df %>%\n  ggplot(aes(x = x, y = y)) +\n  geom_point(alpha = 1/20, color = \"red\") +\n  labs(title = \"Alpha = 1/20, so 20 points must be stacked to give solid color\")\n\n\nred_beard + red_beard_ratio\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/unnamed-chunk-2-1.png){width=768}\n:::\n:::\n\nWe can add some marginal plots to help out a bit, but that still doesn't solve the problem of honing in on specific areas of interest that well.\n\n::: {.cell}\n\n```{.r .cell-code}\n# add density or histogram in the margins\nggMarginal(red_beard, type = \"density\", fill = \"red\")\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/marginal-plots-1.png){width=384}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# add density or histogram in the margins\nggMarginal(red_beard, type = \"histogram\", fill = \"red\")\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/marginal-plots2-1.png){width=384}\n:::\n:::\n\n## 2D Density Alternatives\n\nSince we're actually interested in the density/counts of observations at each x-y coordinate instead of plotting *each* individual point, we also have a few other tools in our toolbox! We can use [`geom_hex()`](https://ggplot2.tidyverse.org/reference/geom_hex.html) or [`geom_bin2d()`](https://ggplot2.tidyverse.org/reference/geom_bin2d.html). Note that there are a few other methods such as `geom_raster()` which require you to provide your own \"z\" metric, and there are `stat_?` versions of each of these geoms for more custom calculations.\n\n:::{.aside}\nIf you read the `ggplot2` + overplotting [`ggplot2` book  chapter](https://ggplot2-book.org/statistical-summaries.html#overplotting), you can find more reproducible longer form examples and strategies with `geom_hex()` and `geom_bin2d()`.\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhex_plot <- pass_map_df %>%\n  ggplot(aes(x = x, y = y)) +\n  geom_hex(\n    binwidth = c(1, 1)\n  ) +\n  scale_fill_gradient(low = \"red\", high = \"yellow\") +\n  geom_hline(yintercept = c(2, 7), color = \"grey\") +\n  scale_y_continuous(breaks = seq(-10, 60, 5))\n\nhex_plot\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/hex-plot-1.png){width=576}\n:::\n\n```{.r .cell-code}\nbin2d <- pass_map_df %>%\n  ggplot(aes(x = x, y = y)) +\n  geom_bin2d(\n    binwidth = c(1, 1)\n  ) +\n  scale_fill_gradient(low = \"red\", high = \"yellow\") +\n  geom_hline(yintercept = c(2, 7), color = \"grey\") +\n  scale_y_continuous(breaks = seq(-10, 60, 5))\n\nbin2d\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/hex-plot-2.png){width=576}\n:::\n:::\n\nWe can now see that while there ARE passes all over the field, the majority are around the 2-7 yard mark with small but relatively dense pockets elsewhere. Passes are most frequently thrown at 4, 5 or 6 yards and ~68% of passes are thrown 10 yards or shorter.\n\n::: {.cell}\n\n```{.r .cell-code}\n# histogram of just Y coord\npass_map_df %>%\n  ggplot(aes(x = y)) +\n  geom_histogram(binwidth = 1) +\n  geom_vline(xintercept = c(5)) +\n  scale_x_continuous(breaks = seq(-10, 60, 5))\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/not-heatmaps-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# calc some percentages\npass_by_y <- pass_map_df %>%\n  mutate(y_rnd = round(y, digits = 0)) %>%\n  count(y_rnd) %>%\n  mutate(\n    total = sum(n),\n    pct_total = n / total,\n    roll_total = cumsum(pct_total)\n  )\n\n# ~35.6% of passes between 2-7 yards\npass_by_y %>%\n  filter(between(y_rnd, 2, 7)) %>%\n  summarize(pct = sum(pct_total))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n    pct\n  <dbl>\n1 0.346\n```\n:::\n\n```{.r .cell-code}\n# passes are most commonly thrown at 4-6 yards\n# 68% of passes are thrown 10 yards or shorter\npass_by_y %>%\n  arrange(desc(pct_total))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 67 × 5\n   y_rnd     n total pct_total roll_total\n   <dbl> <int> <int>     <dbl>      <dbl>\n 1     4  2732 37408    0.0730      0.409\n 2     5  2528 37408    0.0676      0.477\n 3     6  2399 37408    0.0641      0.541\n 4     2  2103 37408    0.0562      0.286\n 5     3  1879 37408    0.0502      0.336\n 6     1  1476 37408    0.0395      0.230\n 7     0  1365 37408    0.0365      0.190\n 8     7  1320 37408    0.0353      0.576\n 9     8  1297 37408    0.0347      0.611\n10    12  1226 37408    0.0328      0.730\n# … with 57 more rows\n```\n:::\n:::\n\n### Don't bury the lede? \n\nAnother major advantage of `geom_hex` or `geom_bin2d()` is they're remarkably faster for big data than plotting `geom_point()` along with reducing the likelihood of overplotting! For a toy example of about 1.7 million points, `geom_hex()` executes in about 2 sec vs 20 sec with `geom_point()`, and then subsequent 30-60 sec to \"draw\" the output in the viewer of R/RStudio.\n\n:::{.aside}\nUsing these techniques are useful, as they are both computationally helpful (aka faster), and can help you better understand plots of \"bigger\" data.\n:::\n\n## 2D Density of \"smaller\" data\n\nSo we've covered hex and rectangular 2d bins. To me, these are not as attractive for \"small data\" like we may see for individual QB plots. Let's take Patrick Mahomes for example, he *only* has ~1,000 passes in this dataset. We can plot with a `geom_hex()` for each 1x1 yard chunk like we did before, but I honestly have trouble determining trends of where he likes to throw with that graphic. \n\n::: {.cell}\n\n```{.r .cell-code}\npass_map_df %>%\n  filter(str_detect(name, c(\"Mahomes\"))) %>%\n  ggplot(aes(x = x, y = y)) +\n  geom_hex(binwidth = c(1, 1)) +\n  scale_y_continuous(breaks = seq(-10, 60, 5))\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/mahomes-alone-1.png){width=576}\n:::\n:::\n\nWe could always use larger bins, but if we're just trying to see large trends we have another strategy in [`geom_density_2d()`](https://ggplot2.tidyverse.org/reference/geom_density_2d.html).\n\n> Perform a 2D kernel density estimation using [`MASS::kde2d()`](https://rdrr.io/pkg/MASS/man/kde2d.html) and display the results with contours. This can be useful for dealing with overplotting. This is a 2D version of geom_density(). geom_density_2d() draws contour lines, and geom_density_2d_filled() draws filled contour bands.\n\nThis essentially fits a polygon around the most frequent points by x/y coordinates, and then colors them according to density. In this case, x/y is basically the position on the field and \"z\" is the density of how many plots were thrown to that area.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npass_map_df %>%\n  filter(str_detect(name, c(\"Mahomes\"))) %>%\n  ggplot(aes(x = x, y = y)) +\n  geom_density_2d_filled() +\n  scale_y_continuous(breaks = seq(-10, 60, 5))\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/mahomes-2d-1.png){width=576}\n:::\n:::\n\nNow if we want to get even more clever, we can use this compare passing heatmaps of specific QBs. We can normalize across the facets, and drop the least frequent passes with specific breaks. I've binned into 10 specific breakpoints, and by setting breaks between 0.1 and 1.0, we also drop the very least frequent passes which otherwise show up as a light fill of the entire remaining plot. Additionally, by adding a horizontal reference line we can pretty clearly see that Carr's most common passes are behind the 5 yard line, while Mahomes has passed beyond the 5 yard line much more frequently.\n\n::: {.cell .column-screen}\n\n```{.r .cell-code}\npass_map_df %>%\n  filter(str_detect(name, c(\"Mahomes|Derek Carr\"))) %>%\n  ggplot(aes(x = x, y = y)) +\n  geom_density_2d_filled(\n    aes(fill = ..level..),\n    contour_var = \"ndensity\", # normalize to each QBs total passes\n    breaks = seq(0.1, 1.0, length.out = 10) # drop the lowest passes\n  ) +\n  scale_y_continuous(breaks = seq(-10, 60, 5)) +\n  facet_wrap(~name) +\n  geom_hline(yintercept = 5)\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/mahomes-compare-1.png){width=960}\n:::\n:::\n\nThis is all well and good, but it's not the prettiest piece of dataviz.\n\nThanks again to [Ethan Douglas](https://twitter.com/ChiefsAnalytics) and his post on [OpenSourceFootball.com](https://www.opensourcefootball.com/posts/2020-08-22-nfl-pass-location-visualization/) ^[Douglas (2020, Aug. 21). Open Source Football: NFL Pass Location Visualization. Retrieved from https://mrcaseb.github.io/open-source-football/posts/2020-08-22-nfl-pass-location-visualization/], we have a good framework about how to approach building a NFL field as a graph. \n\n## Build the field\n\n::: {.cell}\n\n```{.r .cell-code}\nnot_div_5 <- function(x) {\n  # select only elements of the vector not divisible by 5\n  x[x %% 5 != 0]\n}\n\ncenter_df <- tibble(\n  x = c(rep(-3.1, 60), rep(3.1, 60)),\n  y = seq(-14, 59, 1) %>% rep(2) %>% not_div_5(),\n  text = \"--\"\n)\n\n# line labels\nannotate_df <- tibble(\n  x = c(12.88, -12.88) %>% rep(each = 5),\n  y = seq(10, 50, 10) %>% rep(2),\n  text = seq(10, 50, 10) %>% rep(2) %>% str_replace(\"(.)(.)\", \"\\\\1 \\\\2\"),\n  rotation = c(90, 270) %>% rep(each = 5)\n)\n\n# yardlines\nyardline_df <- tibble(\n  y = seq(-15, 60, 5),\n  yend = seq(-15, 60, 5),\n  x = rep(-56 / 2, 16),\n  xend = rep(56 / 2, 16)\n)\n\n# sidelines\nsideline_df <- tibble(\n  y = c(-15.15, -15.15),\n  yend = c(60.15, 60.15),\n  x = c(-56 / 2, 56 / 2),\n  xend = c(-56 / 2, 56 / 2)\n)\n```\n:::\n\nAfter building some datasets, we can now plot just the field without any other data. This looks nice enough, but I don't want to copy paste it for all the remaining examples, so let's try putting it into a function that we can call with `+ add_field()`!\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = NULL, aes(x = x, y = y)) +\n  coord_cartesian(\n    xlim = c(-53.333 / 2, 53.333 / 2),\n    ylim = c(-15, 60)\n  ) +\n  geom_text(\n    data = annotate_df, aes(label = text, angle = rotation),\n    color = \"black\", size = 8\n  ) +\n  geom_segment(\n    data = yardline_df, color = \"black\", size = 1,\n    aes(x = x, y = y, xend = xend, yend = yend)\n  ) +\n  geom_segment(\n    x = -56 / 2, y = 0, xend = 56 / 2, yend = 0,\n    color = \"blue\", size = 1, alpha = 0.5\n  ) +\n  geom_segment(\n    data = sideline_df, color = \"black\", size = 2,\n    aes(x = x, y = y, xend = xend, yend = yend)\n  ) +\n  geom_text(\n    data = center_df,\n    aes(label = text), color = \"black\", vjust = 0.32\n  ) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/field_plot-1.png){width=576}\n:::\n:::\n\n### Wrap the field in a function\n\nWe can turn this into a function so that we don't have to copy-paste it all over the place. Note that I'm wrapping it in a list so I can use it with `+` in a sequence of `ggplot2` calls.\n\nI'm also using `front_col` and `back_col` to let us switch from white on black to black on white if needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_field <- function() {\n  list(\n    coord_cartesian(\n      xlim = c(-53.333 / 2, 53.333 / 2),\n      ylim = c(-15, 60)\n    ),\n    geom_text(\n      data = annotate_df, aes(label = text, angle = rotation),\n      color = front_col, size = 8\n    ),\n    geom_segment(\n      data = yardline_df, color = front_col, size = 1,\n      aes(x = x, y = y, xend = xend, yend = yend)\n    ),\n    geom_segment(\n      x = -56 / 2, y = 0, xend = 56 / 2, yend = 0,\n      color = \"blue\", size = 1, alpha = 0.5\n    ),\n    geom_segment(\n      data = sideline_df, color = front_col, size = 2,\n      aes(x = x, y = y, xend = xend, yend = yend)\n    ),\n    geom_text(\n      data = center_df,\n      aes(label = text), color = front_col, vjust = 0.32\n    ),\n    theme_void(),\n    theme(\n      strip.text = element_text(size = 20, color = front_col),\n      plot.background = element_rect(fill = back_col, color = NA),\n      legend.position = \"none\",\n      plot.margin = unit(c(2, 1, 0.5, 1), unit = \"cm\"),\n      plot.caption = element_text(color = front_col),\n      plot.title = element_text(color = front_col),\n      plot.subtitle = element_text(color = front_col),\n      panel.background = element_rect(fill = back_col, color = NA),\n      panel.border = element_blank()\n    )\n  )\n}\n```\n:::\n\n### QB Comparison\n\nFirst let's filter down to just our two QBs to compare, Patrick Mahomes and Russell Wilson.\n\n::: {.cell}\n\n```{.r .cell-code}\npasser_df <- pass_map_df %>%\n  filter(str_detect(name, c(\"Mahomes|Russell\"))) %>%\n  mutate(name = factor(name, levels = c(\"Patrick Mahomes\", \"Russell Wilson\"))) %>%\n  select(name, x, y)\n\npasser_df %>%\n  ggplot(aes(x = x, y = y)) +\n  geom_density2d_filled() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/create-passer-df-1.png){width=576}\n:::\n:::\n\nWe'll specify fill and color to both scale with the level/density and normal density peaks across our plots, and finally set our breaks to drop the lowest bin of passes.\n\n::: {.cell}\n\n```{.r .cell-code}\npass_map <- passer_df %>%\n  ggplot(aes(x = x, y = y)) +\n  geom_density_2d_filled(\n    aes(fill = ..level.., color = ..level..),\n    contour_var = \"ndensity\", # normalize across facets\n    breaks = seq(0.1, 1.0, length.out = 10)\n  ) +\n  facet_wrap(~name)\n\npass_map\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/initial-map-1.png){width=960}\n:::\n:::\n\nWe can quickly add the field background to this with our function `add_field()`!\n\n::: {.cell .column-screen}\n\n```{.r .cell-code}\nback_col <- \"white\"\nfront_col <- \"black\"\n\npass_map +\n  add_field()\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/add-field-plot-1.png){width=960}\n:::\n:::\n\n## Specify Color schemes\n\nWhile that's essentially our final graph perhaps you don't want to use `viridis` which is the default color scheme. We can generate custom color palettes or use a pre-built color palette via the [`paleteer`](https://github.com/EmilHvitfeldt/paletteer) R package. Note that the 3 color palettes I create all do essentially the same thing but it's:  \n\n* Building your own custom color sequence with `grDevices::colorRampPalette()`  \n* Returning a pre-built palette w/ `paletteer::paletteer_d()`  \n* Expanding a pre-built palette to be longer with `colorRampPalette`\n\n::: {.cell}\n\n```{.r .cell-code}\nheat_colors <- grDevices::colorRampPalette(c(\"#800026FF\", \"#FC4E2AFF\", \"#FEB24CFF\", \"#FFFFCCFF\"))(10)\n\nheat_palette <- paletteer::paletteer_d(\"RColorBrewer::YlOrRd\", n = 9, direction = -1)\n\nheat_colors_interpolated <- colorRampPalette(paletteer::paletteer_d(\"RColorBrewer::YlOrRd\", n = 9, direction = -1))(10)\n\nheat_colors %>% scales::show_col()\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/colors-1.png){width=672}\n:::\n\n```{.r .cell-code}\nheat_palette %>% scales::show_col()\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/colors-2.png){width=672}\n:::\n\n```{.r .cell-code}\nheat_colors_interpolated %>% scales::show_col()\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/colors-3.png){width=672}\n:::\n:::\n\n::: {.cell .column-screen}\n\n```{.r .cell-code}\npass_map +\n  add_field() +\n  scale_fill_manual(values = c(heat_colors_interpolated), aesthetics = c(\"fill\", \"color\"))\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/use-colors-1.png){width=1152}\n:::\n:::\n\n#### And also in black!\n\n::: {.cell .column-screen}\n\n```{.r .cell-code}\nback_col <- \"black\"\nfront_col <- \"white\"\n\npass_map +\n  add_field() +\n  scale_fill_manual(values = c(heat_colors_interpolated), aesthetics = c(\"fill\", \"color\"))\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/use-colors2-1.png){width=1152}\n:::\n:::\n\n\n## PFF_Moo style Field\n\n[PFF_Moo](https://twitter.com/PFF_Moo/status/1235681100837486592?s=20) takes a different approach to field lines, which can be recreated below. ^[https://twitter.com/PFF_Moo/status/1235681100837486592?s=20]\n\n::: {.cell}\n\n```{.r .cell-code}\nnot_div_5 <- function(x) {\n  # select only elements of the vector not divisible by 5\n  x[x %% 5 != 0]\n}\n\ncenter_df <- tibble(\n  x = c(rep(-3.1, 60), rep(3.1, 60)),\n  y = seq(-14, 59, 1) %>% rep(2) %>% not_div_5(),\n  text = \"--\"\n)\n\n# line labels\nhoriz_yd_df <- tibble(\n  x = c(12.88, -12.88) %>% rep(each = 14),\n  y = seq(-10, 55, 5) %>% rep(2),\n  text = seq(-10, 55, 5) %>% rep(2)\n)\n\n# yardlines\nyardline_df <- tibble(\n  y = seq(-15, 60, 5),\n  yend = seq(-15, 60, 5),\n  x = rep(-56 / 2, 16),\n  xend = rep(56 / 2, 16)\n)\n\n# sidelines\nsideline_df <- tibble(\n  y = c(-15.15, -15.15),\n  yend = c(60.15, 60.15),\n  x = c(-56.5 / 2, 56.5 / 2),\n  xend = c(-56.5 / 2, 56.5 / 2)\n)\n\nadd_moo_field <- function() {\n  list(\n    coord_cartesian(\n      xlim = c(-53.333/2, 53.333/2),\n      ylim = c(-15, 60)\n    ),\n    geom_segment(\n      data = yardline_df, color = front_col, size = 0.5,\n      linetype = \"dashed\", alpha = 0.5,\n      aes(x = x, y = y, xend = xend, yend = yend)\n    ),\n    geom_segment(\n      aes(x = -56 / 2, y = 0, xend = 56 / 2, yend = 0),\n      color = \"blue\", size = 1\n    ),\n    geom_segment(\n      data = sideline_df, color = front_col, size = 2,\n      aes(x = x, y = y, xend = xend, yend = yend)\n    ),\n    geom_text(\n      data = center_df,\n      aes(label = text), color = front_col, vjust = 0.32\n    ),\n    geom_text(\n      data = horiz_yd_df, aes(label = text),\n      color = front_col, size = 4, fontface = \"bold\"\n    ),\n    theme_void(),\n    theme(\n      strip.text = element_text(size = 20, color = front_col),\n      plot.background = element_rect(fill = back_col, color = NA),\n      legend.position = \"none\",\n      plot.margin = unit(c(2, 1, 0.5, 1), unit = \"cm\"),\n      plot.caption = element_text(color = front_col),\n      plot.title = element_text(color = front_col),\n      plot.subtitle = element_text(color = front_col),\n      panel.background = element_rect(fill = back_col, color = NA),\n      panel.border = element_blank()\n    )\n  )\n}\n\nback_col <- \"white\"\nfront_col <- \"black\"\n\n\nggplot(pass_map_df, aes(x = x, y = y)) +\n  geom_density_2d_filled(\n    aes(fill = ..level..),\n    contour_var = \"ndensity\", # normalize to each QBs total passes\n    breaks = seq(0.1, 1.0, length.out = 10) # drop the lowest passes\n  ) +\n  add_moo_field()\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/field_plot_moo-1.png){width=576}\n:::\n:::\n\n## Get the raw density estimates\n\nLastly, we can also get the raw density measures to use against the points for example or for other more computational measures as opposed to just graphics. ^[Function adapted from [Kamil Slowikowski](https://slowkow.com/notes/ggplot2-color-by-density/)] Note that this is for ALL the QBs at once.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_density <- function(x, y, ...) {\n  density_out <- MASS::kde2d(x, y, ...)\n  int_x <- findInterval(x, density_out$x)\n  int_y <- findInterval(y, density_out$y)\n  comb_int <- cbind(int_x, int_y)\n  return(density_out$z[comb_int])\n}\n\ndensity_map <- pass_map_df %>% \n  select(x, y, name) %>% \n  # function works in dplyr!\n  mutate(density = get_density(x, y, n = 100))\n\ndensity_map %>% \n  ggplot(aes(x = x, y = y, color = density)) +\n  geom_point(alpha = 0.2) +\n  scale_color_gradient(low = \"red\", high = \"yellow\")\n```\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/dens-calc-1.png){width=576}\n:::\n:::\n  \n:::{.aside}\n\nHere's the hexplot for comparison:\n\n::: {.cell}\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/unnamed-chunk-3-1.png){width=480}\n:::\n:::\n\n:::\n\n### Compare 2D Density\n\nNow for this, we're actually creating two separate 2 dimensional density estimates, and then subtracting the density of QB2's passes from QB1's.\n\nThis requires us to play around a bit more with matrices, which is a good exercise! I'm going to keep working to see if this could fit into a `tibble` oriented workflow, but so far it's a matrix up to the end. Credit to eipi10 for code I adapted from [Stack Overflow](https://stackoverflow.com/questions/28521145/r-calculate-and-plot-difference-between-two-density-countours). ^[https://stackoverflow.com/questions/28521145/r-calculate-and-plot-difference-between-two-density-countours]\n\n::: {.cell}\n\n```{.r .cell-code}\nqb_density_compare <- function(pass_df, qb1_name, qb2_name, n = 200){\n  \n  # filter to qb1\n  qb1 <- pass_df %>% \n    select(x, y, name) %>% \n    filter(str_detect(name, qb1_name))\n  \n  #filter to qb2\n  qb2 <- pass_df %>% \n    select(x, y, name) %>% \n    filter(str_detect(name, qb2_name))\n  \n  # get x/y coords as vectors\n  qb1_x <- pull(qb1, x)\n  qb1_y <- pull(qb1, y)\n  \n  # get x/y coords as vectors\n  qb2_x <- pull(qb2, x)\n  qb2_y <- pull(qb2, y)\n\n  # get x and y range to compute comparisons across\n  x_rng = range(c(qb1_x, qb2_x))\n  y_rng = range(c(qb1_y, qb2_y))\n  \n  # Explicitly calculate bandwidth for future use\n  bandwidth_x <- MASS::bandwidth.nrd(c(qb1_x, qb2_x))\n  bandwidth_y <- MASS::bandwidth.nrd(c(qb1_y, qb2_y))\n  \n  bandwidth_calc <- c(bandwidth_x, bandwidth_y)\n  \n  # Calculate the 2d density estimate over the common range\n  d2_qb1 = MASS::kde2d(qb1_x, qb1_y, h = bandwidth_calc, n=n, lims=c(x_rng, y_rng))\n  d2_qb2 = MASS::kde2d(qb2_x, qb2_y, h = bandwidth_calc, n=n, lims=c(x_rng, y_rng))\n  \n  # create diff df\n  qb_diff <- d2_qb1\n  \n  # matrix subtraction density from qb2 from qb1\n  qb_diff$z <- d2_qb1$z - d2_qb2$z\n  \n  # add matrix col names\n  colnames(qb_diff$z) = qb_diff$y\n  \n  #### return tidy tibble ####\n  qb_diff$z %>% \n    # each col_name is actually the y from the matrix\n    as_tibble() %>% \n    # add back the x\n    mutate(x= qb_diff$x) %>% \n    pivot_longer(-x, names_to = \"y\", values_to = \"z\") %>% \n    mutate(y = as.double(y),\n           bandwidth = list(bandwidth_calc),\n           comparison = glue::glue(\"{qb1_name} (QB1) vs {qb2_name} (QB2)\"))\n\n}\n```\n:::\n\n### Call the function\n\nNow we can just call the function to generate a beautiful dataset to plot or work with!\n\nLet's compare... Mahomes vs Rodgers.\n\n::: {.cell fig.dim='[5,10]'}\n\n```{.r .cell-code}\ncompared_z <- qb_density_compare(pass_map_df, \"Mahomes\", \"Rodgers\", n = 200) \n\n(compared_plot <- compared_z %>% \n  ggplot(aes(x, y)) +\n  \n  # add core heatmap - note that geom_raster or geom_tile both work\n  geom_raster(aes(x, y, fill=z))  +\n  \n  # add contour polygon lines around the most dense points\n  stat_contour(aes(color=..level.., z = z)) +\n  \n  # add a fill gradient from low (blue) to high (red) \n  # with white as the zero midpoint\n  scale_fill_gradient2(low=\"blue\",mid=\"white\", high=\"red\", midpoint=0) +\n  scale_color_gradient2(low=\"blue\", mid=\"white\", high=\"red\", midpoint=0) +\n  # drop the legends\n  guides(color=FALSE, fill = FALSE) +\n  add_moo_field() +\n  labs(title = unique(compared_z$comparison),\n       subtitle = \"Color is more passes by <span style='color:red'>**QB1**</span> or by <span style='color:blue'>**QB2**</span>\",\n       caption = \"Plot: @thomas_mock | Data: @ChiefsAnalytics\")) +\n  # add some customizations to the plot\n  theme(legend.position = \"top\", legend.key.width = unit(2, \"cm\"),\n        plot.title = element_text(size = 20, hjust = 0.5, face = \"bold\"),\n        plot.subtitle = element_markdown(size = 12, hjust = 0.5),\n        plot.caption = element_text(face = \"bold\")) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](heatmaps-in-ggplot2_files/figure-html/compare_qb_plot-1.png){width=480}\n:::\n:::\n\n\nTry it out for yourself!\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.1.1 (2021-08-10)\n os       macOS Monterey 12.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-04-25\n pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n quarto   0.9.294 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n dplyr       * 1.0.8      2022-02-08 [1] CRAN (R 4.1.1)\n forcats     * 0.5.1      2021-01-27 [1] CRAN (R 4.1.1)\n ggExtra     * 0.9        2019-08-27 [1] CRAN (R 4.1.1)\n ggplot2     * 3.3.5      2021-06-25 [1] CRAN (R 4.1.1)\n ggridges    * 0.5.3      2021-01-08 [1] CRAN (R 4.1.1)\n ggtext      * 0.1.1      2020-12-17 [1] CRAN (R 4.1.1)\n paletteer   * 1.4.0      2021-07-20 [1] CRAN (R 4.1.0)\n patchwork   * 1.1.0.9000 2022-04-04 [1] Github (thomasp85/patchwork@79223d3)\n purrr       * 0.3.4      2020-04-17 [1] CRAN (R 4.1.0)\n readr       * 2.0.2      2021-09-27 [1] CRAN (R 4.1.1)\n scales      * 1.1.1      2020-05-11 [1] CRAN (R 4.1.0)\n sessioninfo * 1.2.2      2021-12-06 [1] CRAN (R 4.1.1)\n stringr     * 1.4.0      2019-02-10 [1] CRAN (R 4.1.1)\n tibble      * 3.1.6      2021-11-07 [1] CRAN (R 4.1.1)\n tidyr       * 1.2.0      2022-02-01 [1] CRAN (R 4.1.1)\n tidyverse   * 1.3.1      2021-04-15 [1] CRAN (R 4.1.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::",
    "supporting": [
      "heatmaps-in-ggplot2_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}