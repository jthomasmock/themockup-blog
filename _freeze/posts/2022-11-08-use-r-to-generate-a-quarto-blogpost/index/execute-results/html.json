{
  "hash": "cd2df11a5eea2259c44610a88b5987e4",
  "result": {
    "markdown": "---\ntitle: \"Use R to generate a Quarto blogpost\"\ndescription: |\n  The {cli} and {fs} packages make life easy!\nauthor: Tom Mock\ndate: 2022-11-08\ncategories:\n  - meta\n  - quarto\nimage: \"/posts/2022-11-08-use-r-to-generate-a-quarto-blogpost/preview.png\"\ntwitter-card:\n  image:  \"/posts/2022-11-08-use-r-to-generate-a-quarto-blogpost/preview.png\"\n  card-style: summary_large_image\n---\n\n\nI am a Quarto super fan for many reasons, and use Quarto for my personal blog. As such, I wanted to simplify the process of creating new blog posts for myself, so I wrote a quick function to do just that!\n\n```r\nnew_post <- function(\n    title, \n    file = \"index.qmd\",\n    description = \"\",\n    author = \"Tom Mock\", \n    date = Sys.Date(), \n    draft = FALSE, \n    title_limit = 45,\n    open_file = TRUE\n    ){\n```\n\nI used it to write this meta blogpost:\n\n```r\nnew_post(\n  \"Use R to generate a Quarto blogpost\", \n  description = \"The {cli} and {fs} package make life easy!\",\n  draft = FALSE\n  )\n\n✔ Folder created at posts/2022-11-08-use-r-to-generate-a-quarto-blogpost\n✔ File created at posts/2022-11-08-use-r-to-generate-a-quarto-blogpost/index.qmd\n---\ntitle: \"Use R to generate a Quarto blogpost\"\ndescription: |\n  The {cli} and {fs} package make life easy!\nauthor: Tom Mock\ndate: 2022-11-08\n---\n```\n\nThis function generates the core skeleton of a Quarto post, including the directory, the `index.qmd` and writes out some boilerplate information.\n\nWe'll use a few packages to get this done.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr) # easy string manipulation\nlibrary(glue)    # easy adding of string together\nlibrary(fs)      # easy file manipulation\nlibrary(cli)     # easy and beautiful messages/warnings\n```\n:::\n\n\n\n## Title of post\n\nFor the title, we want to convert a proper title to a kebab case title (`kebab-case-like-this`), with the date attached as well for easy sorting of folders.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle <- \"Use R to generate a Quarto blogpost\"\n# convert to kebab case and remove non space or alphanumeric characters\ntitle_kebab <- stringr::str_to_lower(title) |> \n  stringr::str_remove_all(\"[^[:alnum:][:space:]]\") |> \n  stringr::str_replace_all(\" \", \"-\")\ntitle_kebab\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"use-r-to-generate-a-quarto-blogpost\"\n```\n:::\n:::\n\n\nWe can add a warning with `{cli}` if the title is too long. Too long is subjective, but we can arbitrary say 80 characters. My blog is at `https://themockup.blog/posts/` and we want to add the date, so we have about 40 characters to work with.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n80 - nchar(\"https://themockup.blog/posts/2022-11-08-\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 40\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle_limit <- 40\n# we can put that into an if to add the warning if criterion met\nif(nchar(title_kebab) >= title_limit){\n    cli::cli_alert_warning(\"Warning: Title slug is longer than {.val {title_limit}} characters!\")\n}\n\n# we can force it to print like below\ncli::cli_alert_warning(\"Warning: Title slug is longer than {.val {title_limit}} characters!\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Warning: Title slug is longer than 40 characters!\n```\n:::\n:::\n\n\nAfter that, we can add the date and optionally the draft prefix, files with `_` at the head are ignored by Quarto.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndraft <- FALSE\ndate <- \"2022-11-08\" #< Sys.Date() for ISO date\nif(draft){\n  slug <- glue::glue(\"posts/_{date}-{title_kebab}\")\n  cli::cli_alert_info(\"Appending a '_' to folder name to avoid render while a draft, remove '_' when finished.\")\n} else {\n  slug <- glue::glue(\"posts/{date}-{title_kebab}\")\n}\n\nslug\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nposts/2022-11-08-use-r-to-generate-a-quarto-blogpost\n```\n:::\n:::\n\n\n## Create folder\n\nThe folder name is what will end up as the URL \"slug\", so we will end up with a url like:\n\n`https://themockup.blog/posts/2022-11-08-use-r-to-generate-a-quarto-blogpost`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create and alert about directory\nfs::dir_create(\n  path = slug\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# print alert\ncli::cli_alert_success(\"Folder created at {.file {slug}}\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Folder created at '\u001b]8;;file:///Users/thomasmock/themockup-blog/posts/2022-11-08-use-r-to-generate-a-quarto-blogpost/posts/2022-11-08-use-r-to-generate-a-quarto-blogpost\u0007posts/2022-11-08-use-r-to-generate-a-quarto-blogpost\u001b]8;;\u0007'\n```\n:::\n:::\n\n\n## Create blogpost file as `index.qmd`\n\nWe want to name our file `index.qmd` so that our slug is clean as:\n\n`https://themockup.blog/posts/2022-11-08-use-r-to-generate-a-quarto-blogpost`\n\ninstead of:\n\n`https://themockup.blog/posts/2022-11-08-use-r-to-generate-a-quarto-blogpost/some-file.html`\n\n\n### Add description and wrap\n\nWe can take the description and limit the width to <= 80 characters (includes the spacing that YAML needs). We will replace the line breaks `\\n` with leading spaces AND line breaks `\"  \\n\"` so that the alignment in the YAML is ok.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndescription <- \"The {cli} and {fs} package make life easy!\"\n# wrap description at 77 characters\ndescription <- stringr::str_wrap(description, width = 77) |> \n  stringr::str_replace_all(\"[\\n]\", \"\\n  \")\ndescription\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"The {cli} and {fs} package make life easy!\"\n```\n:::\n:::\n\n\nIf the description were long...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlong_desc <- \"  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\" |> \n  stringr::str_wrap(width = 77) |> \n  stringr::str_replace_all(\"[\\n]\", \"\\n  \") \n\npaste0(\"description: |\\n  \", long_desc)|> \n  cat()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndescription: |\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n  tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n  quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n  consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n  cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n  proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n```\n:::\n:::\n\n\n\n## Start file\n\nWe are using our default `index.qmd` to again avoid increasing the length of the slug.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile <- \"index.qmd\"\n# start generating file\nnew_post_file <- glue::glue(\"{slug}/{file}\")\nnew_post_file\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nposts/2022-11-08-use-r-to-generate-a-quarto-blogpost/index.qmd\n```\n:::\n:::\n\n\n### Build YAML core\n\nNow we can start building up the YAML, using the `{glue}` package to insert the inputs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nauthor <- \"Tom Mock\"\nnew_post_core <- c(\n  \"---\",\n  glue::glue('title: \"{title}\"'),\n  \"description: |\",\n  glue::glue('  {description}'),\n  glue::glue(\"author: {author}\"),\n  glue::glue(\"date: {date}\")\n)\n\nnew_post_core\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"---\"                                           \n[2] \"title: \\\"Use R to generate a Quarto blogpost\\\"\"\n[3] \"description: |\"                                \n[4] \"  The {cli} and {fs} package make life easy!\"  \n[5] \"author: Tom Mock\"                              \n[6] \"date: 2022-11-08\"                              \n```\n:::\n:::\n\n\nOptionally adding the `draft: true` YAML option if needed...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add draft if draft\nif(draft){\n  new_post_text <- c(\n    new_post_core,\n    \"draft: true\",\n    \"---\\n\"\n    )\n} else {\n  new_post_text <- c(\n    new_post_core,\n    \"---\\n\"\n  )\n}\n```\n:::\n\n\nThen we throw it all together and collapse with new lines (`\\n`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# finalize new post text\nnew_post_text <- paste0(\n  new_post_text,\n  collapse = \"\\n\"\n  )\n\nnew_post_text |> cat()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n---\ntitle: \"Use R to generate a Quarto blogpost\"\ndescription: |\n  The {cli} and {fs} package make life easy!\nauthor: Tom Mock\ndate: 2022-11-08\n---\n```\n:::\n:::\n\n\n## Write out to the file\n\nWe can create a new file and then write out the YAML, I have this chunk as `eval: false` right now so that it doesn't clobber our existing blog post...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::file_create(new_post_file) # <- don't want to recreate it :)\nwriteLines(\n  text = new_post_text,\n  con = new_post_file\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# create file and alert\n# fs::file_create(new_post_file) <- don't want to recreate it :)\ncli::cli_alert_success(\"File created at {.file {new_post_file}}\")\n```\n:::\n\n\n```\n✔ Folder created at posts/2022-11-08-use-r-to-generate-a-quarto-blogpost\n```\n\nJust for funsies we can also print out the raw text using `cat()` to accurately reflect what we're adding with the new lines and spacing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# print new post information\ncat(new_post_text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n---\ntitle: \"Use R to generate a Quarto blogpost\"\ndescription: |\n  The {cli} and {fs} package make life easy!\nauthor: Tom Mock\ndate: 2022-11-08\n---\n```\n:::\n:::\n\n\nThen we can have RStudio open the file we just wrote out!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrstudioapi::documentOpen(new_post_file, line = length(new_post_text))\n```\n:::\n\n\n\n## All together\n\nPutting it all together, we can create a new blogpost rapidly!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_post(\n  \"Use R to generate a Quarto blogpost\", \n  description = \"The {cli} and {fs} package make life easy!\",\n  draft = FALSE\n  )\n```\n:::\n\n\n```\n✔ Folder created at posts/2022-11-08-use-r-to-generate-a-quarto-blogpost\n✔ File created at posts/2022-11-08-use-r-to-generate-a-quarto-blogpost/index.qmd\n---\ntitle: \"Use R to generate a Quarto blogpost\"\ndescription: |\n  The {cli} and {fs} package make life easy!\nauthor: Tom Mock\ndate: 2022-11-08\n---\n```\n\nThe full function!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_post <- function(\n    title, \n    file = \"index.qmd\",\n    description = \"\",\n    author = \"Tom Mock\", \n    date = Sys.Date(), \n    draft = FALSE, \n    title_limit = 40,\n    open_file = TRUE\n    ){\n\n  # convert to kebab case and remove non space or alphanumeric characters\n  title_kebab <- stringr::str_to_lower(title) |> \n    stringr::str_remove_all(\"[^[:alnum:][:space:]]\") |> \n    stringr::str_replace_all(\" \", \"-\")\n  \n  # warn if a very long slug\n  if(nchar(title_kebab) >= title_limit){\n    cli::cli_alert_warning(\"Warning: Title slug is longer than {.val {title_limit}} characters!\")\n  }\n  \n  # generate the slug as draft, prefix with _ which prevents\n  # quarto from rendering/recognizing the folder\n  if(draft){\n    slug <- glue::glue(\"posts/_{date}-{title_kebab}\")\n    cli::cli_alert_info(\"Appending a '_' to folder name to avoid render while a draft, remove '_' when finished.\")\n  } else {\n    slug <- glue::glue(\"posts/{date}-{title_kebab}\")\n  }\n  \n  # create and alert about directory\n  fs::dir_create(\n    path = slug\n  )\n  cli::cli_alert_success(\"Folder created at {.file {slug}}\")\n  \n  # wrap description at 77 characters\n  description <- stringr::str_wrap(description, width = 77) |> \n    stringr::str_replace_all(\"[\\n]\", \"\\n  \")\n  \n  # start generating file\n  new_post_file <- glue::glue(\"{slug}/{file}\")\n  \n  # build yaml core\n  new_post_core <- c(\n    \"---\",\n    glue::glue('title: \"{title}\"'),\n    \"description: |\",\n    glue::glue('  {description}'),\n    glue::glue(\"author: {author}\"),\n    glue::glue(\"date: {date}\")\n  )\n  \n  # add draft if draft\n  if(draft){\n    new_post_text <- c(\n      new_post_core,\n      \"draft: true\",\n      \"---\\n\"\n      )\n  } else {\n    new_post_text <- c(\n      new_post_core,\n      \"---\\n\"\n    )\n  }\n  \n  # finalize new post text\n  new_post_text <- paste0(\n    new_post_text,\n    collapse = \"\\n\"\n    )\n  \n  # create file and alert\n  fs::file_create(new_post_file)\n  cli::cli_alert_success(\"File created at {.file {new_post_file}}\")\n  \n  # print new post information\n  cat(new_post_text)\n  \n  writeLines(\n    text = new_post_text,\n    con = new_post_file\n    )\n  \n  rstudioapi::documentOpen(new_post_file, line = length(new_post_text))\n  \n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}