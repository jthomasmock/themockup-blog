{
  "hash": "190ad91108ee625f7304aad3a57cc057",
  "result": {
    "markdown": "---\ntitle: \"Creating a custom gt function for aligning first-row text and testing it with testthat\"\ndescription: |\n  Creating and testing your own functions is fun!\nauthor: Thomas Mock\ndate: 2021-03-07\nimage: preview.jpeg\ncategories:\n  - gt\n  - functions\n  - testing\n---\n\n\n\n\n\n## Creating and testing `gt` functions\n\nIt's no secret, but I **love** the `gt` package and tables in general. I've been on a big table kick for almost a year at this point!\n\nWhile I love all the amazing features built into `gt`, sometimes I also want to create my own functions to wrap or extend features.\n\nFor example, I've done:  \n\n* Custom `gt`-themes and functions [Blogpost](https://themockup.blog/posts/2020-09-26-functions-and-themes-for-gt-tables/)  \n* Embedding custom HTML [Blogpost](https://themockup.blog/posts/2020-10-31-embedding-custom-features-in-gt-tables/)  \n* Created repeatable beautiful table reporting [Gist](https://gist.github.com/jthomasmock/3576e0620fe54ed84e02aa371444778b) and [Gist](https://gist.github.com/jthomasmock/4a8851d74d911ce9b90bf7a43c4cdf47)  \n* Using `patchwork` to combine `ggplot2` + `gt` [Gist](https://gist.github.com/jthomasmock/67892387f23708b94819ef12ee76dc70)  \n\nThis blogpost will cover how to solve a fairly common ask, how to add a symbol/character to the end of *ONLY* the first row of a column and maintain the alignment of the entire column. We'll walk through how to accomplish this with `gt` only, creating our own function to do it more succinctly, and then how to further test our `gt` outputs with `testthat`!\n\n## No repeats\n\nI've always been a fan of not having to repeat symbols/prefixes/suffixes inside tables. There's some ongoing work here in `gt` to add this as a feature, but in the meantime I wanted to play around with a few ways to accomplish this with `gt` as it is, and/or a custom function as of today.\n\nYou can imagine a situation like below, where we want to label cells within a column as a percent, and want to indicate that it's a percent ONLY on the first row.\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(gtcars) %>%\n  mutate(hp_pct = (hp/max(hp) * 100)) %>% \n  dplyr::select(mfr, model, year, trim, hp, hp_pct) %>%\n  gt() %>% \n  fmt_percent(columns = vars(hp_pct), rows = 1, scale_values = FALSE) %>% \n  fmt_number(columns = vars(hp_pct), rows = 2:6) %>% \n  tab_style(\n    style = cell_text(color = \"red\"), \n    locations = cells_body(vars(hp_pct), rows = 1)\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"sguloxnswc\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#sguloxnswc .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#sguloxnswc .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#sguloxnswc .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#sguloxnswc .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#sguloxnswc .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sguloxnswc .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#sguloxnswc .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#sguloxnswc .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#sguloxnswc .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#sguloxnswc .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#sguloxnswc .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#sguloxnswc .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#sguloxnswc .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#sguloxnswc .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#sguloxnswc .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#sguloxnswc .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#sguloxnswc .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sguloxnswc .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#sguloxnswc .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#sguloxnswc .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sguloxnswc .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#sguloxnswc .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#sguloxnswc .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sguloxnswc .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sguloxnswc .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#sguloxnswc .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#sguloxnswc .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sguloxnswc .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#sguloxnswc .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sguloxnswc .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#sguloxnswc .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sguloxnswc .gt_left {\n  text-align: left;\n}\n\n#sguloxnswc .gt_center {\n  text-align: center;\n}\n\n#sguloxnswc .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#sguloxnswc .gt_font_normal {\n  font-weight: normal;\n}\n\n#sguloxnswc .gt_font_bold {\n  font-weight: bold;\n}\n\n#sguloxnswc .gt_font_italic {\n  font-style: italic;\n}\n\n#sguloxnswc .gt_super {\n  font-size: 65%;\n}\n\n#sguloxnswc .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#sguloxnswc .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#sguloxnswc .gt_slash_mark {\n  font-size: 0.7em;\n  line-height: 0.7em;\n  vertical-align: 0.15em;\n}\n\n#sguloxnswc .gt_fraction_numerator {\n  font-size: 0.6em;\n  line-height: 0.6em;\n  vertical-align: 0.45em;\n}\n\n#sguloxnswc .gt_fraction_denominator {\n  font-size: 0.6em;\n  line-height: 0.6em;\n  vertical-align: -0.05em;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">mfr</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">model</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">year</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">trim</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">hp</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">hp_pct</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td class=\"gt_row gt_left\">Ford</td>\n<td class=\"gt_row gt_left\">GT</td>\n<td class=\"gt_row gt_right\">2017</td>\n<td class=\"gt_row gt_left\">Base Coupe</td>\n<td class=\"gt_row gt_right\">647</td>\n<td class=\"gt_row gt_right\" style=\"color: #FF0000;\">97.88%</td></tr>\n    <tr><td class=\"gt_row gt_left\">Ferrari</td>\n<td class=\"gt_row gt_left\">458 Speciale</td>\n<td class=\"gt_row gt_right\">2015</td>\n<td class=\"gt_row gt_left\">Base Coupe</td>\n<td class=\"gt_row gt_right\">597</td>\n<td class=\"gt_row gt_right\">90.32</td></tr>\n    <tr><td class=\"gt_row gt_left\">Ferrari</td>\n<td class=\"gt_row gt_left\">458 Spider</td>\n<td class=\"gt_row gt_right\">2015</td>\n<td class=\"gt_row gt_left\">Base</td>\n<td class=\"gt_row gt_right\">562</td>\n<td class=\"gt_row gt_right\">85.02</td></tr>\n    <tr><td class=\"gt_row gt_left\">Ferrari</td>\n<td class=\"gt_row gt_left\">458 Italia</td>\n<td class=\"gt_row gt_right\">2014</td>\n<td class=\"gt_row gt_left\">Base Coupe</td>\n<td class=\"gt_row gt_right\">562</td>\n<td class=\"gt_row gt_right\">85.02</td></tr>\n    <tr><td class=\"gt_row gt_left\">Ferrari</td>\n<td class=\"gt_row gt_left\">488 GTB</td>\n<td class=\"gt_row gt_right\">2016</td>\n<td class=\"gt_row gt_left\">Base Coupe</td>\n<td class=\"gt_row gt_right\">661</td>\n<td class=\"gt_row gt_right\">100.00</td></tr>\n    <tr><td class=\"gt_row gt_left\">Ferrari</td>\n<td class=\"gt_row gt_left\">California</td>\n<td class=\"gt_row gt_right\">2015</td>\n<td class=\"gt_row gt_left\">Base Convertible</td>\n<td class=\"gt_row gt_right\">553</td>\n<td class=\"gt_row gt_right\">83.66</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\nHowever, you can quickly see that this misaligned the first row from the remaining rows.\n\n![]()\n\n---\n\n### No repeats in `gt`\n\nAn alternative would be to convert those rows to text and apply specific changes. \n\nThere's quite a bit going on here:  \n\n* _Must_ use a mono space font for the column of interest  \n  * Must be mono-spaced so that everything aligns properly  \n  \n* Align the now text column to be right-aligned  \n  * Align to right, so again the decimal places align (text default aligns to left otherwise)  \n  \n* Use `gt::text_transform()` to add percent to the first row  \n  * use `base::format()` to round and \"force\" a specific number of decimal places  \n  \n* Use `gt::text_transform()` to add non-breaking space `\"&nbsp\"` to remaining rows  \n  * Must use `\"&nbsp\"`, which is the HTML code for nonbreaking space, as a raw space (eg `\" \"`) will not work  \n\nI want to pause here and say with the code below, we have officially accomplished our goal. However, this was fairly manual and can be repetitive for adding several of these transformations in a single table.\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(gtcars) %>%\n  mutate(hp_pct = (hp/max(hp) * 100)) %>% \n  dplyr::select(mfr, model, year, trim, hp, hp_pct) %>%\n  gt() %>%\n  # use a mono-spaced font\n  tab_style(\n    style = cell_text(font = google_font(\"Fira Mono\")),\n    locations = cells_body(columns = vars(hp_pct))\n    ) %>% \n  # align the column of interst to right\n  cols_align(align = \"right\", columns = vars(hp_pct)) %>% \n  # round and transform the first row to percent\n  text_transform(\n    locations = cells_body(vars(hp_pct), rows = 1),\n    fn = function(x){ \n      fmt_val <- format(as.double(x), nsmall = 1, digits = 1)\n      paste0(fmt_val, \"%\") %>% gt::html()}\n  ) %>% \n  text_transform(\n    locations = cells_body(vars(hp_pct), rows = 2:6),\n    fn = function(x){ \n      # round remaining rows, add a non-breaking space\n     fmt_val <- format(as.double(x), nsmall = 1, digits = 1)\n     lapply(fmt_val, function(x) paste0(x, '&nbsp') %>% gt::html())\n  })\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"hglsjurzin\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>@import url(\"https://fonts.googleapis.com/css2?family=Fira+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#hglsjurzin .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#hglsjurzin .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hglsjurzin .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#hglsjurzin .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#hglsjurzin .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hglsjurzin .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#hglsjurzin .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#hglsjurzin .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#hglsjurzin .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#hglsjurzin .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#hglsjurzin .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#hglsjurzin .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#hglsjurzin .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#hglsjurzin .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#hglsjurzin .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#hglsjurzin .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#hglsjurzin .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hglsjurzin .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#hglsjurzin .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#hglsjurzin .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hglsjurzin .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#hglsjurzin .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#hglsjurzin .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hglsjurzin .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hglsjurzin .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#hglsjurzin .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#hglsjurzin .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#hglsjurzin .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hglsjurzin .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hglsjurzin .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#hglsjurzin .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#hglsjurzin .gt_left {\n  text-align: left;\n}\n\n#hglsjurzin .gt_center {\n  text-align: center;\n}\n\n#hglsjurzin .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#hglsjurzin .gt_font_normal {\n  font-weight: normal;\n}\n\n#hglsjurzin .gt_font_bold {\n  font-weight: bold;\n}\n\n#hglsjurzin .gt_font_italic {\n  font-style: italic;\n}\n\n#hglsjurzin .gt_super {\n  font-size: 65%;\n}\n\n#hglsjurzin .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#hglsjurzin .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#hglsjurzin .gt_slash_mark {\n  font-size: 0.7em;\n  line-height: 0.7em;\n  vertical-align: 0.15em;\n}\n\n#hglsjurzin .gt_fraction_numerator {\n  font-size: 0.6em;\n  line-height: 0.6em;\n  vertical-align: 0.45em;\n}\n\n#hglsjurzin .gt_fraction_denominator {\n  font-size: 0.6em;\n  line-height: 0.6em;\n  vertical-align: -0.05em;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">mfr</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">model</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">year</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">trim</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">hp</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">hp_pct</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td class=\"gt_row gt_left\">Ford</td>\n<td class=\"gt_row gt_left\">GT</td>\n<td class=\"gt_row gt_right\">2017</td>\n<td class=\"gt_row gt_left\">Base Coupe</td>\n<td class=\"gt_row gt_right\">647</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">97.9%</td></tr>\n    <tr><td class=\"gt_row gt_left\">Ferrari</td>\n<td class=\"gt_row gt_left\">458 Speciale</td>\n<td class=\"gt_row gt_right\">2015</td>\n<td class=\"gt_row gt_left\">Base Coupe</td>\n<td class=\"gt_row gt_right\">597</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\"> 90.3&nbsp</td></tr>\n    <tr><td class=\"gt_row gt_left\">Ferrari</td>\n<td class=\"gt_row gt_left\">458 Spider</td>\n<td class=\"gt_row gt_right\">2015</td>\n<td class=\"gt_row gt_left\">Base</td>\n<td class=\"gt_row gt_right\">562</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\"> 85.0&nbsp</td></tr>\n    <tr><td class=\"gt_row gt_left\">Ferrari</td>\n<td class=\"gt_row gt_left\">458 Italia</td>\n<td class=\"gt_row gt_right\">2014</td>\n<td class=\"gt_row gt_left\">Base Coupe</td>\n<td class=\"gt_row gt_right\">562</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\"> 85.0&nbsp</td></tr>\n    <tr><td class=\"gt_row gt_left\">Ferrari</td>\n<td class=\"gt_row gt_left\">488 GTB</td>\n<td class=\"gt_row gt_right\">2016</td>\n<td class=\"gt_row gt_left\">Base Coupe</td>\n<td class=\"gt_row gt_right\">661</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">100.0&nbsp</td></tr>\n    <tr><td class=\"gt_row gt_left\">Ferrari</td>\n<td class=\"gt_row gt_left\">California</td>\n<td class=\"gt_row gt_right\">2015</td>\n<td class=\"gt_row gt_left\">Base Convertible</td>\n<td class=\"gt_row gt_right\">553</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\"> 83.7&nbsp</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n## Format symbol first Function\n\nWe can try to wrap some of the `gt` code into a function and apply these transformations in bulk at the location of our choosing! This is especially important for making it generally apply to other types of inputs instead of JUST `%`. The function of interest is actually two custom functions, some `gt` functions, and a good chunk of logic.\n\nI've commented the individual sections as to their purpose, and included quite a bit of error-handling or protecting against various user inputs.\n\n::: {.cell}\n\n```{.r .cell-code}\nfmt_symbol_first <- function(\n  gt_data,\n  column = NULL,        # column of interest to apply to\n  symbol = NULL,        # symbol to add, optionally\n  suffix = \"\",          # suffix to add, optionally\n  decimals = NULL,      # number of decimal places to round to\n  last_row_n,           # what's the last row in data?\n  symbol_first = FALSE  # symbol before or after suffix?\n) {\n  \n  # Test and error out if mandatory columns are missing\n  stopifnot(\"`symbol_first` argument must be a logical\" = is.logical(symbol_first))\n  stopifnot(\"`last_row_n` argument must be specified and numeric\" = is.numeric(last_row_n))\n  stopifnot(\"Input must be a gt table\" = class(gt_data)[[1]] == \"gt_tbl\")\n\n  # needs to type convert to double to play nicely with decimals and rounding\n  # as it's converted to character by gt::text_transform\n  add_to_first <- function(x, suff = suffix, symb = symbol) {\n    if (!is.null(decimals)) {\n      x <- suppressWarnings(as.double(x))\n      fmt_val <- format(x = x, nsmall = decimals, digits = decimals)\n    } else {\n      fmt_val <- x\n    }\n\n    # combine the value, passed suffix, symbol -> html\n    if (isTRUE(symbol_first)) {\n      paste0(fmt_val, symb, suff) %>% gt::html()\n    } else {\n      paste0(fmt_val, suff, symb) %>% gt::html()\n    }\n  }\n\n  # repeat non-breaking space for combined length of suffix + symbol\n  # logic is based on is a NULL passed or not\n  if (!is.null(symbol) | !identical(as.character(symbol), character(0))) {\n    suffix <- ifelse(identical(as.character(suffix), character(0)), \"\", suffix)\n    length_nbsp <- c(\"&nbsp\", rep(\"&nbsp\", nchar(suffix))) %>%\n      paste0(collapse = \"\")\n  } else {\n    suffix <- ifelse(identical(as.character(suffix), character(0)), \"\", suffix)\n    length_nbsp <- rep(\"&nbsp\", nchar(suffix)) %>%\n      paste0(collapse = \"\")\n  }\n\n  # affect rows OTHER than the first row\n  add_to_remainder <- function(x, length = length_nbsp) {\n    if (!is.null(decimals)) {\n      # if decimal not null, convert to double\n      x <- suppressWarnings(as.double(x))\n      # then round and format ALL to force specific decimals\n      fmt_val <- format(x = x, nsmall = decimals, digits = decimals)\n    } else {\n      fmt_val <- x\n    }\n    paste0(fmt_val, length) %>% lapply(FUN = gt::html)\n  }\n\n  # pass gt object\n  # align right to make sure the spacing is meaningful\n  gt_data %>%\n    cols_align(align = \"right\", columns = vars({{ column }})) %>%\n    # convert to mono-font for column of interest\n    tab_style(\n      style = cell_text(font = google_font(\"Fira Mono\")),\n      locations = cells_body(columns = vars({{ column }}))\n    ) %>%\n    # transform first rows\n    text_transform(\n      locations = cells_body(vars({{ column }}), rows = 1),\n      fn = add_to_first\n    ) %>%\n    # transform remaining rows\n    text_transform(\n      locations = cells_body(vars({{ column }}), rows = 2:last_row_n),\n      fn = add_to_remainder\n    )\n}\n```\n:::\n\n### Use the function\n\nWe can now use that `fmt_symbol_first()` function, note that I'm testing a few different combinations of suffix/symbols, decimals, etc that may be a bit nonsensical in the table itself but are interactively testing that the results are what I expect. Specifically, I'm making sure that symbols/suffixes are added, and that the spacing is correct. While this is useful for sanity checking quickly, we can also take another step to apply some proper unit-testing in the next section.\n\n::: {.cell}\n\n```{.r .cell-code}\ngtcars %>% \n  head() %>% \n  dplyr::select(mfr, year, bdy_style, mpg_h, hp) %>% \n  dplyr::mutate(mpg_h = rnorm(n = dplyr::n(), mean = 22, sd = 1)) %>% \n  gt() %>% \n  opt_table_lines() %>% \n  fmt_symbol_first(column = mfr, symbol = \"&#x24;\", suffix = \" \", last_row_n = 6) %>%\n  fmt_symbol_first(column = year, symbol = NULL, suffix = \"%\", last_row_n = 6) %>%\n  fmt_symbol_first(column = mpg_h, symbol = \"&#37;\", suffix = NULL, last_row_n = 6, decimals = 1) %>% \n  fmt_symbol_first(column = hp, symbol = \"&#176;\", suffix = \"F\", last_row_n = 6, decimals = NULL, symbol_first = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"tjtqjxpcwe\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>@import url(\"https://fonts.googleapis.com/css2?family=Fira+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n@import url(\"https://fonts.googleapis.com/css2?family=Fira+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n@import url(\"https://fonts.googleapis.com/css2?family=Fira+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n@import url(\"https://fonts.googleapis.com/css2?family=Fira+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\nhtml {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#tjtqjxpcwe .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: solid;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: solid;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#tjtqjxpcwe .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: solid;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: solid;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#tjtqjxpcwe .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#tjtqjxpcwe .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#tjtqjxpcwe .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#tjtqjxpcwe .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: solid;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: solid;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#tjtqjxpcwe .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: solid;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: solid;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#tjtqjxpcwe .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#tjtqjxpcwe .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#tjtqjxpcwe .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#tjtqjxpcwe .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#tjtqjxpcwe .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: solid;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: solid;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#tjtqjxpcwe .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#tjtqjxpcwe .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#tjtqjxpcwe .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#tjtqjxpcwe .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: solid;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: solid;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#tjtqjxpcwe .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tjtqjxpcwe .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#tjtqjxpcwe .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#tjtqjxpcwe .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tjtqjxpcwe .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#tjtqjxpcwe .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#tjtqjxpcwe .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#tjtqjxpcwe .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tjtqjxpcwe .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#tjtqjxpcwe .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#tjtqjxpcwe .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#tjtqjxpcwe .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: solid;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#tjtqjxpcwe .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tjtqjxpcwe .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: solid;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#tjtqjxpcwe .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tjtqjxpcwe .gt_left {\n  text-align: left;\n}\n\n#tjtqjxpcwe .gt_center {\n  text-align: center;\n}\n\n#tjtqjxpcwe .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#tjtqjxpcwe .gt_font_normal {\n  font-weight: normal;\n}\n\n#tjtqjxpcwe .gt_font_bold {\n  font-weight: bold;\n}\n\n#tjtqjxpcwe .gt_font_italic {\n  font-style: italic;\n}\n\n#tjtqjxpcwe .gt_super {\n  font-size: 65%;\n}\n\n#tjtqjxpcwe .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#tjtqjxpcwe .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#tjtqjxpcwe .gt_slash_mark {\n  font-size: 0.7em;\n  line-height: 0.7em;\n  vertical-align: 0.15em;\n}\n\n#tjtqjxpcwe .gt_fraction_numerator {\n  font-size: 0.6em;\n  line-height: 0.6em;\n  vertical-align: 0.45em;\n}\n\n#tjtqjxpcwe .gt_fraction_denominator {\n  font-size: 0.6em;\n  line-height: 0.6em;\n  vertical-align: -0.05em;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">mfr</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">year</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">bdy_style</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">mpg_h</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">hp</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">Ford &#x24;</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">2017%</td>\n<td class=\"gt_row gt_left\">coupe</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">21.8&#37;</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">647&#176;F</td></tr>\n    <tr><td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">Ferrari&nbsp&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">2015&nbsp</td>\n<td class=\"gt_row gt_left\">coupe</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">21.2&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">597&nbsp&nbsp</td></tr>\n    <tr><td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">Ferrari&nbsp&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">2015&nbsp</td>\n<td class=\"gt_row gt_left\">convertible</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">24.0&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">562&nbsp&nbsp</td></tr>\n    <tr><td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">Ferrari&nbsp&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">2014&nbsp</td>\n<td class=\"gt_row gt_left\">coupe</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">21.3&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">562&nbsp&nbsp</td></tr>\n    <tr><td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">Ferrari&nbsp&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">2016&nbsp</td>\n<td class=\"gt_row gt_left\">coupe</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">22.0&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">661&nbsp&nbsp</td></tr>\n    <tr><td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">Ferrari&nbsp&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">2015&nbsp</td>\n<td class=\"gt_row gt_left\">convertible</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">22.1&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">553&nbsp&nbsp</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n## Unit testing\n\nAt this point, we've created a custom `gt` wrapper function, added some relatively robust checks into the function, but are still manually checking the output confirms to our expectations. We can perform proper unit testing with the [`{testthat}`](https://testthat.r-lib.org/index.html) package.\n\n> Testing your code can be painful and tedious, but it greatly increases the quality of your code. `testthat` tries to make testing as fun as possible, so that you get a visceral satisfaction from writing tests. \n\nWhile an in-depth run through of `testhat` is beyond the scope of this post, I have included an expandable section with a minimal example below, expanded from the \"R Packages\" book [chapter on testing](https://r-pkgs.org/tests.html):  \n\n<details><summary>`testthat` Example</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(testthat)\n\nstr_length(\"a\")   # 1 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nstr_length(\"ab\")  # 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nstr_length(\"abc\") # 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\nSo `str_length()` counts the length of a string, fairly straightforward!\n\nWe can convert this to a logical confirmation, which means that a computer can understand if the output was as expected, rather than just printing and reading which is mainly for our interactive use. I have included one `FALSE` output just as an example.\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_length(\"a\")   == 1 # 1 TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nstr_length(\"ab\")  == 2 # 2 TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nstr_length(\"abc\") == 3 # 3 TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nstr_length(\"abc\") == 1 # 3 FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\nWhile this testing is useful, we can make it even easier with `testhat`, by using `expect_equal()`. Now, these functions will not return anything if they pass. If they fail, then they will print an error, and a helpful statement saying what the failure was.\n\n::: {.cell}\n\n```{.r .cell-code}\n### All TRUE\ntestthat::expect_equal(str_length(\"a\"),   1) # TRUE\ntestthat::expect_equal(str_length(\"ab\"),  2) # TRUE\ntestthat::expect_equal(str_length(\"abc\"), 3) # TRUE\n```\n:::\n\nJust to show you, here's one where we get a `FALSE`, the match is off by 2.\n\n::: {.cell}\n\n```{.r .cell-code}\ntestthat::expect_equal(str_length(\"a\"),  3) # FALSE\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: str_length(\"a\") not equal to 3.\n1/1 mismatches\n[1] 1 - 3 == -2\n```\n:::\n:::\n\nThe last step, is wrapping our various tests into `test_that` structure. Here, while the individual tests return no visible output, we can get a friendly message saying they have all passed!\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\n  desc = \"str_length is number of characters\",\n  code = {\n    expect_equal(str_length(\"a\"), 1)\n    expect_equal(str_length(\"ab\"), 2)\n    expect_equal(str_length(\"abc\"), 3)\n  }\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed 😀\n```\n:::\n:::\n\nWe can also see what happens if there is a failure (`abcd` is not 3 characters, but 4).\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\n  desc = \"str_length is number of characters\",\n  code = {\n    expect_equal(str_length(\"a\"), 1)\n    expect_equal(str_length(\"ab\"), 2)\n    expect_equal(str_length(\"abc\"), 3)\n    expect_equal(str_length(\"abcd\"), 3)\n  }\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n── Failure (<text>:7:5): str_length is number of characters ────────────────────\nstr_length(\"abcd\") not equal to 3.\n1/1 mismatches\n[1] 4 - 3 == 1\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError:\n! Test failed\n```\n:::\n:::\n\n</details>\n\nThese tests can be used interactively, but ultimately are even more useful when rolled into an R package. For that next step, I recommend reading through the \"R Packages\" book, specifically the [Packages Chapter](https://r-pkgs.org/tests.html).\n\n### Testing `gt`\n\nNow you may say, well those minimal example tests were easy, it's just counting?! How do I test `gt`? We can treat `gt` exactly like what it is, a HTML table. Quick example below using our custom function (`fmt_symbol_first()`).\n\n::: {.cell}\n\n```{.r .cell-code}\nex_gt <- gtcars %>% \n  head() %>% \n  dplyr::select(mfr, year, bdy_style, mpg_h, hp) %>% \n  dplyr::mutate(mpg_h = c(20.2, 22.0, 20.8, 21.2, 22.8, 22.7)) %>% \n  gt() %>% \n  opt_table_font(font = google_font(\"Roboto Mono\")) %>%\n  opt_table_lines() %>% \n  fmt_symbol_first(column = mfr, symbol = \"&#x24;\", suffix = \" \", last_row_n = 6) %>%\n  fmt_symbol_first(column = year, symbol = NULL, suffix = \"%\", last_row_n = 6) %>%\n  fmt_symbol_first(column = mpg_h, symbol = \"&#37;\", suffix = NULL, last_row_n = 6, decimals = 1) %>% \n  fmt_symbol_first(column = hp, symbol = \"&#176;\", suffix = \"F\", last_row_n = 6, decimals = NULL, symbol_first = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n```\n:::\n\n```{.r .cell-code}\n# example table\nex_gt\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"lqsamxlktl\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>@import url(\"https://fonts.googleapis.com/css2?family=Fira+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n@import url(\"https://fonts.googleapis.com/css2?family=Fira+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n@import url(\"https://fonts.googleapis.com/css2?family=Fira+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n@import url(\"https://fonts.googleapis.com/css2?family=Fira+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n@import url(\"https://fonts.googleapis.com/css2?family=Roboto+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\nhtml {\n  font-family: 'Roboto Mono', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#lqsamxlktl .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: solid;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: solid;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#lqsamxlktl .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: solid;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: solid;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#lqsamxlktl .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#lqsamxlktl .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#lqsamxlktl .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#lqsamxlktl .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: solid;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: solid;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#lqsamxlktl .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: solid;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: solid;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#lqsamxlktl .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#lqsamxlktl .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#lqsamxlktl .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#lqsamxlktl .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#lqsamxlktl .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: solid;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: solid;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#lqsamxlktl .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#lqsamxlktl .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#lqsamxlktl .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#lqsamxlktl .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: solid;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: solid;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#lqsamxlktl .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#lqsamxlktl .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#lqsamxlktl .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#lqsamxlktl .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#lqsamxlktl .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#lqsamxlktl .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#lqsamxlktl .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#lqsamxlktl .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#lqsamxlktl .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: solid;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#lqsamxlktl .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#lqsamxlktl .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#lqsamxlktl .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: solid;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#lqsamxlktl .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#lqsamxlktl .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: solid;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#lqsamxlktl .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#lqsamxlktl .gt_left {\n  text-align: left;\n}\n\n#lqsamxlktl .gt_center {\n  text-align: center;\n}\n\n#lqsamxlktl .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#lqsamxlktl .gt_font_normal {\n  font-weight: normal;\n}\n\n#lqsamxlktl .gt_font_bold {\n  font-weight: bold;\n}\n\n#lqsamxlktl .gt_font_italic {\n  font-style: italic;\n}\n\n#lqsamxlktl .gt_super {\n  font-size: 65%;\n}\n\n#lqsamxlktl .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#lqsamxlktl .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#lqsamxlktl .gt_slash_mark {\n  font-size: 0.7em;\n  line-height: 0.7em;\n  vertical-align: 0.15em;\n}\n\n#lqsamxlktl .gt_fraction_numerator {\n  font-size: 0.6em;\n  line-height: 0.6em;\n  vertical-align: 0.45em;\n}\n\n#lqsamxlktl .gt_fraction_denominator {\n  font-size: 0.6em;\n  line-height: 0.6em;\n  vertical-align: -0.05em;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">mfr</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">year</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">bdy_style</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">mpg_h</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">hp</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">Ford &#x24;</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">2017%</td>\n<td class=\"gt_row gt_left\">coupe</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">20.2&#37;</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">647&#176;F</td></tr>\n    <tr><td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">Ferrari&nbsp&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">2015&nbsp</td>\n<td class=\"gt_row gt_left\">coupe</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">22.0&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">597&nbsp&nbsp</td></tr>\n    <tr><td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">Ferrari&nbsp&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">2015&nbsp</td>\n<td class=\"gt_row gt_left\">convertible</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">20.8&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">562&nbsp&nbsp</td></tr>\n    <tr><td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">Ferrari&nbsp&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">2014&nbsp</td>\n<td class=\"gt_row gt_left\">coupe</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">21.2&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">562&nbsp&nbsp</td></tr>\n    <tr><td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">Ferrari&nbsp&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">2016&nbsp</td>\n<td class=\"gt_row gt_left\">coupe</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">22.8&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">661&nbsp&nbsp</td></tr>\n    <tr><td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">Ferrari&nbsp&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">2015&nbsp</td>\n<td class=\"gt_row gt_left\">convertible</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">22.7&nbsp</td>\n<td class=\"gt_row gt_right\" style=\"font-family: &#39;Fira Mono&#39;;\">553&nbsp&nbsp</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n\n```{.r .cell-code}\n# what is it?\nex_gt %>% \n  as_raw_html() %>%  \n  str(max.level = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 'html' chr \"<table style=\\\"font-family: 'Roboto Mono', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubunt\"| __truncated__\n - attr(*, \"html\")= logi TRUE\n```\n:::\n:::\n\n### `rvest`\n\nThat's a relatively basic table, but if used interactively it will just print out the output. We can \"capture\" the raw HTML via `gt::as_raw_html()`, and then just treat it like another table to \"webscrape\" with `rvest`.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'rvest'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n```\n:::\n\n```{.r .cell-code}\n# create object as RAW html\nex_gt_raw <- ex_gt %>% \n  as_raw_html()\n\n# read into rvest, and grab the table body\nex_html_tab <- read_html(ex_gt_raw) %>% \n  html_node(\"table > tbody\") \n\n# 6 row table!\nex_html_tab\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{html_node}\n<tbody style=\"border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3;\">\n[1] <tr>\\n<td style=\"padding-top: 8px; padding-bottom: 8px; padding-left: 5px ...\n[2] <tr>\\n<td style=\"padding-top: 8px; padding-bottom: 8px; padding-left: 5px ...\n[3] <tr>\\n<td style=\"padding-top: 8px; padding-bottom: 8px; padding-left: 5px ...\n[4] <tr>\\n<td style=\"padding-top: 8px; padding-bottom: 8px; padding-left: 5px ...\n[5] <tr>\\n<td style=\"padding-top: 8px; padding-bottom: 8px; padding-left: 5px ...\n[6] <tr>\\n<td style=\"padding-top: 8px; padding-bottom: 8px; padding-left: 5px ...\n```\n:::\n:::\n\n### Test HTML\n\nNow that it's saved as HTML, we can extract a column, and we're back to raw strings! \n\n::: {.cell}\n\n```{.r .cell-code}\ncol1_extract <- ex_html_tab %>% \n    html_nodes(paste0(\"td:nth-child(\",1 , \")\")) %>% \n    html_text() \n\ncol1_extract\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Ford $\"            \"Ferrari&nbsp&nbsp\" \"Ferrari&nbsp&nbsp\"\n[4] \"Ferrari&nbsp&nbsp\" \"Ferrari&nbsp&nbsp\" \"Ferrari&nbsp&nbsp\"\n```\n:::\n:::\n\nNow, rather than using the whole string, I'm going to focus on testing the 1st row and then the remainder. Mainly because our function should do different things to the first row versus the remaining rows!\n\n::: {.cell}\n\n```{.r .cell-code}\ncol1_extract[1] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Ford $\"\n```\n:::\n:::\n\nSo this should be relatively straightforward, we want to do an exact match expecting `\"Ford $\"`. \n\n::: {.cell}\n\n```{.r .cell-code}\ntestthat::expect_match(col1_extract[1], \"Ford $\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: col1_extract\\[1\\] does not match \"Ford $\".\nActual value: \"Ford \\$\"\n```\n:::\n:::\n\nBUT oh no we get a failure??? This is because the `$` is a special character in `regex`, so we need to \"escape\" it with `\\\\`. This tells `regex` to parse it as a literal \"dollar sign\". After passing the escape, we now get a silent pass!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntestthat::expect_match(col1_extract[1], \"Ford \\\\$\")\n```\n:::\n\nWe can run it with `test_that()` as well, and since it passes we get our friendly little message!\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\n  desc = \"First word is Ford $\",\n  code = testthat::expect_match(col1_extract[1], \"Ford \\\\$\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed 😸\n```\n:::\n:::\n\n### Testing function\n\nNow, I want to test the individual columns for different things, so I'm going to write a test expectation function.\n\nI'm interested in:  \n\n* The column number  \n* The row number (ie first or remaining)  \n* A specific expectation  \n\nAll using the same HTML input\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_gt_by_col <- function(col_n, row_first = TRUE, expectation){\n  \n  # if row_first = TRUE, then just get the 1st row\n  # otherwise select the remainder\n  if(isTRUE(row_first)){\n    row_sel <- 1\n  } else {\n    row_sel <- 2:6\n  }\n  \n  # use our example html\n  # grab the column by number\n  # get the rows by selection\n  # test the expectation\n  ex_html_tab %>% \n    html_nodes(paste0(\"td:nth-child(\",col_n , \")\")) %>% \n    html_text() %>% \n    .[row_sel] %>% \n    testthat::expect_match(expectation)\n}\n```\n:::\n\nWe can then use our function and avoid having to copy-paste much at all!\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\n  desc = \"First word is Ford $\",\n  code = test_gt_by_col(1, row_first = TRUE, expectation = \"Ford \\\\$\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed 😸\n```\n:::\n:::\n\nJust a quick reminder, if it fails (I'm intentionally failing). We can see that the expectation doesn't match the remainder.\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\n  desc = \"First word is Ford $\",\n  code = test_gt_by_col(1, row_first = FALSE, expectation = \"Ford \\\\$\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n── Failure (<text>:15:3): First word is Ford $ ─────────────────────────────────\n`\\.` does not match \"Ford \\\\$\".\nActual values:\n* Ferrari&nbsp&nbsp\n* Ferrari&nbsp&nbsp\n* Ferrari&nbsp&nbsp\n* Ferrari&nbsp&nbsp\n* Ferrari&nbsp&nbsp\nBacktrace:\n 1. global test_gt_by_col(1, row_first = FALSE, expectation = \"Ford \\\\$\")\n 3. testthat::expect_match(., expectation)\n 4. testthat:::expect_match_(...)\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError:\n! Test failed\n```\n:::\n:::\n\n---\n\n### Put it all together\n\nWe can put it all together now, and test all of our columns of interest, with `testthat` using our custom testing function ON the output of the custom function we wrote earlier.\n\n<details><summary>Create HTML table, extract w/ `rvest`, define test function</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\nex_gt <- gtcars %>% \n  head() %>% \n  dplyr::select(mfr, year, bdy_style, mpg_h, hp) %>% \n  dplyr::mutate(mpg_h = c(20.2, 22.0, 20.8, 21.2, 22.8, 22.7)) %>% \n  gt() %>% \n  opt_table_font(font = google_font(\"Roboto Mono\")) %>%\n  opt_table_lines() %>% \n  fmt_symbol_first(column = mfr, symbol = \"&#x24;\", suffix = \" \", last_row_n = 6) %>%\n  fmt_symbol_first(column = year, symbol = NULL, suffix = \"%\", last_row_n = 6) %>%\n  fmt_symbol_first(column = mpg_h, symbol = \"&#37;\", suffix = NULL, last_row_n = 6, decimals = 1) %>% \n  fmt_symbol_first(column = hp, symbol = \"&#176;\", suffix = \"F\", last_row_n = 6, decimals = NULL, symbol_first = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n\nWarning: `columns = vars(...)` has been deprecated in gt 0.3.0:\n* please use `columns = c(...)` instead\n```\n:::\n\n```{.r .cell-code}\nex_gt_raw <- ex_gt %>% \n  as_raw_html()\n\n# read into rvest, and grab the table body\nex_html_tab <- read_html(ex_gt_raw) %>% \n  html_node(\"table > tbody\") \n\ntest_gt_by_col <- function(col_n, row_first = TRUE, expectation){\n  \n  # if row_first = TRUE, then just get the 1st row\n  # otherwise select the remainder\n  if(isTRUE(row_first)){\n    row_sel <- 1\n  } else {\n    row_sel <- 2:6\n  }\n  \n  # use our example html\n  # grab the column by number\n  # get the rows by selection\n  # test the expectation\n  ex_html_tab %>% \n    html_nodes(paste0(\"td:nth-child(\",col_n , \")\")) %>% \n    html_text() %>% \n    .[row_sel] %>% \n    testthat::expect_match(expectation)\n}\n```\n:::\n\n\n</details>\n\nNow we can run our tests on the specific columns and get a lot of \"praise\"! That's it for now, but maybe we'll explore putting these tests into a package down the line.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Test for escaped characters ---------------------------------------------\n# check that a suffix + symbol worked, and that escaped characters can be tested\ntestthat::test_that(\n  \"Escaped characters work\",\n  {\n    test_gt_by_col(1, expectation = \"Ford \\\\$\")\n    test_gt_by_col(1, row_first = FALSE, expectation = \"Ferrari&nbsp&nbsp\")\n  }\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed 🎊\n```\n:::\n\n```{.r .cell-code}\n# Test for raw percent ----------------------------------------------------\n# on this column we used the literal string of %\ntestthat::test_that(\n  \"Raw percent character works\",\n  {\n    test_gt_by_col(2, expectation = \"2017%\")\n    test_gt_by_col(2, row_first = FALSE, expectation = \"201[4-7]&nbsp\")\n  }\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed 🌈\n```\n:::\n\n```{.r .cell-code}\n# Test for symbolic percent -----------------------------------------------\n# on this column we used the HTML code for percent\ntestthat::test_that(\n  \"HTML symbol for percent works\",\n  {\n    test_gt_by_col(4, expectation = \"20.2%\")\n    test_gt_by_col(4, row_first = FALSE, expectation = \"[0-9]+&nbsp\")\n  }\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed 🥳\n```\n:::\n\n```{.r .cell-code}\n# Test for suffix + symbol ------------------------------------------------\n# test for case where the symbol is in front of suffix\ntestthat::test_that(\n  \"A combined suffix + symbol work\",\n  {\n    test_gt_by_col(5, expectation = \"647°F\")\n    test_gt_by_col(5, row_first = FALSE, expectation = \"[0-9]+&nbsp&nbsp\")\n  }\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTest passed 😸\n```\n:::\n:::\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.1.1 (2021-08-10)\n os       macOS Monterey 12.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-04-25\n pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n quarto   0.9.294 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n dplyr       * 1.0.8   2022-02-08 [1] CRAN (R 4.1.1)\n forcats     * 0.5.1   2021-01-27 [1] CRAN (R 4.1.1)\n ggplot2     * 3.3.5   2021-06-25 [1] CRAN (R 4.1.1)\n gt          * 0.4.0   2022-02-15 [1] CRAN (R 4.1.1)\n purrr       * 0.3.4   2020-04-17 [1] CRAN (R 4.1.0)\n readr       * 2.0.2   2021-09-27 [1] CRAN (R 4.1.1)\n rvest       * 1.0.2   2021-10-16 [1] CRAN (R 4.1.1)\n scales      * 1.1.1   2020-05-11 [1] CRAN (R 4.1.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.1.1)\n stringr     * 1.4.0   2019-02-10 [1] CRAN (R 4.1.1)\n testthat    * 3.1.3   2022-03-29 [1] CRAN (R 4.1.1)\n tibble      * 3.1.6   2021-11-07 [1] CRAN (R 4.1.1)\n tidyr       * 1.2.0   2022-02-01 [1] CRAN (R 4.1.1)\n tidyverse   * 1.3.1   2021-04-15 [1] CRAN (R 4.1.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}