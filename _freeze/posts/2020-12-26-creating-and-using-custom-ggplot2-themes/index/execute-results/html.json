{
  "hash": "b9a81abb924a3d1654457d1be8aa1e7d",
  "result": {
    "markdown": "---\ntitle: \"Creating and using custom ggplot2 themes\"\ndescription: |\n  The best way to make each plot your own.\nauthor: Thomas Mock\ndate: 12-26-2020\nimage: preview.png\ncategories:\n  - ggplot2\n  - data visualization\n  - theme\n  - tidyverse\n  - NFL\n  - espnscrapeR\n---\n\n\n\n\n# Graphs for Communication\n\n`ggplot2` is an R package for producing statistical graphics, and is an implementation of the \"Grammar of Graphics\" by Leland Wilkinson. As such the primary way that folks use `ggplot2` initially is for robust, fast, and easy exploratory data analysis or the creation of scientific/statistical plots while analyzing data. Here the primary use-case is for the data scientist themself, and the quick iteration of graphs. Relatively little time is spent on adjusting the theme or on making the graph \"beautiful\" as it may be ephemeral, or simply a visual check of the underlying relationships.\n\nThe next stage in many analyses is creating a graphic primarily intended for _others_ to consume. At this point, the graphic needs to be more engaging, and often needs to be more focused on telling a \"story\" or reinforcing some point that you are trying to present from the underlying data. \n\nIn this blogpost, I'll be covering some example themes, how to create and apply a theme, and then walk through some real life applications. I'll leave larger color theory, and creating your own `ggplot2` color scales for a future blogpost.  \n\n## Themes\n\n`ggplot2` is remarkably extensible and customizable both through specific graphical components (`geom_`, `scale_`, `aes`, etc) or by theme components (grid lines, background colors, fonts, etc).  There is also the concept of fully established themes which change many theme components at once.\n\nFirst, we'll get some data and load our libraries of interest.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(espnscrapeR)\nlibrary(ggthemes)\n```\n:::\n\nWe're returning some data on NFL win rates, playoff seeding, and point differentials (ie difference between points given up and points scored).\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_83f5a3d335e9f8a84b772b1f96fb4495'}\n\n```{.r .cell-code}\nnfl_stand <- 2014:2020 %>% \n  map_dfr(get_nfl_standings)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nReturning 2014\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nReturning 2015\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nReturning 2016\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nReturning 2017\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nReturning 2018\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nReturning 2019\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nReturning 2020\n```\n:::\n\n```{.r .cell-code}\ndiff_df <- nfl_stand %>% \n  select(season = season, conf, team_name, team_abb = team_abb, team_logo, win_pct, pts_diff) %>% \n  arrange(season, conf, desc(win_pct))\n\ndiff_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 224 × 7\n   season conf  team_name team_abb team_logo                    win_pct pts_diff\n    <int> <chr> <chr>     <chr>    <chr>                          <dbl>    <dbl>\n 1   2014 AFC   Patriots  NE       https://a.espncdn.com/i/tea…   0.75       155\n 2   2014 AFC   Broncos   DEN      https://a.espncdn.com/i/tea…   0.75       128\n 3   2014 AFC   Steelers  PIT      https://a.espncdn.com/i/tea…   0.688       68\n 4   2014 AFC   Colts     IND      https://a.espncdn.com/i/tea…   0.688       89\n 5   2014 AFC   Bengals   CIN      https://a.espncdn.com/i/tea…   0.656       21\n 6   2014 AFC   Ravens    BAL      https://a.espncdn.com/i/tea…   0.625      107\n 7   2014 AFC   Chiefs    KC       https://a.espncdn.com/i/tea…   0.562       72\n 8   2014 AFC   Texans    HOU      https://a.espncdn.com/i/tea…   0.562       65\n 9   2014 AFC   Chargers  SD       https://a.espncdn.com/i/tea…   0.562        0\n10   2014 AFC   Bills     BUF      https://a.espncdn.com/i/tea…   0.562       54\n# … with 214 more rows\n```\n:::\n:::\n\n### `theme_grey()`\n\nThe default `ggplot2` theme is `theme_grey()`, it's major components are a grey `panel.background`, white `panel.grid` lines, coupled with a white `plot.background`, black `text` and a default black color for `geom_` components.\n\n> The signature ggplot2 theme with a grey background and white gridlines, designed to put the data forward yet make comparisons easy.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diff_df, aes(x = pts_diff, y = win_pct)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n### `theme_minimal()`\n\nThis theme drops the `panel.background` and no longer has the visual separation between the panel vs plot areas.\n\n> A minimalistic theme with no background annotations.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diff_df, aes(x = pts_diff, y = win_pct)) +\n  geom_point() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n### `theme_bw()`\n\nIt's major components are a white `panel.background`, grey `panel.grid` lines, coupled with a white `plot.background`, black `text` and a default black color for `geom_` components.\n\n> The classic dark-on-light ggplot2 theme. May work better for presentations displayed with a projector.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diff_df, aes(x = pts_diff, y = win_pct)) +\n  geom_point() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n### Other themes\n\nThere are several other themes built into `ggplot2`, and other packages that provide new themes. The most well-known external theme package is  `ggthemes`, which provides a number of Data Journalism themes such as `theme_few()`, `theme_fivethirtyeight()`, `theme_economist()` and others.\n\nThese are implementations of very opinionated frameworks, and highlight the extensibility of the `ggplot2` theme components.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diff_df, aes(x = pts_diff, y = win_pct)) +\n  geom_point() +\n  ggthemes::theme_fivethirtyeight()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diff_df, aes(x = pts_diff, y = win_pct)) +\n  geom_point() +\n  ggthemes::theme_economist()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n## `ggplot2` theme components\n\nYou can always change specific theme components one at a time or in conjunction with a proper `theme_`. For example, we can apply the `theme_fivethirtyeight()` theme and then change one of the theme components individually.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diff_df, aes(x = pts_diff, y = win_pct)) +\n  geom_point() +\n  ggthemes::theme_fivethirtyeight() +\n  theme(\n    panel.grid.major = element_line(color = \"red\")\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\nThere are dozens of customizable theme components. They are outlined in the [`ggplot2` documentation](https://ggplot2.tidyverse.org/reference/theme.html). A deep walkthrough of a lot of `ggplot2` customizations can be found on [Cedric Scherer's blog](https://cedricscherer.netlify.app/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/#toc). Kieran Healy's [Data Visualization: A practical introduction](https://socviz.co/refineplots.html#refineplots) covers additional considerations for refining and customizing plots and why certain decisions are good.\n\n### `ggplot2` theme elements\n\nFor each of the theme components there are one of a few theme [**elements**](https://ggplot2.tidyverse.org/reference/element.html). For example, to change the axis grid line color, you'll use `element_line()` as in the following pseudocode:  \n\n```\nplot_object +\n  theme(panel.grid.major = element_line(color = \"red\"))\n```\n\nFor the theme elements, there are:  \n\n- `element_line()` - change line element components, takes arguments like `color`, `size`, `linetype` (dotted, dashed, solid, etc)   \n\n- `element_rect()` - change rectangular components like plot backgrounds, legend backgrounds, etc, takes arguments like `fill`, `color`, `size`  \n\n- `element_text()` - change text components like axis labels, titles, and takes arguments like `family` (font family), `face` (bold, italics, etc), `hjust`/`vjust` (horizontal or vertical alignment), `color`, etc  \n\n- `element_blank()` - completely remove an element by name  \n\n- `margin()` - adjust margins of an element, can be used within some other theme componenets, and takes arguments of `t` (top), `r` (right), `b` (bottom), `l` (left), and `unit` (unit such as points, in, cm, etc)  \n\n- `rel()` - relative sizing of elements, useful for text especially, ie choosing a base font size and scaling the titles vs body fonts relative to each other  \n\nYou can always refer to the [`ggplot2` documentation](https://ggplot2.tidyverse.org/reference/theme.html) for which theme element to use, but you can also typically \"*guess*\" which is the right one to use by referring to the output *type* (ie text uses `element_text()`, lines use `element_line()`, etc).\n\n---\n\n# Inspiration\n\nFor inspiration, I often find that [\"Stealing like an artist\"](https://austinkleon.com/steal/) is my favorite approach.\n\n> Your job is to collect good ideas. The more good ideas you collect, the more you can choose from to be influenced by.\n\n> Plagiarism is trying to pass someone else’s work off as your own. Copying is about reverse-engineering.\n\nWith this approach, you are allowing yourself to be influenced by \"good\" work, and learning how to implement the approaches of experts while making it your own. I find that FiveThirtyEight as an organization produces great graphics and tables, and thus I take a lot of influence from their approaches with my own novel data. It helps that they do produce some of their graphics in `ggplot2`!\n\nThat being said, projects like [`#TidyTuesday`](http://tidytuesday.rocks/) or `#StorytellingWithData` can also give you a much more focused batch of concepts to borrow from as the focus is on applying concepts as a community with either a similar output or similar starting data.\n\n- [FiveThirtyEight's Best charts of the year](https://fivethirtyeight.com/features/the-56-best-and-weirdest-charts-we-made-in-2019/)  \n\n- [New York Time's Graphs of 2020](https://www.nytimes.com/2020/06/10/learning/over-60-new-york-times-graphs-for-students-to-analyze.html)  \n\n- [Storytelling with Data's challenges](http://www.storytellingwithdata.com/blog/2018/6/19/june-swdchallenge-recap-slopegraphs)  \n\n- [`TidyTuesday.rocks`](http://tidytuesday.rocks/) - a shiny app that collects `#TidyTuesday` dataviz and lets you interact with them by a specific topic/week  \n\n---\n\n# A DataViz Journey\n\nLet's begin our journey by telling two stories, and working through the refinement of plots to help tell your story. \n\nStory one is a continuation of our data above. We're exploring the relationship between scoring points (offense), preventing the opposing team from scoring points (defense), and how this relates to wins. This is a relatively obvious story, but has some neat \"sub\" stories we can look into.\n\nThe second story will be about a specific team (the Indianapolis Colts), and how their approach to defense is effective while being very different than other teams.\n\nNote that since this is using *live* data feeds, to recreate the plots exactly as they are you'd need to read in the data I used below.\n\n::: {.cell}\n\n```{.r .cell-code}\ndiff_df <- readr::read_csv(\"https://raw.githubusercontent.com/jthomasmock/radix_themockup/master/static/diff_df.csv\")\ncombo_pass <- readr::read_csv(\"https://raw.githubusercontent.com/jthomasmock/radix_themockup/master/static/combo_pass.csv\")\n```\n:::\n\n\n---\n\n# Point pts_diff\n\nPoint differential is a simple metric (points scored - points against) that is pretty predictive of overall win rate and making the playoffs. Teams that score more points than the other team typically win more games, which is fairly obvious!\n\nHowever simply returning the plot below may not be as engaging to a lay audience or tell some of the nuance of what happens in individual seasons.\n\n<details><summary>Data Collection and Plot</summary>\n\n::: {.cell hash='index_cache/html/scrape data_9e3b012f41e6201007f199805f821e75'}\n\n```{.r .cell-code}\nnfl_stand <- 2014:2020 %>% \n  map_dfr(get_nfl_standings)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nReturning 2014\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nReturning 2015\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nReturning 2016\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nReturning 2017\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nReturning 2018\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nReturning 2019\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nReturning 2020\n```\n:::\n\n```{.r .cell-code}\nnfl_stand_plot <- nfl_stand %>% \n  ggplot(aes(x = pts_diff, y = win_pct)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n```\n:::\n\n</details>\n\n::: {.cell}\n\n```{.r .cell-code}\nnfl_stand_plot\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nThat plot told us there is a fairly linear response between having a larger point differential and having a better win rate, but does winning games and scoring more points always guarantee a playoff spot or even possibly missing the playoffs?\n\n## Playoff Teams\n\nLet's add a color that shows where playoff teams fit into the big picture. Note that in 2020 teams with a ranking of 7th or better make the playoffs vs previously only the top 6 teams made it.\n\n<details><summary>Add Color</summary>\n\n::: {.cell fig.dim='[8,6]'}\n\n```{.r .cell-code}\nnfl_stand %>% \n  mutate(\n    color = case_when(\n      season < 2020 & seed <= 6 ~ \"blue\",\n      season == 2020 & seed <= 7 ~ \"blue\",\n      TRUE ~  \"red\"\n    )\n  ) %>% \n  ggplot(aes(x = pts_diff, y = win_pct)) +\n  geom_vline(xintercept = 0, size = 0.75, color = \"#737373\") +\n  geom_point(aes(color = color))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/nfl-stand-color-1.png){width=4000}\n:::\n:::\n\n</details>\n\n::: {.cell fig.dim='[8,6]'}\n::: {.cell-output-display}\n![](index_files/figure-html/nfl-stand-color-1.png){width=4000}\n:::\n:::\n\n\n## Add some color\n\nUh-oh... what happened with the colors??? We told it to be blue and red but it reversed the colors!\n\nWe needed a `scale_color_identity()` call. While we're adding color, let's also add some \"color commentary\" of the axes, a title, and a source caption. There we go! Now we can show that: \"Playoff teams typically have a positive point differential\". I'll also bump up the size of the points to bump up the \"ink to white\" ratio and some transparency (alpha) so that overlapping points are clear.\n\nLastly, I've added a vertical line at the 0 mark to clearly indicate the transition from negative to positive point differential.\n\n<details><summary>Proper Colors and Text</summary>\n\n::: {.cell fig.dim='[6,4]'}\n\n```{.r .cell-code}\nnfl_stand %>% \n  mutate(\n    color = case_when(\n      season < 2020 & seed <= 6 ~ \"blue\",\n      season == 2020 & seed <= 7 ~ \"blue\",\n      TRUE ~  \"red\"\n    )\n  ) %>% \n  ggplot(aes(x = pts_diff, y = win_pct)) +\n  geom_vline(xintercept = 0, size = 0.75, color = \"#737373\") +\n  geom_point(\n    aes(color = color),\n    size = 3, alpha = 0.8\n    ) +\n  scale_color_identity() +\n  labs(x = \"Points Differential\", y = \"Win Percent\",\n       title = \"Playoff teams typically have a positive point differential\",\n       subtitle = \"Data through week 15 of the 2020 NFL Season\",\n       caption = \"Plot: @thomas_mock | Data: ESPN\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/nfl_stand_color2-1.png){width=3000}\n:::\n:::\n\n</details>\n\n::: {.cell fig.dim='[6,4]'}\n::: {.cell-output-display}\n![](index_files/figure-html/nfl_stand_color2-1.png){width=3000}\n:::\n:::\n\n\n## Refine labels\n\nNow, because we don't have a legend for the colors, let's add some direct labels to indicate what's going on. I'll use `ggtext` to add nicely formatted color text. Note that I've also borrowed the NFL shield's blue and red hex color code to add a bit more engaging color for both the labels and points. Lastly, I've also converted the y-axis from decimals to proper percent labels via `scales::percent_format()` and some better breakpoints.\n\nThis is starting to look a lot better, but I'm not a huge fan of the base theme.\n\n<details><summary>Refine Labels</summary>\n::: {.cell fig.dim='[8,6]'}\n\n```{.r .cell-code}\nlibrary(ggtext)\n\nplayoff_label_scatter <- tibble(\n  pts_diff = c(25,-125), y = c(0.3, 0.8), \n  label = c(\"Missed<br>Playoffs\", \"Made<br>Playoffs\"),\n  color = c(\"#D50A0A\", \"#013369\")\n)\n\n\nplayoff_diff_plot <- nfl_stand %>% \n  mutate(\n    color = case_when(\n      season < 2020 & seed <= 6 ~ \"#013369\",\n      season == 2020 & seed <= 7 ~ \"#013369\",\n      TRUE ~  \"#D50A0A\"\n    )\n  ) %>% \n  ggplot(aes(x = pts_diff, y = win_pct)) +\n  geom_vline(xintercept = 0, size = 0.75, color = \"#737373\") +\n  geom_hline(yintercept = 0, size = 0.75, color = \"#737373\") +\n  geom_point(\n    aes(color = color),\n    size = 3, alpha = 0.8\n    ) +\n  ggtext::geom_richtext(\n    data = playoff_label_scatter,\n    aes(x = pts_diff, y = y, label = label, color = color),\n    fill = \"#f0f0f0\", label.color = NA, # remove background and outline\n    label.padding = grid::unit(rep(0, 4), \"pt\"), # remove padding\n    family = \"Chivo\", hjust = 0.1, fontface = \"bold\",\n    size = 8\n  ) +\n  scale_color_identity() +\n  labs(x = \"Points Differential\", y = \"Win Percent\",\n       title = \"Playoff teams typically have a positive point differential\",\n       subtitle = \"Data through week 15 of the 2020 NFL Season\",\n       caption = str_to_upper(\"Plot: @thomas_mock | Data: ESPN\")) +\n  scale_y_continuous(\n    labels = scales::percent_format(accuracy = 1),\n    breaks = seq(.0, 1, by = .10)\n    ) +\n  scale_x_continuous(\n    breaks = seq(-200, 250, by = 50)\n  )\n```\n:::\n\n</details>\n\n::: {.cell fig.dim='[8,6]'}\n\n```{.r .cell-code}\nplayoff_diff_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=4000}\n:::\n:::\n\n\n## Premade themes\n\nNow, as mentioned earlier we can use themes to change theme components in bulk. Since we're interested in some FiveThirtyEight style plots, let's try the `theme_fivethirtyeight()` from `ggthemes`.\n\nThis looks relatively close to the right overall style, but we lost axis labels, and the fonts are still a bit basic. Let's try and build our own!\n\n::: {.cell fig.dim='[8,6]'}\n\n```{.r .cell-code}\nplayoff_diff_plot +\n  ggthemes::theme_fivethirtyeight() \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=4000}\n:::\n:::\n\n## Custom Themes\n\nThere are two ways of building your own themes:  \n\n- `theme()` - Add theme components individually  \n- `theme_?? %+replace%` - Apply an existing theme and overwriting components of it  \n\n### `theme()`\n\nLet's first just build up the theme components, we'll be attempting to recreate the FiveThirtyEight theme from scratch. I'm focusing on the minimal changes necessary to recreate the plotting style. We need a lightgrey background, grey gridlines, larger text with a specific font. Note that I'm using `systemfonts` to load all my system font libraries into R.\n\nA quick example of a FiveThirtyEight style plot:  \n\n![](https://fivethirtyeight.com/wp-content/uploads/2019/04/roeder-jeopary-folo-2.png?w=700)\n\nIn short, a few concepts that make up the FiveThirtyEight \"style guide\":  \n\n- Focus on Web, ie relatively small graphics  \n- Light smoke-grey background with grey gridlines  \n- Black Plot Titles/Subtitles and Axis Labels  \n- Grey axis text (ie numbers on axis)  \n- LARGE plot titles and axis labels, with medium subtitles and axis text  \n- Always add a source  \n- Bright colors for plots  \n\nThere's a bit more fine details to what makes their plots so _good_ but that covers the big parts we'll try to capture in our theme. Some of the nuance is up to the individual to enact (ie choosing fonts, specific colors, _just_ how big to make the fonts/points/etc).\n\nThe first pass at a theme that we've created to match that style. I've added comments as to what different theme elements change.\n\n<details><summary>Custom Theme Code</summary>\n::: {.cell}\n\n```{.r .cell-code}\ntheme_538 <- function(..., base_size = 12) {\n  \n    theme(\n      # plotting components\n      \n      ## drop minor gridlines\n      panel.grid.minor = element_blank(),\n      # change grid lines to gray\n      panel.grid.major =  element_line(color = \"#d0d0d0\"),\n      # fill the plot and panel spaces with grey and remove border\n      panel.background = element_rect(fill = \"#f0f0f0\", color = NA),\n      plot.background = element_rect(fill = \"#f0f0f0\", color = NA),\n      panel.border = element_blank(),\n      # remove strip background\n      strip.background = element_blank(),\n      # adjust the margins of plots and remove axis ticks\n      plot.margin = margin(0.5, 1, 0.5, 1, unit = \"cm\"),\n      axis.ticks = element_blank(),\n      # change text family, size, and adjust position of titles\n      text = element_text(family = \"Chivo\", size = base_size),\n      axis.text = element_text(face = \"bold\", color = \"grey\", size = base_size),\n      axis.title = element_text(face = \"bold\", size = rel(1.33)),\n      axis.title.x = element_text(margin = margin(0.5, 0, 0, 0, unit = \"cm\")),\n      axis.title.y = element_text(margin = margin(0, 0.5, 0, 0, unit = \"cm\"), angle =90),\n      plot.title = element_text(face = \"bold\", size = rel(1.67), hjust = 0),\n      plot.title.position = \"plot\",\n      plot.subtitle = element_text(size = 16, margin = margin(0.2, 0, 1, 0, unit = \"cm\"), hjust = 0),\n      plot.caption = element_text(size = 10, margin = margin(1, 0, 0, 0, unit = \"cm\"), hjust = 1),\n      strip.text = element_text(size = rel(1.33), face = \"bold\"),\n      ...\n    )\n}\n```\n:::\n\n</details>\n\nNow let's apply the theme to our plot.\n\n::: {.cell fig.dim='[8,6]'}\n\n```{.r .cell-code}\nplayoff_diff_plot +\n  theme_538()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=4000}\n:::\n:::\n\nI think we've created a nice representation of the FiveThirtyEight style!\n\n### `theme_?? %+replace%`\n\nThe `%+replace%` version instead applies a theme and then completely replaces those components rather than adding to them. This is typically more robust, but requires you to specific more arguments as they're removed otherwise. For our purposes the code inside `theme()` is identical but there are situations where building up by `theme()` alone requires less initial work but is less robust to \"real life\" edge cases.\n\n<details><summary>`%+replace%` theme</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_539 <- function(base_size = 12, base_family = \"Chivo\") {\n  \n  theme_grey(base_size = base_size, base_family = base_family) %+replace%\n    theme(\n      panel.grid.minor = element_blank(),\n      axis.ticks = element_blank(),\n      text = element_text(family = \"Chivo\", size = base_size),\n      axis.text = element_text(face = \"bold\", color = \"grey\", size = base_size),\n      axis.title = element_text(face = \"bold\", size = rel(1.33)),\n      axis.title.x = element_text(margin = margin(0.5, 0, 0, 0, unit = \"cm\")),\n      axis.title.y = element_text(margin = margin(0, 0.5, 0, 0, unit = \"cm\"), angle =90),\n      plot.title = element_text(face = \"bold\", size = rel(1.67), hjust = 0),\n      plot.title.position = \"plot\",\n      plot.subtitle = element_text(size = 16, margin = margin(0.2, 0, 1, 0, unit = \"cm\"), hjust = 0),\n      plot.caption = element_text(size = 10, margin = margin(1, 0, 0, 0, unit = \"cm\"), hjust = 1),\n      plot.background = element_rect(fill = \"#f0f0f0\", color = NA),\n      panel.background = element_rect(fill = \"#f0f0f0\", color = NA),\n      panel.grid.major =  element_line(color = \"#d0d0d0\"),\n      panel.border = element_blank(),\n      plot.margin = margin(0.5, 1, 0.5, 1, unit = \"cm\"),\n      strip.background = element_blank(),\n      strip.text = element_text(size = rel(1.33), face = \"bold\")\n    )\n}\n```\n:::\n\n</details>\n\n::: {.cell fig.dim='[8,6]'}\n\n```{.r .cell-code}\nplayoff_diff_plot +\n  theme_539()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=4000}\n:::\n:::\n\n## Same Data, Different Story\n\nThe Same Data, Different Story (SDDS) means we can use the same data in a different plot to tell a slightly different story. We can now represent theNow we're going to use our theme and the same data, but represent the data a bit differently. We'll load the `ggridges` package to let us plot many distributions at once. Again we're adjusting the colors, plotting the data, and adding our theme. Overall this looks pretty excellent out of the gate! This is why themes + custom colors are so useful as you can get 80% of the way there with just those two changes.\n\nWe can see that for most years playoff teams are more frequently with positive point differentials and non-playoff teams have negative differentials, but there are clear cases (2014, 2016) where the story is not as clean!\n\n::: {.cell fig.dim='[8,12]'}\n\n```{.r .cell-code}\nlibrary(ggridges)\n\nstand_density <- nfl_stand %>% \n  mutate(\n    color = case_when(\n      season < 2020 & seed <= 6 ~ \"#013369\",\n      season == 2020 & seed <= 7 ~ \"#013369\",\n      TRUE ~  \"#D50A0A\"\n    )\n  ) %>% \n  ggplot(aes(x = pts_diff, y = factor(season), color = color, fill = color)) +\n  geom_vline(xintercept = 0.5, size = 0.75, color = \"#737373\") +\n  geom_density_ridges(alpha = 0.8, scale = 1.1) +\n  scale_color_identity(aesthetics = c(\"fill\", \"color\")) +\n  theme_538()\n\nstand_density\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPicking joint bandwidth of 30.5\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=4000}\n:::\n:::\n\n### Add context\n\nWe can add a bit more context with custom embedded labels, a title, subtitle, etc and by adjusting some of the x/y breaks. I'm going to completely drop the y-gridlines since they're not needed. Note that for the custom annotations that factors are represented essentially as discrete ordered integers, so for the 7 years we have plotted we can put a label just above the last year by plotting at 7.5 (just above the 7th year/2020).\n\n<details><summary>Add Context</summary>\n\n::: {.cell fig.dim='[8,12]'}\n\n```{.r .cell-code}\n# create a small dataset for the custom annotations\nplayoff_label_ridge <- tibble(\n  y = c(7.75, 7.75), pts_diff = c(-250,150),\n  label = c(\"Missed<br>Playoffs\", \"Made<br>Playoffs\"),\n  color = c(\"#D50A0A\", \"#013369\")\n)\n\nstand_density +\n  scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +\n  coord_cartesian(xlim = c(-250, 250)) +\n  ggtext::geom_richtext(\n    data = playoff_label_ridge,\n    aes(x = pts_diff, y = y, label = label, color = color),\n    fill = \"#f0f0f0\", label.color = NA, # remove background and outline\n    label.padding = grid::unit(rep(0, 4), \"pt\"), # remove padding\n    family = \"Chivo\", hjust = 0 , fontface = \"bold\",\n    size = 6\n  ) +\n  theme_538() + \n  theme(panel.grid.major.y = element_blank()) +\n  labs(\n    x = \"Point Differential\", y = \"\",\n    title = \"Playoff teams typically have a positive point differential\",\n    subtitle = \"Data through week 15 of the 2020 NFL Season\",\n    caption = \"Plot: @thomas_mock | Data: ESPN\"\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPicking joint bandwidth of 30.5\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/ridge-plot-1.png){width=4000}\n:::\n:::\n\n</details>\n\n::: {.cell fig.dim='[8,12]'}\n::: {.cell-output .cell-output-stderr}\n```\nPicking joint bandwidth of 30.5\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/ridge-plot-1.png){width=4000}\n:::\n:::\n\n\n\n\nAnd if you want to look at the full code to create this all at once, see the expandable tag below.\n\n<details><summary>Full code</summary>\n\n::: {.cell fig.dim='[8,12]'}\n\n```{.r .cell-code}\nlibrary(ggridges)\n\nplayoff_label_ridge <- tibble(\n  y = c(7.5, 7.5), pts_diff = c(-225,150),\n  label = c(\"Missed<br>Playoffs\", \"Made<br>Playoffs\"),\n  color = c(\"#D50A0A\", \"#013369\")\n)\n\n\nnfl_stand %>% \n  mutate(\n    color = case_when(\n      season < 2020 & seed <= 6 ~ \"#013369\",\n      season == 2020 & seed <= 7 ~ \"#013369\",\n      TRUE ~  \"#D50A0A\"\n    )\n  ) %>% \n  ggplot(aes(x = pts_diff, y = factor(season), color = color, fill = color)) +\n  geom_vline(xintercept = 0.5, size = 0.75, color = \"#737373\") +\n  geom_density_ridges(alpha = 0.8, scale = 1.1) +\n  ggtext::geom_richtext(\n    data = playoff_label_ridge,\n    aes(x = pts_diff, y = y, label = label, color = color),\n    fill = \"#f0f0f0\", label.color = NA, # remove background and outline\n    label.padding = grid::unit(rep(0, 4), \"pt\"), # remove padding\n    family = \"Chivo\", hjust = 0 , fontface = \"bold\",\n    size = 6\n  ) +\n  scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +\n  coord_cartesian(xlim = c(-250, 250)) +\n  scale_color_identity(aesthetics = c(\"fill\", \"color\")) +\n  theme_538() +\n  theme(panel.grid.major.y = element_blank()) +\n  labs(\n    x = \"Point Differential\", y = \"\",\n    title = \"Playoff teams typically have a positive point differential\",\n    subtitle = \"Data through Week 15 of the 2020 NFL Season\",\n    caption = \"Plot: @thomas_mock | Data: ESPN\"\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPicking joint bandwidth of 30.5\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=4000}\n:::\n:::\n\n</details>\n\n---\n\n## SDDS 2: Rise of 2020\n\nWe can go one step deeper on the Same Data, Different Story principle and plot the data just a bit differently. Let's plot the playoff teams for 2020 (top 7), and the top two \"on-the-bubble\" teams. I've added the `theme_538()`, and a horizontal line at the 0 mark again. Note that I'm using `tidytext::reorder_within()` to reorder the teams by their playoff seed within a conference. `reorder()` would work here as well, so `tidytext::reorder_within()` isn't *truly* necessary, but can be very useful when re-ordering columns across facets.\n\n::: {.cell fig.dim='[10,8]'}\n\n```{.r .cell-code}\nstand_df <- nfl_stand %>% \n  filter(season == 2020)\n\nstand_df %>% \n  filter(seed <= 12) %>% \n  ggplot(aes(x = tidytext::reorder_within(team_abb, seed, conf), y = pts_diff)) +\n  geom_col() + \n  tidytext::scale_x_reordered() +\n  facet_grid(~conf, scales = \"free_x\") +\n  geom_hline(yintercept = 0, size = 0.75, color = \"#737373\") +\n  theme_538()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=5000}\n:::\n:::\n\n### Add Context\n\nRather than labeling the x-axis with team, we could supply playoff seed. We'll add our titles, captions, etc along with a vertical line for separation of the playoff vs non-playoff teams, and a vertical line to separate the Y-axis from the X-axis baseline. We've also expanded the break points on the y-axis and dropped the x-axis gridlines.\n\n<details><summary>Add Context</summary>\n\n::: {.cell fig.dim='[10,8]'}\n\n```{.r .cell-code}\n# Small label dataset\nplayoff_label <- tibble(\n  seed = c(9, 4),\n  pts_diff = c(30, 100),\n  conf = c(\"AFC\", \"AFC\"),\n  label = c(\"Outside<br>looking in\", \"Playoff<br>teams\"),\n  color = c(\"#D50A0A\", \"#013369\")\n)\n\nstand_df %>%\n  filter(seed <= 12) %>%\n  ggplot(aes(x = as.factor(seed), y = pts_diff)) +\n  geom_col(\n    aes(fill = if_else(seed <= 7, \"#013369\", \"#D50A0A\")),\n    width = 0.8\n  ) +\n  ggtext::geom_richtext(\n    data = playoff_label,\n    aes(label = label, color = color),\n    fill = \"#f0f0f0\",\n    label.color = NA,\n    # remove background and outline\n    label.padding = grid::unit(rep(0, 4), \"pt\"),\n    # remove padding\n    family = \"Chivo\",\n    hjust = 0.1,\n    fontface = \"bold\",\n    size = 6\n  ) +\n  geom_hline(yintercept = 0, size = 0.75, color = \"#737373\") +\n  geom_vline(xintercept = 7.5, size = 1, color = \"grey\") +\n  geom_vline(xintercept = 0.5, size = 0.75, color = \"#737373\") +\n  facet_grid(~conf, scales = \"free_x\") +\n  scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +\n  scale_fill_identity(aesthetics = c(\"fill\", \"color\")) +\n  theme_538() +\n  theme(panel.grid.major.x = element_blank()) +\n  labs(\n    x = \"Playoff Seed\",\n    y = \"Points Differential\",\n    title = \"Playoff teams typically have a positive point differential\",\n    subtitle = \"Data through week 15 of the 2020 NFL Season\",\n    caption = \"Plot: @thomas_mock | Data: ESPN\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/playoff-seed-1.png){width=5000}\n:::\n:::\n\n</details>\n\n::: {.cell fig.dim='[10,8]'}\n::: {.cell-output-display}\n![](index_files/figure-html/playoff-seed-1.png){width=5000}\n:::\n:::\n\n\n### Team vs Seed\n\nBy converting the x-axis to playoff seed instead of team, we've lost some data here, specifically which teams are which. We could add these back with by adding in an image at the end of each \"bar\".\n\n<details><summary>Add images</summary>\n\n::: {.cell hash='index_cache/html/unnamed-chunk-21_2e5d3cea7e5ab1335f6126fcbdc30d80'}\n\n```{.r .cell-code}\nlink_to_img <- function(x, width = 25) {\n  glue::glue(\"<img src='{x}' width='{width}'/>\")\n}\n\nplayoff_label <- tibble(\n  seed = c(9, 4),\n  pts_diff = c(90, 110),\n  conf = c(\"AFC\", \"AFC\"),\n  label = c(\"Outside<br>looking in\", \"Playoff<br>teams\"),\n  color = c(\"#D50A0A\", \"#013369\")\n)\n\nstand_plot_logo <- stand_df %>%\n  filter(seed <= 12) %>%\n  mutate(label = link_to_img(team_logo, width = 25)) %>%\n  ggplot(aes(x = as.factor(seed), y = pts_diff)) +\n  geom_col(\n    aes(fill = if_else(seed <= 7, \"#013369\", \"#D50A0A\")),\n    width = 0.8\n  ) +\n  ggtext::geom_richtext(\n    data = playoff_label,\n    aes(label = label, color = color),\n    fill = \"#f0f0f0\",\n    label.color = NA,\n    # remove background and outline\n    label.padding = grid::unit(rep(0, 4), \"pt\"),\n    # remove padding\n    family = \"Chivo\",\n    hjust = 0.1,\n    fontface = \"bold\",\n    size = 5\n  ) +\n  geom_richtext(\n    aes(\n      x = seed,\n      y = pts_diff,\n      label = label,\n      vjust = if_else(pts_diff <= 1, 1.1, -0.1)\n    ),\n    size = 1,\n    fill = \"#f0f0f0\",\n    label.color = NA,\n    # remove background and outline\n    label.padding = grid::unit(rep(0, 4), \"pt\") # remove padding\n  ) +\n  geom_hline(yintercept = 0, size = 0.75, color = \"#737373\") +\n  geom_vline(xintercept = 7.5, size = 1, color = \"grey\") +\n  geom_vline(xintercept = 0.5, size = 0.75, color = \"#737373\") +\n  facet_grid(~conf, scales = \"free_x\") +\n  scale_y_continuous(\n    breaks = seq(-125, 125, by = 25),\n    limits = c(-130, 130)\n  ) +\n  scale_fill_identity(aesthetics = c(\"fill\", \"color\")) +\n  theme_538() +\n  theme(\n    panel.grid.major.x = element_blank()\n  ) +\n  labs(\n    x = \"Playoff Seed\",\n    y = \"Points Differential\",\n    title = \"Playoff teams typically have a positive point differential\",\n    subtitle = \"Amongst the bubble teams, Baltimore appears to be the most 'deservering' of a playoff spot\",\n    caption = \"Plot: @thomas_mock | Data: ESPN\"\n  )\n\nggsave(\"stand_plot_logo.png\", stand_plot_logo, height = 8, width = 10, dpi = 300)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 4 rows containing missing values (position_stack).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 4 rows containing missing values (geom_rich_text).\n```\n:::\n:::\n\n</details>\n\n![](stand_plot_logo.png)\n\nAlternatively, we could convert the X-axis _back_ to team, and then add playoff seed numbers back to each of the bars. This is getting a bit busier, but I think it's useful to show the `if_else()` workflow for plotting a \"label\" at a specific point based on a criterion. That can be very helpful in plotting where you can't control the \"direction\" of a bar just like we see here.\n\n<details><summary>Direct Labels</summary>\n\n::: {.cell fig.dim='[10,8]'}\n\n```{.r .cell-code}\nstand_df %>%\n  filter(seed <= 12) %>%\n  ggplot(aes(x = tidytext::reorder_within(team_abb, seed, conf), y = pts_diff)) +\n  geom_col(\n    aes(fill = if_else(seed <= 7, \"#013369\", \"#D50A0A\")),\n    width = 0.8\n  ) +\n  ggtext::geom_richtext(\n    data = playoff_label,\n    aes(x = seed, label = label, color = color),\n    fill = \"#f0f0f0\",\n    label.color = NA,\n    # remove background and outline\n    label.padding = grid::unit(rep(0, 4), \"pt\"),\n    # remove padding\n    family = \"Chivo\",\n    hjust = 0.1,\n    fontface = \"bold\",\n    size = 6\n  ) +\n  ggtext::geom_richtext(\n    aes(label = seed, y = if_else(pts_diff <= 0, 10, -10)),\n    color = \"black\",\n    fill = \"#f0f0f0\",\n    label.color = NA,\n    # remove background and outline\n    label.padding = grid::unit(rep(0, 4), \"pt\"),\n    # remove padding\n    family = \"Chivo\",\n    hjust = 0.5,\n    fontface = \"bold\",\n    size = 4\n  ) +\n  geom_hline(yintercept = 0, size = 0.75, color = \"#737373\") +\n  geom_vline(xintercept = 7.5, size = 1, color = \"grey\") +\n  geom_vline(xintercept = 0.5, size = 0.75, color = \"#737373\") +\n  facet_grid(~conf, scales = \"free_x\") +\n  tidytext::scale_x_reordered() +\n  scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +\n  scale_fill_identity(aesthetics = c(\"fill\", \"color\")) +\n  theme_538() +\n  theme(\n    panel.grid.major.x = element_blank()\n  ) +\n  labs(\n    x = \"Playoff Seed\",\n    y = \"Points Differential\",\n    title = \"Playoff teams typically have a positive point differential\",\n    subtitle = \"Amongst the bubble teams, Baltimore appears to be the most 'deservering' of a playoff spot\",\n    caption = \"Plot: @thomas_mock | Data: ESPN\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/stand-direct-labels-1.png){width=5000}\n:::\n:::\n\n</details>\n\n::: {.cell fig.dim='[10,8]'}\n::: {.cell-output-display}\n![](index_files/figure-html/stand-direct-labels-1.png){width=5000}\n:::\n:::\n\n---\n\n\n# Blitzing\n\nNow for the next example of a story with various components, we can look at blitz rate vs pressure rate, or blitz rate vs pass affected rate (sacks + ints + passes defended)/pass att. This is building off an article from [FiveThirtyEight highlighting the Colts defense](https://fivethirtyeight.com/features/the-indianapolis-colts-finally-built-a-defensive-monster/) about a month ago.\n\n![](https://fivethirtyeight.com/wp-content/uploads/2020/11/schalter-COLTS-1118-1.png?w=575)\n\nThe data they used is available at [Pro-Football-Reference](https://www.pro-football-reference.com/years/2020/opp.htm) under a few defensive categories.\n\n## Get the data\n\nFirst we have to download the data from PFR. There are two defensive datasets we'll need, the Advanced Stats for pressure/blitz rates and the general Passing Stats for passes defended + intercetions.\n\nWe'll get them via the script below, and then combine by team.\n\n<details><summary>Data Collection</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_url <- \"https://www.pro-football-reference.com/years/2020/opp.htm\"\n\nraw_html <- read_html(raw_url)\n\nraw_table <- raw_html %>% \n  html_table(fill = TRUE) %>% \n  .[[2]] %>% \n  janitor::clean_names() %>% \n  tibble()\n\npressure_df <- raw_table %>% \n  select(tm, blitz_pct = bltz_percent, press_pct = prss_percent) %>% \n  mutate(across(c(blitz_pct, press_pct), parse_number))\n\npass_def_raw <- raw_html %>% \n  html_node(\"#all_passing\") %>% \n  html_nodes(xpath = \"comment()\") %>% \n  html_text() %>% \n  read_html() %>% \n  html_node(\"table\") %>% \n  html_table() %>% \n  janitor::clean_names() %>% \n  tibble()\n\npass_def_df <- pass_def_raw %>% \n  select(tm, pass_att = att, int, pass_def = pd, sack = sk, ypa = y_a, anypa = any_a)\n```\n:::\n\n</details>\n\nWe can then  do our left-join by `tm` to get our working dataset for this example.\n\n::: {.cell}\n\n```{.r .cell-code}\ncombo_pass <- left_join(\n  pressure_df, pass_def_df,\n  by = \"tm\"\n)\n\ncombo_pass\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32 × 9\n   tm              blitz_pct press_pct pass_att   int pass_def  sack   ypa anypa\n   <chr>               <dbl>     <dbl>    <dbl> <dbl>    <dbl> <dbl> <dbl> <dbl>\n 1 Atlanta Falcons      32.9      23.6      625    12       51    29   7.9   7.4\n 2 Buffalo Bills        35.8      22.2      573    15       76    38   6.9   5.7\n 3 Carolina Panth…      24        22.4      585     7       58    29   6.9   6.6\n 4 Chicago Bears        21.4      22.4      547    10       71    35   7.2   6.6\n 5 Cincinnati Ben…      31.1      19        541    11       80    17   7.3   7.2\n 6 Cleveland Brow…      21.3      21.9      585    11       74    38   7.2   6.6\n 7 Indianapolis C…      17.1      23.3      562    15       78    40   7.3   6.1\n 8 Arizona Cardin…      39.4      25.9      570    11       57    48   6.9   5.9\n 9 Dallas Cowboys       22.8      22.8      513    10       46    31   7.4   7.1\n10 Denver Broncos       27.9      26.2      567    10       64    42   7.2   6.2\n# … with 22 more rows\n```\n:::\n:::\n\n## Initial Plot\n\nWe'll first plot the data and try out our theme. I want to add the colors of the specific article we're recreating.\n\n::: {.cell fig.dim='[8,6]'}\n\n```{.r .cell-code}\ncombo_pass %>% \n  ggplot(aes(x = blitz_pct, y = press_pct)) +\n  geom_point() +\n  labs(\n    x = \"Blitz Rate\", y = \"Pressure Rate\",\n    title = \"The Colts are pressuring QBs without much of a blitz\",\n    subtitle = \"Blitz rate vs. pressure rate for each NFL defense, through Week 15 of the 2020 season\"\n  ) + \n  theme_538()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=4000}\n:::\n:::\n\n## Add color\n\nIf we add color specifically for the Colts, and then also expand the axis range to match the article, we get the following plot. I'll save the `mutate` calls into a new dataframe, and then plot it.\n\n<details><summary>Add Color and Text</summary>\n\n::: {.cell fig.dim='[8,6]'}\n\n```{.r .cell-code}\ncolt_df <- combo_pass %>% \n  mutate(\n    color = if_else(tm == \"Indianapolis Colts\", \"#359fda\", \"#91c390\"),\n    fill = colorspace::lighten(color, amount = 0.3)\n    ) %>% \n  rowwise() %>% \n  mutate(\n    att_def = sum(int, pass_def, sack),\n    cov_rate = att_def/pass_att*100\n    ) %>% \n  ungroup() %>% \n  arrange(desc(cov_rate))\n\ncolt_df %>% \n  ggplot(aes(x = blitz_pct, y = press_pct, fill = fill, color = color)) +\n  geom_point(size = 5, pch = 21, alpha = 0.8) +\n  scale_color_identity(aesthetics = c(\"fill\", \"color\")) +\n  labs(\n    x = \"Blitz Rate\", y = \"Pressure Rate\",\n    title = \"The Colts are pressuring QBs without much of a blitz\",\n    subtitle = \"Blitz rate vs. pressure rate for each NFL defense,\\nthrough Week 15 of the 2020 season\",\n    caption = toupper(\"Plot: @thomas_mock | Data: PFR | Inspiration: FiveThirtyEight\")\n  ) +\n  scale_x_continuous(limits = c(10, 45), breaks = seq(10, 45, by = 5)) +\n  scale_y_continuous(limits = c(10, 35), breaks = seq(10, 35, by = 5)) +\n  theme_538()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/colt-blitz-1.png){width=4000}\n:::\n:::\n\n</details>\n\n::: {.cell fig.dim='[8,6]'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/colt-blitz-1.png){width=4000}\n:::\n:::\n\n\n## Add labels\n\nWe can create a small \"helper\" dataset to plot the labels, and we've basically re-created the original plot!\n\n<details><summary>Add Labels</summary>\n\n::: {.cell fig.dim='[8,6]'}\n\n```{.r .cell-code}\nlabel_df_press <- tibble(\n  label = c(\"Colts\", \"Everyone else\"),\n  color = c(\"#359fda\", \"#91c390\"),\n  fill = colorspace::lighten(color, amount = 0.3),\n  x = c(16, 30),\n  y = c(25, 29)\n)\n\ncolt_df %>% \n  ggplot(aes(x = blitz_pct, y = press_pct, fill = fill, color = color)) +\n  geom_point(size = 5, pch = 21, alpha = 0.8) +\n  scale_color_identity(aesthetics = c(\"fill\", \"color\")) +\n  labs(\n    x = \"Blitz Rate\", y = \"Pressure Rate\",\n    title = \"The Colts are pressuring QBs without much of a blitz\",\n    subtitle = \"Blitz rate vs. pressure rate for each NFL defense,\\nthrough Week 15 of the 2020 season\",\n    caption = \"Source: Pro-Football-Reference.com\"\n  ) +\n  scale_x_continuous(limits = c(10, 45), breaks = seq(10, 45, by = 5)) +\n  scale_y_continuous(limits = c(10, 35), breaks = seq(10, 35, by = 5)) +\n  geom_label(\n    data = label_df_press,\n    aes(x = x, y = y, color = color, label = label),\n    fill = \"#f0f0f0\",\n    size = 6,\n    fontface = \"bold\",\n    hjust = 0.8,\n    label.size = NA # remove the border\n  ) +\n  theme_538()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/colt-blitz-label-1.png){width=4000}\n:::\n:::\n\n</details>\n\n::: {.cell fig.dim='[8,6]'}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/colt-blitz-label-1.png){width=4000}\n:::\n:::\n\n\n# Pass Affected Rate\n\nThe Colts are also getting good pass affected rate, which I've extended to be (interceptions + sacks + passes defended)/pass att. This is a proxy for the number of plays where the defense either stops the pass or is directly defending the reception.\n\n::: {.cell fig.dim='[10,8]'}\n\n```{.r .cell-code}\nlabel_df_cov <- tibble(\n  label = c(\"Colts\", \"Everyone else\"),\n  color = c(\"#359fda\", \"#91c390\"),\n  fill = colorspace::lighten(color, amount = 0.3),\n  x = c(16, 33),\n  y = c(25, 28)\n)\n```\n:::\n\nWe can then use that to create a very similar plot as what we saw before. Note I'm adding an annotation outside the plot area by turning `clip = 'off'` in `coord_cartesian()`. Otherwise this plot is very close code-wise to the previous one.\n\n<details><summary>Add Annotations</summary>\n\n::: {.cell fig.dim='[9,7]'}\n\n```{.r .cell-code}\ncolt_df %>%\n  ggplot(aes(x = blitz_pct, y = cov_rate, color = color, fill = fill)) +\n  geom_point(size = 5, pch = 21) +\n  scale_color_identity(aesthetics = c(\"fill\", \"color\")) +\n  labs(\n    x = \"Blitz Rate\",\n    y = \"Pass Affected Rate\",\n    title = \"The Colts affect passes at an elite rate while blitzing the least\",\n    subtitle = \"Blitz rate vs. Pass affected rate for each NFL defense,\\nthrough Week 15 of the 2020 season\",\n    caption = \"Plot: @thomas_mock | Source: PFR\"\n  ) +\n  scale_x_continuous(limits = c(10, 45), breaks = seq(10, 45, by = 5)) +\n  scale_y_continuous(limits = c(10, 35), breaks = seq(10, 35, by = 5)) +\n  coord_cartesian(clip = \"off\") +\n  annotate(\"text\", x = 10, y = 10, label = \"Pass affected rate = (ints + sacks + passes defended)/pass attempts\", vjust = 10, hjust = 0.2, color = \"darkgrey\") +\n  theme_538() +\n  geom_label(\n    data = label_df_cov,\n    aes(x = x, y = y, color = color, label = label),\n    fill = \"#f0f0f0\",\n    size = 6,\n    fontface = \"bold\",\n    hjust = 0.8,\n    label.size = NA\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/colt-annotate-1.png){width=4500}\n:::\n:::\n\n</details>\n\n::: {.cell fig.dim='[9,7]'}\n::: {.cell-output-display}\n![](index_files/figure-html/colt-annotate-1.png){width=4500}\n:::\n:::\n\n\n## Slope Chart\n\nBy pivoting the data longer, and converting the blitz/pass affected rate columns into a combined column we can pretty quickly get a decent slope-chat put together. In short, we are creating a new metric and corresponding value column out of the blitz/pass affected rates. \n\nThis can then be plotted where the metric name is on the x-axis and the metric value is the y-axis. Because both metrics are percentages they're in the same plotting range. \n\n::: {.cell fig.dim='[4,6]'}\n\n```{.r .cell-code}\nlong_colts <- colt_df %>%\n  mutate(\n    color = if_else(color == \"#91c390\", \"grey\", \"#359fda\"),\n    fill = color\n  ) %>%\n  rename(pass_affected_rate = cov_rate) %>%\n  pivot_longer(\n    cols = c(blitz_pct, pass_affected_rate), \n    names_to = \"metric\", values_to = \"value\"\n    ) %>%\n  mutate(\n    metric = if_else(\n      metric == \"blitz_pct\", \n      \"Blitz Rate\", \n      \"Pass Affected Rate\"\n      )\n  )\n\nlong_colts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 64 × 13\n   tm    press_pct pass_att   int pass_def  sack   ypa anypa color fill  att_def\n   <chr>     <dbl>    <dbl> <dbl>    <dbl> <dbl> <dbl> <dbl> <chr> <chr>   <dbl>\n 1 Pitt…      35.1      526    18       84    56   6.6   4.7 grey  grey      158\n 2 Pitt…      35.1      526    18       84    56   6.6   4.7 grey  grey      158\n 3 New …      26.3      557    18       84    45   6.7   5.4 grey  grey      147\n 4 New …      26.3      557    18       84    45   6.7   5.4 grey  grey      147\n 5 Miam…      24.8      545    18       76    41   8     6.2 grey  grey      135\n 6 Miam…      24.8      545    18       76    41   8     6.2 grey  grey      135\n 7 Los …      23.4      548    14       68    53   6.2   4.6 grey  grey      135\n 8 Los …      23.4      548    14       68    53   6.2   4.6 grey  grey      135\n 9 Wash…      25.9      529    16       66    47   6.4   4.8 grey  grey      129\n10 Wash…      25.9      529    16       66    47   6.4   4.8 grey  grey      129\n# … with 54 more rows, and 2 more variables: metric <chr>, value <dbl>\n```\n:::\n:::\n\n### Initial Slope Chart\n\nThe initial slope chart is only a few lines of code. We'll plot metric names on the x-axis, metric values on the y-axis, add lines by team between the compared measures, and then layer points on top of it all.\n\n::: {.cell fig.dim='[4,6]'}\n\n```{.r .cell-code}\nlong_colts %>%\n  ggplot(aes(x = metric, y = value, group = tm, color = color, fill = fill)) +\n  geom_line(aes(size = if_else(tm == \"Indianapolis Colts\", 2, 0.5))) +\n  geom_point(size = 5, pch = 21, color = \"#f0f0f0\", stroke = 1) +\n  scale_color_identity(aesthetics = c(\"fill\", \"color\")) +\n  scale_size_identity()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=600}\n:::\n:::\n\n### Add theme and context\n\nWe can further enhance the plot with the title/source data. I've also shared a little \"hack\" that allows you to plot outside of the plot area. By setting `clip = 'off'` in `coord_cartestian()`, we can add an annotation that falls \"outside\" of the plot area. This lets us add a description note similar to what FiveThirtyEight does with some of their plots. \n\n<details><summary>Add Theme and Context</summary>\n\n::: {.cell fig.dim='[4,6]'}\n\n```{.r .cell-code}\ncolt_slope <- long_colts %>%\n  ggplot(aes(x = metric, y = value, group = tm, color = color, fill = fill)) +\n  geom_line(aes(size = if_else(tm == \"Indianapolis Colts\", 2, 0.5))) +\n  geom_point(size = 5, pch = 21, color = \"#f0f0f0\", stroke = 1) +\n  geom_label(\n    data = filter(long_colts, tm == \"Indianapolis Colts\"),\n    aes(label = paste0(round(value, 0), \"%\")),\n    fill = NA,\n    hjust = c(1, 0),\n    nudge_x = c(-0.02, 0.02),\n    label.size = NA,\n    family = \"Chivo\",\n    fontface = \"bold\",\n    size = 6\n  ) +\n  annotate(\n    \"text\", x = 1, y = 12, vjust = 11, hjust = 0.4, color = \"darkgrey\",\n    family = \"Chivo\",\n    label = \"Pass affected rate = (sacks + ints + passes defended)/pass att\"\n    ) +\n  coord_cartesian(clip = \"off\") +\n  scale_y_continuous(limits = c(12, 43), breaks = scales::pretty_breaks(n = 7)) +\n  scale_x_discrete(expand = c(0.2, 0.2)) +\n  scale_color_identity(aesthetics = c(\"fill\", \"color\")) +\n  scale_size_identity() +\n  theme_538() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    axis.text.y = element_blank(),\n    plot.margin = margin(0.5, 0.5, 0.1, 0.5, unit = \"cm\"),\n    axis.text.x = element_text(color = \"black\", size = 20),\n    plot.caption = element_markdown(size = 14)\n  ) +\n  labs(\n    x = \"\",\n    y = \"\",\n    title = \"The Colts affect more passes with fewer rushers\",\n    subtitle = \"Data since through Week 15 of the 2020 NFL season\",\n    caption = \"**Plot**: @thomas_mock | **Data**: PFR\"\n  )\n\nggsave(\"colt_slope.png\", colt_slope, height = 5, width = 4, dpi = 500, scale = 1.75)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 row(s) containing missing values (geom_path).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 rows containing missing values (geom_point).\n```\n:::\n:::\n\n</details>\n\n![](colt_slope.png)\n\n## Barbell\n\nFor our last example with this data, we're going to really highlight the Colt's passing defense effectiveness without a blitz. A barbell plot is another combo of lines + points, where the line is a segment between the two measures of interest.\n\nOur first attempt is pretty straightforward, we'll plot the segment between the points, then layer two `geom_points()`, one for each measure.\n\n<details><summary>Initial Barbell</summary>\n\n::: {.cell}\n\n```{.r .cell-code}\nbarbell_first <- colt_df %>% \n  rename(pass_affected_rate = cov_rate) %>% \n  mutate(\n    color = str_replace(color, \"#91c390\", \"grey\"),\n    fill = str_replace(fill, \"#91c390\", \"grey\"),\n    tm = word(tm, -1)\n    ) %>% \n  ggplot(aes(x = blitz_pct, y = fct_reorder(tm, pass_affected_rate), \n             group = tm, color = color)) +\n  geom_segment(aes(xend = pass_affected_rate, yend = tm), size = 2) +\n  geom_point(size = 5, color = \"grey\") +\n  geom_point(aes(x = pass_affected_rate, y = tm), size = 5, color = \"black\") +\n  scale_color_identity()\n\nggsave(\"barbell_first.png\", barbell_first, height = 12, width = 8, units = \"in\", dpi = 300)\n```\n:::\n\n</details>\n\n![](barbell_first.png)\n\n### Theme and context\n\nWe can add some more labels and context, along with our theme and a custom color placement to indicate the Colts as the outlier of interest.\n\n<details><summary>Barbell Theme</summary>\n\n::: {.cell fig.dim='[4,6]'}\n\n```{.r .cell-code}\ncolt_colors <- colt_df %>% \n  arrange(cov_rate) %>% \n  mutate(color = str_replace(color, \"#91c390\", \"black\")) %>% \n  pull(color)\n\npass_label_df <- tibble(\n  x = c(20, 19.5),\n  tm = c(30, 25),\n  label = c(\"Blitz Rate\", \"Pass Affected<br>Rate\"),\n  color = c(\"grey\", \"black\")\n)\n\nex_barbell <- colt_df %>%\n  rename(pass_affected_rate = cov_rate) %>%\n  mutate(\n    color = str_replace(color, \"#91c390\", \"grey\"),\n    fill = str_replace(fill, \"#91c390\", \"grey\"),\n    tm = word(tm, -1)\n  ) %>%\n  ggplot(aes(x = blitz_pct, y = fct_reorder(tm, pass_affected_rate), \n             group = tm, color = color, fill = fill)) +\n  geom_segment(aes(xend = pass_affected_rate, yend = tm), size = 2) +\n  geom_point(size = 5, color = \"grey\") +\n  geom_point(aes(x = pass_affected_rate, y = tm), size = 5, color = \"black\") +\n  ggtext::geom_richtext(\n    data = pass_label_df,\n    aes(x = x, y = tm, label = label, color = color),\n    fill = \"#f0f0f0\",\n    label.color = NA,\n    # remove background and outline\n    label.padding = grid::unit(rep(0, 4), \"pt\"),\n    # remove padding\n    family = \"Chivo\",\n    hjust = 1,\n    fontface = \"bold\",\n    size = 5\n  ) +\n  annotate(\n    \"text\",\n    x = 10,\n    y = 1,\n    vjust = 10,\n    hjust = 0.4,\n    color = \"darkgrey\",\n    family = \"Chivo\",\n    label = \"Pass affected rate = (sacks + ints + passes defended)/pass att\"\n  ) +\n  scale_x_continuous(limits = c(10, 45), breaks = scales::pretty_breaks(n = 7)) +\n  scale_color_identity(aesthetics = c(\"fill\", \"color\")) +\n  coord_cartesian(clip = \"off\") +\n  labs(\n    x = \"<span style = 'color:grey;'>Blitz rate</span> vs Pass affected rate\",\n    y = \"\",\n    title = \"The Colts affect more passes with fewer rushers\",\n    subtitle = \"Data through Week 15 of the 2020 NFL season\",\n    caption = \"**Plot**: @thomas_mock | **Data**: PFR\"\n  ) +\n  theme_538() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    axis.text.y = element_text(color = colt_colors, size = 18),\n    axis.title.x = element_markdown(),\n    plot.caption = element_markdown()\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Vectorized input to `element_text()` is not officially supported.\nResults may be unexpected or may change in future versions of ggplot2.\n```\n:::\n\n```{.r .cell-code}\nggsave(\"barbell.png\", ex_barbell, height = 12, width = 8, units = \"in\", dpi = 300)\n```\n:::\n\n</details>\n\n![](barbell.png)\n\n---\n\n# The end\n\nWe've now covered quite a bit about themes and customization of `ggplot2` beyond the basics! You can dive back into other themes from `ggthemes` to recreate them/build off of them or develop your own novel theme to use.\n\nIf my blog has helped you, you can [buy me a coffee](https://www.buymeacoffee.com/thomasmock)!\n\n:::{.callout-tip collapse=\"true\"}\n## Expand for Session Info\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS Monterey 12.2.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2022-04-28\n pandoc   2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n quarto   0.9.294 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n colorspace  * 2.0-3   2022-02-21 [1] CRAN (R 4.2.0)\n dplyr       * 1.0.8   2022-02-08 [1] CRAN (R 4.2.0)\n espnscrapeR * 0.6.5   2022-04-26 [1] Github (jthomasmock/espnscrapeR@084ce80)\n forcats     * 0.5.1   2021-01-27 [1] CRAN (R 4.2.0)\n ggplot2     * 3.3.5   2021-06-25 [1] CRAN (R 4.2.0)\n ggridges    * 0.5.3   2021-01-08 [1] CRAN (R 4.2.0)\n ggtext      * 0.1.1   2020-12-17 [1] CRAN (R 4.2.0)\n ggthemes    * 4.2.4   2021-01-20 [1] CRAN (R 4.2.0)\n purrr       * 0.3.4   2020-04-17 [1] CRAN (R 4.2.0)\n readr       * 2.1.2   2022-01-30 [1] CRAN (R 4.2.0)\n rvest       * 1.0.2   2021-10-16 [1] CRAN (R 4.2.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n stringr     * 1.4.0   2019-02-10 [1] CRAN (R 4.2.0)\n systemfonts * 1.0.4   2022-02-11 [1] CRAN (R 4.2.0)\n tibble      * 3.1.6   2021-11-07 [1] CRAN (R 4.2.0)\n tidyr       * 1.2.0   2022-02-01 [1] CRAN (R 4.2.0)\n tidyverse   * 1.3.1   2021-04-15 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}